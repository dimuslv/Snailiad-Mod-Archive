
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 7
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("DustRing",[PackageNamespace("")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxPoint")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxRect")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxObject")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxGroup")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxGroup")
   newclass #DustRing
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace(""),"DustRing")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package
{
   import org.flixel.FlxG;
   import org.flixel.FlxGroup;
   
   public class DustRing extends FlxGroup
   {
      
      private static const SPIN_SPEED:Number = 6.283185307179586;
      
      private static const DUST_NUM:int = 16;
      
      private static const RADIUS:Number = 234;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 3
         localcount 1
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal0
         pushscope
         findproperty QName(PrivateNamespace(null,"#DustRing"),"SPIN_SPEED")
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         pushbyte 2
         multiply
         initproperty QName(PrivateNamespace(null,"#DustRing"),"SPIN_SPEED")
         findproperty QName(PrivateNamespace(null,"#DustRing"),"DUST_NUM")
         pushbyte 16
         initproperty QName(PrivateNamespace(null,"#DustRing"),"DUST_NUM")
         findproperty QName(PrivateNamespace(null,"#DustRing"),"RADIUS")
         pushshort 234
         initproperty QName(PrivateNamespace(null,"#DustRing"),"RADIUS")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var originX:int;
      
      private var originY:int;
      
      private var elapsed:Number = 0;
      
      private var INWARD_SPEED:Number = 90;
      
      private var radius:Number = 234;
      
      private var repeats:int = 0;
      
      public function DustRing(param1:int, param2:int, param3:int = 0, param4:Number = 1.0)
      {
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"Number")
         optional Integer(0)
         optional Double(1.0)
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 6
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#DustRing"),"originX")
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#DustRing"),"originY")
         getlocal0
         getlex QName(PrivateNamespace(null,"#DustRing"),"RADIUS")
         getlocal3
         add
         initproperty QName(PrivateNamespace(null,"#DustRing"),"radius")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"INWARD_SPEED")
         getlocal 4
         multiply
         initproperty QName(PrivateNamespace(null,"#DustRing"),"INWARD_SPEED")
         pushbyte 0
         setlocal 5
         jump ofs0
         ofs1:
         label
         findpropstrict QName(PackageNamespace(""),"add")
         findpropstrict QName(PackageNamespace(""),"Dust")
         constructprop QName(PackageNamespace(""),"Dust"), 0
         callpropvoid QName(PackageNamespace(""),"add"), 1
         inclocal_i 5
         ofs0:
         getlocal 5
         getlex QName(PrivateNamespace(null,"#DustRing"),"DUST_NUM")
         iflt ofs1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"updatePositions"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function update() : void
      {
         trait method QName(PackageNamespace(""),"update")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"x")
         initproperty QName(PrivateNamespace(null,"#DustRing"),"originX")
         getlocal0
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"y")
         initproperty QName(PrivateNamespace(null,"#DustRing"),"originY")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"elapsed")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         add
         initproperty QName(PrivateNamespace(null,"#DustRing"),"elapsed")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"radius")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"INWARD_SPEED")
         multiply
         subtract
         initproperty QName(PrivateNamespace(null,"#DustRing"),"radius")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"radius")
         pushbyte 0
         ifnle ofs0
         getlocal0
         dup
         setlocal1
         getproperty QName(PrivateNamespace(null,"#DustRing"),"repeats")
         decrement_i
         setlocal2
         getlocal1
         getlocal2
         setproperty QName(PrivateNamespace(null,"#DustRing"),"repeats")
         kill 2
         kill 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"repeats")
         pushbyte 0
         ifnle ofs1
         findpropstrict QName(PackageNamespace(""),"kill")
         callpropvoid QName(PackageNamespace(""),"kill"), 0
         returnvoid
         ofs1:
         getlocal0
         getlex QName(PrivateNamespace(null,"#DustRing"),"RADIUS")
         initproperty QName(PrivateNamespace(null,"#DustRing"),"radius")
         ofs0:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"updatePositions"), 0
         getlocal0
         callsupervoid QName(PackageNamespace(""),"update"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function updatePositions() : void
      {
         trait method QName(PackageNamespace(""),"updatePositions")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal2
         pushbyte 0
         setlocal1
         jump ofs0
         ofs1:
         label
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         pushbyte 2
         multiply
         getlex QName(PrivateNamespace(null,"#DustRing"),"DUST_NUM")
         divide
         getlocal1
         multiply
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"elapsed")
         getlex QName(PrivateNamespace(null,"#DustRing"),"SPIN_SPEED")
         multiply
         add
         convert_d
         setlocal2
         getlex QName(PackageNamespace(""),"members")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#DustRing"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#DustRing/1"),PackageInternalNs(""),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("DustRing"),StaticProtectedNs("DustRing"),StaticProtectedNs("org.flixel:FlxGroup"),StaticProtectedNs("org.flixel:FlxObject"),StaticProtectedNs("org.flixel:FlxRect"),StaticProtectedNs("org.flixel:FlxPoint"),StaticProtectedNs("Object")])
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"originX")
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         callproperty QName(PackageNamespace(""),"cos"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"radius")
         multiply
         add
         setproperty Multiname("x",[PrivateNamespace(null,"#DustRing"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#DustRing/1"),PackageInternalNs(""),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("DustRing"),StaticProtectedNs("DustRing"),StaticProtectedNs("org.flixel:FlxGroup"),StaticProtectedNs("org.flixel:FlxObject"),StaticProtectedNs("org.flixel:FlxRect"),StaticProtectedNs("org.flixel:FlxPoint"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace(""),"members")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#DustRing"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#DustRing/1"),PackageInternalNs(""),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("DustRing"),StaticProtectedNs("DustRing"),StaticProtectedNs("org.flixel:FlxGroup"),StaticProtectedNs("org.flixel:FlxObject"),StaticProtectedNs("org.flixel:FlxRect"),StaticProtectedNs("org.flixel:FlxPoint"),StaticProtectedNs("Object")])
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"originY")
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         callproperty QName(PackageNamespace(""),"sin"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DustRing"),"radius")
         multiply
         add
         setproperty Multiname("y",[PrivateNamespace(null,"#DustRing"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#DustRing/1"),PackageInternalNs(""),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("DustRing"),StaticProtectedNs("DustRing"),StaticProtectedNs("org.flixel:FlxGroup"),StaticProtectedNs("org.flixel:FlxObject"),StaticProtectedNs("org.flixel:FlxRect"),StaticProtectedNs("org.flixel:FlxPoint"),StaticProtectedNs("Object")])
         inclocal_i 1
         ofs0:
         getlocal1
         getlex QName(PrivateNamespace(null,"#DustRing"),"DUST_NUM")
         iflt ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
