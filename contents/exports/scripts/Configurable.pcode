
{
   method
   name ""
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("Configurable",[PackageNamespace("")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #Configurable
   popscope
   initproperty QName(PackageNamespace(""),"Configurable")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package
{
   import flash.utils.ByteArray;
   
   public class Configurable
   {
      
      {
         method
         name ""
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var configXmlFile:Class;
      
      private var _xml:XML;
      
      public function Configurable()
      {
         method
         name ":Configurable/Configurable"
         returns null
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         debug 1, "_loc1_", 0, 17
         debug 1, "_loc2_", 1, 18
         getlocal0
         getlex QName(PackageNamespace(""),"Configurable_configXmlFile")
         setproperty QName(PrivateNamespace(":Configurable"),"configXmlFile")
         getlocal0
         constructsuper 0
         getlocal0
         constructprop QName(PrivateNamespace(":Configurable"),"configXmlFile"), 0
         coerce QName(PackageNamespace("flash.utils"),"ByteArray")
         setlocal1
         getlocal1
         getlocal1
         getproperty Multiname("length",[PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PackageInternalNs(""),PrivateNamespace(":Configurable"),ProtectedNamespace(":Configurable"),StaticProtectedNs(":Configurable"),PrivateNamespace("Configurable.as$99")])
         callproperty Multiname("readUTFBytes",[PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PackageInternalNs(""),PrivateNamespace(":Configurable"),ProtectedNamespace(":Configurable"),StaticProtectedNs(":Configurable"),PrivateNamespace("Configurable.as$99")]), 1
         coerce_s
         setlocal2
         getlocal0
         findpropstrict QName(PackageNamespace(""),"XML")
         getlocal2
         constructprop QName(PackageNamespace(""),"XML"), 1
         setproperty QName(PrivateNamespace(":Configurable"),"_xml")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function destroy() : void
      {
         trait method QName(PackageNamespace(""),"destroy")
         dispid 0
         method
         name "Configurable:destroy"
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         pushnull
         setproperty QName(PrivateNamespace(":Configurable"),"_xml")
         getlocal0
         pushnull
         setproperty QName(PrivateNamespace(":Configurable"),"configXmlFile")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getPlayerStartX(param1:int = 0) : int
      {
         trait method QName(PackageNamespace(""),"getPlayerStartX")
         dispid 0
         method
         name "Configurable:getPlayerStartX"
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"int")
         optional Integer(0)
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         debug 1, "param1", 0, 0
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"bossRush")
         iffalse ofs0
         pushshort 237
         returnvalue
         ofs0:
         pushbyte 99
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getPlayerStartY(param1:int = 0) : int
      {
         trait method QName(PackageNamespace(""),"getPlayerStartY")
         dispid 0
         method
         name "Configurable:getPlayerStartY"
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"int")
         optional Integer(0)
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         debug 1, "param1", 0, 0
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"bossRush")
         iffalse ofs0
         pushshort 313
         returnvalue
         ofs0:
         pushshort 169
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
