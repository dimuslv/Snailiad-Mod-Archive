
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("CSSCondition",[PackageNamespace("mx.styles")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #CSSCondition
   popscope
   initproperty QName(PackageNamespace("mx.styles"),"CSSCondition")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.styles
{
   public class CSSCondition
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _kind:String;
      
      private var _value:String;
      
      public function CSSCondition(param1:String, param2:String)
      {
         method
         name null
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"String")
         returns null
         
         body
         maxstack 2
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CSSCondition"),"_kind")
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#CSSCondition"),"_value")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get kind() : String
      {
         trait getter QName(PackageNamespace(""),"kind")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CSSCondition"),"_kind")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get specificity() : int
      {
         trait getter QName(PackageNamespace(""),"specificity")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"ID")
         ifne ofs0
         pushbyte 100
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"CLASS")
         ifne ofs1
         pushbyte 10
         returnvalue
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"PSEUDO")
         ifne ofs2
         pushbyte 10
         returnvalue
         ofs2:
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get value() : String
      {
         trait getter QName(PackageNamespace(""),"value")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CSSCondition"),"_value")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function matchesStyleClient(param1:IAdvancedStyleClient) : Boolean
      {
         trait method QName(PackageNamespace(""),"matchesStyleClient")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.styles"),"IAdvancedStyleClient")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace(""),"Array")
         setlocal3
         pushbyte 0
         convert_u
         setlocal 4
         pushfalse
         setlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"CLASS")
         ifne ofs0
         getlocal1
         getproperty QName(Namespace("mx.styles:ISimpleStyleClient"),"styleName")
         pushnull
         equals
         not
         dup
         iffalse ofs1
         pop
         getlocal1
         getproperty QName(Namespace("mx.styles:ISimpleStyleClient"),"styleName")
         getlex QName(PackageNamespace(""),"String")
         istypelate
         ofs1:
         iffalse ofs2
         getlocal1
         getproperty QName(Namespace("mx.styles:ISimpleStyleClient"),"styleName")
         getlex QName(PackageNamespace(""),"RegExp")
         pushstring "\\s+"
         construct 1
         callproperty Multiname("split",[PrivateNamespace(null,"#CSSCondition"),PackageNamespace(""),PackageNamespace("mx.styles"),PrivateNamespace(null,"#CSSCondition/1"),PackageInternalNs("mx.styles"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.styles:CSSCondition"),StaticProtectedNs("mx.styles:CSSCondition"),StaticProtectedNs("Object")]), 1
         coerce QName(PackageNamespace(""),"Array")
         setlocal3
         pushbyte 0
         convert_u
         setlocal 4
         jump ofs3
         ofs4:
         label
         getlocal3
         getlocal 4
         getproperty MultinameL([PrivateNamespace(null,"#CSSCondition"),PackageNamespace(""),PackageNamespace("mx.styles"),PrivateNamespace(null,"#CSSCondition/1"),PackageInternalNs("mx.styles"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.styles:CSSCondition"),StaticProtectedNs("mx.styles:CSSCondition"),StaticProtectedNs("Object")])
         getlocal0
         getproperty QName(PackageNamespace(""),"value")
         ifne ofs5
         pushtrue
         setlocal2
         jump ofs2
         ofs5:
         getlocal 4
         increment
         convert_u
         setlocal 4
         ofs3:
         getlocal 4
         getlocal3
         getproperty QName(PackageNamespace(""),"length")
         iflt ofs4
         ofs2:
         jump ofs6
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"ID")
         ifne ofs7
         getlocal1
         getproperty QName(Namespace("mx.styles:IAdvancedStyleClient"),"id")
         getlocal0
         getproperty QName(PackageNamespace(""),"value")
         ifne ofs8
         pushtrue
         setlocal2
         ofs8:
         jump ofs6
         ofs7:
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"PSEUDO")
         ifne ofs6
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"value")
         callproperty QName(Namespace("mx.styles:IAdvancedStyleClient"),"matchesCSSState"), 1
         iffalse ofs6
         pushtrue
         setlocal2
         ofs6:
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function toString() : String
      {
         trait method QName(PackageNamespace(""),"toString")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce_s
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"CLASS")
         ifne ofs0
         pushstring "."
         getlocal0
         getproperty QName(PackageNamespace(""),"value")
         add
         coerce_s
         setlocal1
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"ID")
         ifne ofs2
         pushstring "#"
         getlocal0
         getproperty QName(PackageNamespace(""),"value")
         add
         coerce_s
         setlocal1
         jump ofs1
         ofs2:
         getlocal0
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"PSEUDO")
         ifne ofs3
         pushstring ":"
         getlocal0
         getproperty QName(PackageNamespace(""),"value")
         add
         coerce_s
         setlocal1
         jump ofs1
         ofs3:
         pushstring ""
         setlocal1
         ofs1:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
