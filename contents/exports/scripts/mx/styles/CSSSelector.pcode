
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("CSSSelector",[PackageNamespace("mx.styles")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #CSSSelector
   popscope
   initproperty QName(PackageNamespace("mx.styles"),"CSSSelector")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.styles
{
   import mx.core.mx_internal;
   
   public class CSSSelector
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _ancestor:CSSSelector;
      
      private var _conditions:Array;
      
      private var _subject:String;
      
      public function CSSSelector(param1:String, param2:Array = null, param3:CSSSelector = null)
      {
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Array")
         param QName(PackageNamespace("mx.styles"),"CSSSelector")
         optional Null()
         optional Null()
         returns null
         
         body
         maxstack 2
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CSSSelector"),"_subject")
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#CSSSelector"),"_conditions")
         getlocal0
         getlocal3
         initproperty QName(PrivateNamespace(null,"#CSSSelector"),"_ancestor")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get ancestor() : CSSSelector
      {
         trait getter QName(PackageNamespace(""),"ancestor")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.styles"),"CSSSelector")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CSSSelector"),"_ancestor")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get conditions() : Array
      {
         trait getter QName(PackageNamespace(""),"conditions")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CSSSelector"),"_conditions")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get specificity() : int
      {
         trait getter QName(PackageNamespace(""),"specificity")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal2
         pushbyte 0
         setlocal1
         pushstring "*"
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         equals
         not
         dup
         iffalse ofs0
         pop
         pushstring "global"
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         equals
         not
         ofs0:
         dup
         iffalse ofs1
         pop
         pushstring ""
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         equals
         not
         ofs1:
         iffalse ofs2
         pushbyte 1
         setlocal1
         ofs2:
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         pushnull
         ifeq ofs3
         pushbyte 0
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         coerce_a
         setlocal 4
         jump ofs4
         ofs5:
         label
         getlocal 4
         getlocal3
         nextvalue
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal2
         getlocal1
         getlocal2
         getproperty QName(PackageNamespace(""),"specificity")
         add
         convert_i
         setlocal1
         ofs4:
         hasnext2 4, 3
         iftrue ofs5
         kill 4
         kill 3
         ofs3:
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         pushnull
         ifeq ofs6
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         getproperty QName(PackageNamespace(""),"specificity")
         add
         convert_i
         setlocal1
         ofs6:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get subject() : String
      {
         trait getter QName(PackageNamespace(""),"subject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CSSSelector"),"_subject")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function matchesStyleClient(param1:IAdvancedStyleClient) : Boolean
      {
         trait method QName(PackageNamespace(""),"matchesStyleClient")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.styles"),"IAdvancedStyleClient")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 7
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.styles"),"IAdvancedStyleClient")
         setlocal 4
         pushfalse
         setlocal2
         pushnull
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         iffalse ofs1
         pushbyte 0
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         coerce_a
         setlocal 6
         jump ofs2
         ofs3:
         label
         getlocal 6
         getlocal 5
         nextvalue
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal3
         getlocal3
         getlocal1
         callproperty QName(PackageNamespace(""),"matchesStyleClient"), 1
         convert_b
         setlocal2
         getlocal2
         iftrue ofs2
         pushfalse
         returnvalue
         ofs2:
         hasnext2 6, 5
         iftrue ofs3
         kill 6
         kill 5
         ofs1:
         pushfalse
         setlocal2
         getlocal1
         getproperty QName(Namespace("mx.styles:IAdvancedStyleClient"),"styleParent")
         coerce QName(PackageNamespace("mx.styles"),"IAdvancedStyleClient")
         setlocal 4
         jump ofs4
         ofs5:
         label
         getlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         getproperty QName(PackageNamespace(""),"subject")
         callproperty QName(Namespace("mx.styles:IAdvancedStyleClient"),"matchesCSSType"), 1
         convert_b
         dup
         iftrue ofs6
         pop
         pushstring "*"
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         getproperty QName(PackageNamespace(""),"subject")
         equals
         ofs6:
         iffalse ofs7
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         getlocal 4
         callproperty QName(PackageNamespace(""),"matchesStyleClient"), 1
         convert_b
         setlocal2
         getlocal2
         iffalse ofs7
         jump ofs8
         ofs7:
         getlocal 4
         getproperty QName(Namespace("mx.styles:IAdvancedStyleClient"),"styleParent")
         coerce QName(PackageNamespace("mx.styles"),"IAdvancedStyleClient")
         setlocal 4
         ofs4:
         getlocal 4
         pushnull
         ifne ofs5
         ofs8:
         jump ofs9
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         pushstring "*"
         equals
         dup
         iftrue ofs10
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         pushstring ""
         equals
         ofs10:
         dup
         iftrue ofs11
         pop
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         callproperty QName(Namespace("mx.styles:IAdvancedStyleClient"),"matchesCSSType"), 1
         convert_b
         ofs11:
         iffalse ofs12
         pushtrue
         setlocal2
         ofs12:
         getlocal2
         convert_b
         dup
         iffalse ofs13
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         pushnull
         equals
         not
         ofs13:
         iffalse ofs9
         pushbyte 0
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         coerce_a
         setlocal 6
         jump ofs14
         ofs15:
         label
         getlocal 6
         getlocal 5
         nextvalue
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal3
         getlocal3
         getlocal1
         callproperty QName(PackageNamespace(""),"matchesStyleClient"), 1
         convert_b
         setlocal2
         getlocal2
         iftrue ofs14
         pushfalse
         returnvalue
         ofs14:
         hasnext2 6, 5
         iftrue ofs15
         kill 6
         kill 5
         ofs9:
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function getPseudoCondition() : String
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getPseudoCondition")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal2
         pushnull
         coerce_s
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         iffalse ofs0
         pushbyte 0
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         coerce_a
         setlocal 4
         jump ofs1
         ofs2:
         label
         getlocal 4
         getlocal3
         nextvalue
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"kind")
         getlex QName(PackageNamespace("mx.styles"),"CSSConditionKind")
         getproperty QName(PackageNamespace(""),"PSEUDO")
         ifne ofs1
         getlocal2
         getproperty QName(PackageNamespace(""),"value")
         coerce_s
         setlocal1
         jump ofs3
         ofs1:
         hasnext2 4, 3
         iftrue ofs2
         ofs3:
         kill 4
         kill 3
         ofs0:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function toString() : String
      {
         trait method QName(PackageNamespace(""),"toString")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce_s
         setlocal1
         pushnull
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         pushnull
         ifeq ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"ancestor")
         callproperty QName(PackageNamespace(""),"toString"), 0
         pushstring " "
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         add
         coerce_s
         setlocal1
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"subject")
         coerce_s
         setlocal1
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         pushnull
         ifeq ofs2
         pushbyte 0
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"conditions")
         coerce_a
         setlocal 4
         jump ofs3
         ofs4:
         label
         getlocal 4
         getlocal3
         nextvalue
         coerce QName(PackageNamespace("mx.styles"),"CSSCondition")
         setlocal2
         getlocal1
         getlocal2
         callproperty QName(PackageNamespace(""),"toString"), 0
         add
         coerce_s
         setlocal1
         ofs3:
         hasnext2 4, 3
         iftrue ofs4
         kill 4
         kill 3
         ofs2:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
