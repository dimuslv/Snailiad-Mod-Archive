
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 4
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("ModuleManager",[PackageNamespace("mx.modules")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #ModuleManager
   popscope
   initproperty QName(PackageNamespace("mx.modules"),"ModuleManager")
   findpropstrict Multiname("ModuleManagerImpl",[PrivateNamespace(null,"#ModuleManager/1")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   newclass #ModuleManagerImpl
   popscope
   popscope
   initproperty QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleManagerImpl")
   findpropstrict Multiname("ModuleInfo",[PrivateNamespace(null,"#ModuleManager/1")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   newclass #ModuleInfo
   popscope
   popscope
   initproperty QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
   findpropstrict Multiname("FactoryInfo",[PrivateNamespace(null,"#ModuleManager/1")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #FactoryInfo
   popscope
   initproperty QName(PrivateNamespace(null,"#ModuleManager/1"),"FactoryInfo")
   findpropstrict Multiname("ModuleInfoProxy",[PrivateNamespace(null,"#ModuleManager/1")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   newclass #ModuleInfoProxy
   popscope
   popscope
   initproperty QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfoProxy")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.modules
{
   import mx.core.IFlexModuleFactory;
   import mx.core.mx_internal;
   
   use namespace mx_internal;
   
   public class ModuleManager
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function ModuleManager()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public static function getModule(param1:String) : IModuleInfo
      {
         trait method QName(PackageNamespace(""),"getModule")
         flag FINAL
         dispid 3
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace("mx.modules"),"IModuleInfo")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PrivateNamespace(null,"#ModuleManager"),"getSingleton")
         callproperty QName(PrivateNamespace(null,"#ModuleManager"),"getSingleton"), 0
         getlocal1
         callproperty Multiname("getModule",[PrivateNamespace(null,"#ModuleManager"),PrivateNamespace(null,"#ModuleManager/1"),PackageNamespace(""),PackageNamespace("mx.modules"),PackageInternalNs("mx.modules"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.modules:ModuleManager"),StaticProtectedNs("mx.modules:ModuleManager"),StaticProtectedNs("Object")]), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getAssociatedFactory(param1:Object) : IFlexModuleFactory
      {
         trait method QName(PackageNamespace(""),"getAssociatedFactory")
         flag FINAL
         dispid 4
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PrivateNamespace(null,"#ModuleManager"),"getSingleton")
         callproperty QName(PrivateNamespace(null,"#ModuleManager"),"getSingleton"), 0
         getlocal1
         callproperty Multiname("getAssociatedFactory",[PrivateNamespace(null,"#ModuleManager"),PrivateNamespace(null,"#ModuleManager/1"),PackageNamespace(""),PackageNamespace("mx.modules"),PackageInternalNs("mx.modules"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.modules:ModuleManager"),StaticProtectedNs("mx.modules:ModuleManager"),StaticProtectedNs("Object")]), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private static function getSingleton() : Object
      {
         trait method QName(PrivateNamespace(null,"#ModuleManager"),"getSingleton")
         flag FINAL
         dispid 5
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.modules"),"ModuleManagerGlobals")
         getproperty QName(PackageNamespace(""),"managerSingleton")
         iftrue ofs0
         getlex QName(PackageNamespace("mx.modules"),"ModuleManagerGlobals")
         findpropstrict QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleManagerImpl")
         constructprop QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleManagerImpl"), 0
         setproperty QName(PackageNamespace(""),"managerSingleton")
         ofs0:
         getlex QName(PackageNamespace("mx.modules"),"ModuleManagerGlobals")
         getproperty QName(PackageNamespace(""),"managerSingleton")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}

import flash.events.EventDispatcher;
import flash.system.ApplicationDomain;
import flash.utils.getQualifiedClassName;
import mx.core.IFlexModuleFactory;
import mx.modules.IModuleInfo;

class ModuleManagerImpl extends EventDispatcher
{
   
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 4
      maxscopedepth 5
      
      code
      getlocal0
      pushscope
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   private var moduleList:Object;
   
   function ModuleManagerImpl()
   {
      method
      name null
      returns null
      
      body
      maxstack 2
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      newobject 0
      initproperty QName(PrivateNamespace(null,"#ModuleManagerImpl"),"moduleList")
      getlocal0
      constructsuper 0
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function getAssociatedFactory(param1:Object) : IFlexModuleFactory
   {
      trait method QName(PackageNamespace(""),"getAssociatedFactory")
      dispid 0
      method
      name null
      flag NEED_ACTIVATION
      param QName(PackageNamespace(""),"Object")
      returns QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      
      body
      maxstack 4
      localcount 6
      initscopedepth 6
      maxscopedepth 11
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"object")
      slotid 1
      type QName(PackageNamespace(""),"Object")
      end ; trait
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"className")
      slotid 2
      type QName(PackageNamespace(""),"String")
      end ; trait
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"m")
      slotid 3
      type QName(PackageNamespace(""),"Object")
      end ; trait
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"info")
      slotid 4
      type QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      end ; trait
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"domain")
      slotid 5
      type QName(PackageNamespace("flash.system"),"ApplicationDomain")
      end ; trait
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"cls")
      slotid 6
      type QName(PackageNamespace(""),"Class")
      end ; trait
      
      code
      getlocal0
      pushscope
      newactivation
      dup
      setlocal2
      pushscope
      getscopeobject 1
      pushnull
      coerce QName(PackageNamespace(""),"Object")
      setslot 3
      getscopeobject 1
      pushnull
      coerce QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      setslot 4
      getscopeobject 1
      pushnull
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      setslot 5
      getscopeobject 1
      pushnull
      coerce QName(PackageNamespace(""),"Class")
      setslot 6
      getscopeobject 1
      getlocal1
      setslot 1
      getscopeobject 1
      findpropstrict QName(PackageNamespace("flash.utils"),"getQualifiedClassName")
      getscopeobject 1
      getslot 1
      callproperty QName(PackageNamespace("flash.utils"),"getQualifiedClassName"), 1
      coerce_s
      setslot 2
      pushbyte 0
      setlocal3
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleManagerImpl"),"moduleList")
      coerce_a
      setlocal 4
      jump ofs0
      ofs1:
      label
      getscopeobject 1
      getlocal 4
      getlocal3
      nextvalue
      coerce QName(PackageNamespace(""),"Object")
      setslot 3
      getscopeobject 1
      getscopeobject 1
      getslot 3
      getlex QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      astypelate
      coerce QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      setslot 4
      getscopeobject 1
      getslot 4
      getproperty QName(PackageNamespace(""),"ready")
      iftrue ofs2
      jump ofs0
      ofs2:
      getscopeobject 1
      getscopeobject 1
      getslot 4
      getproperty QName(PackageNamespace(""),"applicationDomain")
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      setslot 5
      ofs3:
      getscopeobject 1
      findpropstrict QName(PackageNamespace(""),"Class")
      getscopeobject 1
      getslot 5
      getscopeobject 1
      getslot 2
      callproperty QName(PackageNamespace(""),"getDefinition"), 1
      callproperty QName(PackageNamespace(""),"Class"), 1
      coerce QName(PackageNamespace(""),"Class")
      setslot 6
      getscopeobject 1
      getslot 1
      getscopeobject 1
      getslot 6
      istypelate
      iffalse ofs4
      getscopeobject 1
      getslot 4
      getproperty QName(PackageNamespace(""),"factory")
      returnvalue
      ofs4:
      jump ofs0
      ofs5:
      getlocal0
      pushscope
      getlocal2
      pushscope
      newcatch 0
      dup
      setlocal 5
      dup
      pushscope
      swap
      setslot 1
      popscope
      kill 5
      ofs0:
      hasnext2 4, 3
      iftrue ofs1
      kill 4
      kill 3
      pushnull
      returnvalue
      end ; code
      try from ofs3 to ofs4 target ofs5 type QName(PackageNamespace(""),"Error") name QName(PackageNamespace(""),"error") end
      end ; body
      end ; method
   }
   
   public function getModule(param1:String) : IModuleInfo
   {
      trait method QName(PackageNamespace(""),"getModule")
      dispid 0
      method
      name null
      param QName(PackageNamespace(""),"String")
      returns QName(PackageNamespace("mx.modules"),"IModuleInfo")
      
      body
      maxstack 3
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleManagerImpl"),"moduleList")
      getlocal1
      getproperty MultinameL([PrivateNamespace(null,"#ModuleManager/1"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("Object"),PrivateNamespace(null,"#ModuleManagerImpl"),ProtectedNamespace("ModuleManager.as$143:ModuleManagerImpl"),StaticProtectedNs("ModuleManager.as$143:ModuleManagerImpl"),StaticProtectedNs("flash.events:EventDispatcher")])
      getlex QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      astypelate
      coerce QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      setlocal2
      getlocal2
      iftrue ofs0
      findpropstrict QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      getlocal1
      constructprop QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo"), 1
      coerce QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      setlocal2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleManagerImpl"),"moduleList")
      getlocal1
      getlocal2
      setproperty MultinameL([PrivateNamespace(null,"#ModuleManager/1"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("Object"),PrivateNamespace(null,"#ModuleManagerImpl"),ProtectedNamespace("ModuleManager.as$143:ModuleManagerImpl"),StaticProtectedNs("ModuleManager.as$143:ModuleManagerImpl"),StaticProtectedNs("flash.events:EventDispatcher")])
      ofs0:
      findpropstrict QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfoProxy")
      getlocal2
      constructprop QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfoProxy"), 1
      returnvalue
      end ; code
      end ; body
      end ; method
   }
}

import flash.display.Loader;
import flash.events.ErrorEvent;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.ProgressEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;
import flash.system.Security;
import flash.system.SecurityDomain;
import flash.utils.ByteArray;
import flash.utils.Dictionary;
import mx.core.IFlexModuleFactory;
import mx.events.ModuleEvent;
import mx.events.Request;

class ModuleInfo extends EventDispatcher
{
   
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 4
      maxscopedepth 5
      
      code
      getlocal0
      pushscope
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   private var factoryInfo:FactoryInfo;
   
   private var limbo:Dictionary;
   
   private var loader:Loader;
   
   private var numReferences:int = 0;
   
   private var parentModuleFactory:IFlexModuleFactory;
   
   private var _error:Boolean = false;
   
   private var _loaded:Boolean = false;
   
   private var _ready:Boolean = false;
   
   private var _setup:Boolean = false;
   
   private var _url:String;
   
   function ModuleInfo(param1:String)
   {
      method
      name null
      param QName(PackageNamespace(""),"String")
      returns null
      
      body
      maxstack 2
      localcount 2
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      constructsuper 0
      getlocal0
      getlocal1
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_url")
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function get applicationDomain() : ApplicationDomain
   {
      trait getter QName(PackageNamespace(""),"applicationDomain")
      dispid 0
      method
      name null
      returns QName(PackageNamespace("flash.system"),"ApplicationDomain")
      
      body
      maxstack 2
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      not
      dup
      iffalse ofs0
      pop
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      convert_b
      ofs0:
      iffalse ofs1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getproperty QName(PackageNamespace(""),"applicationDomain")
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      jump ofs2
      ofs1:
      pushnull
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      ofs2:
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get error() : Boolean
   {
      trait getter QName(PackageNamespace(""),"error")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      iftrue ofs0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_error")
      convert_b
      jump ofs1
      ofs0:
      pushfalse
      ofs1:
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get factory() : IFlexModuleFactory
   {
      trait getter QName(PackageNamespace(""),"factory")
      dispid 0
      method
      name null
      returns QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      
      body
      maxstack 2
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      not
      dup
      iffalse ofs0
      pop
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      convert_b
      ofs0:
      iffalse ofs1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getproperty QName(PackageNamespace(""),"factory")
      coerce QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      jump ofs2
      ofs1:
      pushnull
      coerce QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      ofs2:
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get loaded() : Boolean
   {
      trait getter QName(PackageNamespace(""),"loaded")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      iftrue ofs0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      convert_b
      jump ofs1
      ofs0:
      pushfalse
      ofs1:
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get ready() : Boolean
   {
      trait getter QName(PackageNamespace(""),"ready")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      iftrue ofs0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      convert_b
      jump ofs1
      ofs0:
      pushfalse
      ofs1:
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get setup() : Boolean
   {
      trait getter QName(PackageNamespace(""),"setup")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      iftrue ofs0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_setup")
      convert_b
      jump ofs1
      ofs0:
      pushfalse
      ofs1:
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get size() : int
   {
      trait getter QName(PackageNamespace(""),"size")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"int")
      
      body
      maxstack 2
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      not
      dup
      iffalse ofs0
      pop
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      convert_b
      ofs0:
      iffalse ofs1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getproperty QName(PackageNamespace(""),"bytesTotal")
      convert_i
      jump ofs2
      ofs1:
      pushbyte 0
      ofs2:
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get url() : String
   {
      trait getter QName(PackageNamespace(""),"url")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"String")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_url")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function load(param1:ApplicationDomain = null, param2:SecurityDomain = null, param3:ByteArray = null, param4:IFlexModuleFactory = null) : void
   {
      trait method QName(PackageNamespace(""),"load")
      dispid 0
      method
      name null
      flag HAS_OPTIONAL
      param QName(PackageNamespace("flash.system"),"ApplicationDomain")
      param QName(PackageNamespace("flash.system"),"SecurityDomain")
      param QName(PackageNamespace("flash.utils"),"ByteArray")
      param QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      optional Null()
      optional Null()
      optional Null()
      optional Null()
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 7
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      iffalse ofs0
      returnvoid
      ofs0:
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      getlocal0
      getlocal 4
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"parentModuleFactory")
      getlocal3
      iffalse ofs1
      getlocal0
      getlocal1
      getlocal3
      callpropvoid QName(PrivateNamespace(null,"#ModuleInfo"),"loadBytes"), 2
      returnvoid
      ofs1:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_url")
      pushstring "published://"
      callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"indexOf"), 1
      pushbyte 0
      ifne ofs2
      returnvoid
      ofs2:
      findpropstrict QName(PackageNamespace("flash.net"),"URLRequest")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_url")
      constructprop QName(PackageNamespace("flash.net"),"URLRequest"), 1
      coerce QName(PackageNamespace("flash.net"),"URLRequest")
      setlocal 5
      findpropstrict QName(PackageNamespace("flash.system"),"LoaderContext")
      constructprop QName(PackageNamespace("flash.system"),"LoaderContext"), 0
      coerce QName(PackageNamespace("flash.system"),"LoaderContext")
      dup
      setlocal 6
      getlocal1
      iffalse ofs3
      getlocal1
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      jump ofs4
      ofs3:
      findpropstrict QName(PackageNamespace("flash.system"),"ApplicationDomain")
      getlex QName(PackageNamespace("flash.system"),"ApplicationDomain")
      getproperty QName(PackageNamespace(""),"currentDomain")
      constructprop QName(PackageNamespace("flash.system"),"ApplicationDomain"), 1
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      ofs4:
      setproperty QName(PackageNamespace(""),"applicationDomain")
      getlocal 6
      getlocal2
      setproperty QName(PackageNamespace(""),"securityDomain")
      getlocal2
      pushnull
      equals
      dup
      iffalse ofs5
      pop
      getlex QName(PackageNamespace("flash.system"),"Security")
      getproperty QName(PackageNamespace(""),"sandboxType")
      getlex QName(PackageNamespace("flash.system"),"Security")
      getproperty QName(PackageNamespace(""),"REMOTE")
      equals
      ofs5:
      iffalse ofs6
      getlocal 6
      getlex QName(PackageNamespace("flash.system"),"SecurityDomain")
      getproperty QName(PackageNamespace(""),"currentDomain")
      setproperty QName(PackageNamespace(""),"securityDomain")
      ofs6:
      getlocal0
      findpropstrict QName(PackageNamespace("flash.display"),"Loader")
      constructprop QName(PackageNamespace("flash.display"),"Loader"), 0
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"Event")
      getproperty QName(PackageNamespace(""),"INIT")
      getlocal0
      getproperty QName(PackageNamespace(""),"initHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"Event")
      getproperty QName(PackageNamespace(""),"COMPLETE")
      getlocal0
      getproperty QName(PackageNamespace(""),"completeHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"ProgressEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      getlocal0
      getproperty QName(PackageNamespace(""),"progressHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"IOErrorEvent")
      getproperty QName(PackageNamespace(""),"IO_ERROR")
      getlocal0
      getproperty QName(PackageNamespace(""),"errorHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"SecurityErrorEvent")
      getproperty QName(PackageNamespace(""),"SECURITY_ERROR")
      getlocal0
      getproperty QName(PackageNamespace(""),"errorHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getlocal 5
      getlocal 6
      callpropvoid QName(PackageNamespace(""),"load"), 2
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   private function loadBytes(param1:ApplicationDomain, param2:ByteArray) : void
   {
      trait method QName(PrivateNamespace(null,"#ModuleInfo"),"loadBytes")
      dispid 0
      method
      name null
      param QName(PackageNamespace("flash.system"),"ApplicationDomain")
      param QName(PackageNamespace("flash.utils"),"ByteArray")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 4
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      findpropstrict QName(PackageNamespace("flash.system"),"LoaderContext")
      constructprop QName(PackageNamespace("flash.system"),"LoaderContext"), 0
      coerce QName(PackageNamespace("flash.system"),"LoaderContext")
      setlocal3
      getlocal3
      getlocal1
      iffalse ofs0
      getlocal1
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      jump ofs1
      ofs0:
      findpropstrict QName(PackageNamespace("flash.system"),"ApplicationDomain")
      getlex QName(PackageNamespace("flash.system"),"ApplicationDomain")
      getproperty QName(PackageNamespace(""),"currentDomain")
      constructprop QName(PackageNamespace("flash.system"),"ApplicationDomain"), 1
      coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
      ofs1:
      setproperty QName(PackageNamespace(""),"applicationDomain")
      pushstring "allowLoadBytesCodeExecution"
      getlocal3
      in
      iffalse ofs2
      getlocal3
      pushstring "allowLoadBytesCodeExecution"
      pushtrue
      setproperty MultinameL([PrivateNamespace(null,"#ModuleManager/1"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("Object"),StaticProtectedNs("flash.events:EventDispatcher"),PrivateNamespace(null,"#ModuleInfo"),ProtectedNamespace("ModuleManager.as$143:ModuleInfo"),StaticProtectedNs("ModuleManager.as$143:ModuleInfo")])
      ofs2:
      getlocal0
      findpropstrict QName(PackageNamespace("flash.display"),"Loader")
      constructprop QName(PackageNamespace("flash.display"),"Loader"), 0
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"Event")
      getproperty QName(PackageNamespace(""),"INIT")
      getlocal0
      getproperty QName(PackageNamespace(""),"initHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"Event")
      getproperty QName(PackageNamespace(""),"COMPLETE")
      getlocal0
      getproperty QName(PackageNamespace(""),"completeHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"IOErrorEvent")
      getproperty QName(PackageNamespace(""),"IO_ERROR")
      getlocal0
      getproperty QName(PackageNamespace(""),"errorHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"SecurityErrorEvent")
      getproperty QName(PackageNamespace(""),"SECURITY_ERROR")
      getlocal0
      getproperty QName(PackageNamespace(""),"errorHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getlocal2
      getlocal3
      callpropvoid QName(PackageNamespace(""),"loadBytes"), 2
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function resurrect() : void
   {
      trait method QName(PackageNamespace(""),"resurrect")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 4
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      pushnull
      coerce QName(PackageNamespace(""),"Object")
      setlocal1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      iftrue ofs0
      returnvoid
      ofs0:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      not
      dup
      iffalse ofs1
      pop
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      convert_b
      ofs1:
      iffalse ofs2
      pushbyte 0
      setlocal2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      coerce_a
      setlocal3
      jump ofs3
      ofs4:
      label
      getlocal3
      getlocal2
      nextname
      coerce QName(PackageNamespace(""),"Object")
      setlocal1
      getlocal0
      getlocal1
      getlex QName(PrivateNamespace(null,"#ModuleManager/1"),"FactoryInfo")
      astypelate
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      jump ofs5
      ofs3:
      hasnext2 3, 2
      iftrue ofs4
      ofs5:
      kill 3
      kill 2
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      ofs2:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      iftrue ofs6
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      iffalse ofs7
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"UNLOAD")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      ofs7:
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_setup")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_error")
      ofs6:
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function release() : void
   {
      trait method QName(PackageNamespace(""),"release")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      convert_b
      dup
      iffalse ofs0
      pop
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      not
      ofs0:
      iffalse ofs1
      getlocal0
      findpropstrict QName(PackageNamespace("flash.utils"),"Dictionary")
      pushtrue
      constructprop QName(PackageNamespace("flash.utils"),"Dictionary"), 1
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      pushbyte 1
      setproperty MultinameL([PrivateNamespace(null,"#ModuleManager/1"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("Object"),StaticProtectedNs("flash.events:EventDispatcher"),PrivateNamespace(null,"#ModuleInfo"),ProtectedNamespace("ModuleManager.as$143:ModuleInfo"),StaticProtectedNs("ModuleManager.as$143:ModuleInfo")])
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      jump ofs2
      ofs1:
      getlocal0
      callpropvoid QName(PackageNamespace(""),"unload"), 0
      ofs2:
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   private function clearLoader() : void
   {
      trait method QName(PrivateNamespace(null,"#ModuleInfo"),"clearLoader")
      dispid 0
      method
      name null
      flag NEED_ACTIVATION
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 3
      initscopedepth 6
      maxscopedepth 13
      
      code
      getlocal0
      pushscope
      newactivation
      dup
      setlocal1
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      iffalse ofs0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      iffalse ofs1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"Event")
      getproperty QName(PackageNamespace(""),"INIT")
      getlocal0
      getproperty QName(PackageNamespace(""),"initHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"Event")
      getproperty QName(PackageNamespace(""),"COMPLETE")
      getlocal0
      getproperty QName(PackageNamespace(""),"completeHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"ProgressEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      getlocal0
      getproperty QName(PackageNamespace(""),"progressHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"IOErrorEvent")
      getproperty QName(PackageNamespace(""),"IO_ERROR")
      getlocal0
      getproperty QName(PackageNamespace(""),"errorHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getlex QName(PackageNamespace("flash.events"),"SecurityErrorEvent")
      getproperty QName(PackageNamespace(""),"SECURITY_ERROR")
      getlocal0
      getproperty QName(PackageNamespace(""),"errorHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      ofs1:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      iffalse ofs2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      pushstring "ready"
      getlocal0
      getproperty QName(PackageNamespace(""),"readyHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      pushstring "error"
      getlocal0
      getproperty QName(PackageNamespace(""),"moduleErrorHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      getlex QName(PackageNamespace("mx.events"),"Request")
      getproperty QName(PackageNamespace(""),"GET_PARENT_FLEX_MODULE_FACTORY_REQUEST")
      getlocal0
      getproperty QName(PackageNamespace(""),"getFlexModuleFactoryRequestHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      ofs2:
      jump ofs3
      ofs4:
      getlocal0
      pushscope
      getlocal1
      pushscope
      newcatch 0
      dup
      setlocal2
      dup
      pushscope
      swap
      setslot 1
      popscope
      kill 2
      ofs3:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      iffalse ofs5
      ofs6:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      callpropvoid QName(PackageNamespace(""),"close"), 0
      ofs7:
      jump ofs5
      ofs8:
      getlocal0
      pushscope
      getlocal1
      pushscope
      newcatch 1
      dup
      setlocal2
      dup
      pushscope
      swap
      setslot 1
      popscope
      kill 2
      ofs5:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      callpropvoid QName(PackageNamespace(""),"unload"), 0
      ofs9:
      jump ofs10
      ofs11:
      getlocal0
      pushscope
      getlocal1
      pushscope
      newcatch 2
      dup
      setlocal2
      dup
      pushscope
      swap
      setslot 1
      popscope
      kill 2
      ofs10:
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      ofs0:
      returnvoid
      end ; code
      try from ofs1 to ofs2 target ofs4 type QName(PackageNamespace(""),"Error") name QName(PackageNamespace(""),"error") end
      try from ofs6 to ofs7 target ofs8 type QName(PackageNamespace(""),"Error") name QName(PackageNamespace(""),"error") end
      try from ofs5 to ofs9 target ofs11 type QName(PackageNamespace(""),"Error") name QName(PackageNamespace(""),"error") end
      end ; body
      end ; method
   }
   
   public function unload() : void
   {
      trait method QName(PackageNamespace(""),"unload")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      callpropvoid QName(PrivateNamespace(null,"#ModuleInfo"),"clearLoader"), 0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      iffalse ofs0
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"UNLOAD")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      ofs0:
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"limbo")
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getlocal0
      pushnull
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"parentModuleFactory")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_setup")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_error")
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function publish(param1:IFlexModuleFactory) : void
   {
      trait method QName(PackageNamespace(""),"publish")
      dispid 0
      method
      name null
      param QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 2
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      iffalse ofs0
      returnvoid
      ofs0:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_url")
      pushstring "published://"
      callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"indexOf"), 1
      pushbyte 0
      ifeq ofs1
      returnvoid
      ofs1:
      getlocal0
      findpropstrict QName(PrivateNamespace(null,"#ModuleManager/1"),"FactoryInfo")
      constructprop QName(PrivateNamespace(null,"#ModuleManager/1"),"FactoryInfo"), 0
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getlocal1
      setproperty QName(PackageNamespace(""),"factory")
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_loaded")
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_setup")
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_error")
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"SETUP")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"READY")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function addReference() : void
   {
      trait method QName(PackageNamespace(""),"addReference")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      dup
      setlocal1
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"numReferences")
      increment_i
      setlocal2
      getlocal1
      getlocal2
      setproperty QName(PrivateNamespace(null,"#ModuleInfo"),"numReferences")
      kill 2
      kill 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function removeReference() : void
   {
      trait method QName(PackageNamespace(""),"removeReference")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      dup
      setlocal1
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"numReferences")
      decrement_i
      setlocal2
      getlocal1
      getlocal2
      setproperty QName(PrivateNamespace(null,"#ModuleInfo"),"numReferences")
      kill 2
      kill 1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"numReferences")
      pushbyte 0
      ifne ofs0
      getlocal0
      callpropvoid QName(PackageNamespace(""),"release"), 0
      ofs0:
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function initHandler(param1:Event) : void
   {
      trait method QName(PackageNamespace(""),"initHandler")
      dispid 0
      method
      name null
      flag NEED_ACTIVATION
      param QName(PackageNamespace("flash.events"),"Event")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 5
      localcount 4
      initscopedepth 6
      maxscopedepth 13
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"event")
      slotid 1
      type QName(PackageNamespace("flash.events"),"Event")
      end ; trait
      trait slot QName(PrivateNamespace(null,"#ModuleManager/1"),"moduleEvent")
      slotid 2
      type QName(PackageNamespace("mx.events"),"ModuleEvent")
      end ; trait
      
      code
      getlocal0
      pushscope
      newactivation
      dup
      setlocal2
      pushscope
      getscopeobject 1
      pushnull
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setslot 2
      getscopeobject 1
      getlocal1
      setslot 1
      getlocal0
      findpropstrict QName(PrivateNamespace(null,"#ModuleManager/1"),"FactoryInfo")
      constructprop QName(PrivateNamespace(null,"#ModuleManager/1"),"FactoryInfo"), 0
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      ofs0:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      getlex QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      astypelate
      setproperty QName(PackageNamespace(""),"factory")
      ofs1:
      jump ofs2
      ofs3:
      getlocal0
      pushscope
      getlocal2
      pushscope
      newcatch 0
      dup
      setlocal3
      dup
      pushscope
      swap
      setslot 1
      popscope
      kill 3
      ofs2:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getproperty QName(PackageNamespace(""),"factory")
      iftrue ofs4
      getscopeobject 1
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"ERROR")
      getscopeobject 1
      getslot 1
      getproperty QName(PackageNamespace(""),"bubbles")
      getscopeobject 1
      getslot 1
      getproperty QName(PackageNamespace(""),"cancelable")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 3
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setslot 2
      getscopeobject 1
      getslot 2
      pushbyte 0
      setproperty QName(PackageNamespace(""),"bytesLoaded")
      getscopeobject 1
      getslot 2
      pushbyte 0
      setproperty QName(PackageNamespace(""),"bytesTotal")
      getscopeobject 1
      getslot 2
      pushstring "SWF is not a loadable module"
      setproperty QName(PackageNamespace(""),"errorText")
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getscopeobject 1
      getslot 2
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      ofs4:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      pushstring "ready"
      getlocal0
      getproperty QName(PackageNamespace(""),"readyHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      pushstring "error"
      getlocal0
      getproperty QName(PackageNamespace(""),"moduleErrorHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"content")
      getlex QName(PackageNamespace("mx.events"),"Request")
      getproperty QName(PackageNamespace(""),"GET_PARENT_FLEX_MODULE_FACTORY_REQUEST")
      getlocal0
      getproperty QName(PackageNamespace(""),"getFlexModuleFactoryRequestHandler")
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
      ofs5:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getproperty QName(PackageNamespace(""),"applicationDomain")
      setproperty QName(PackageNamespace(""),"applicationDomain")
      ofs6:
      jump ofs7
      ofs8:
      getlocal0
      pushscope
      getlocal2
      pushscope
      newcatch 1
      dup
      setlocal3
      dup
      pushscope
      swap
      setslot 1
      popscope
      kill 3
      ofs7:
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_setup")
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"SETUP")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      try from ofs0 to ofs1 target ofs3 type QName(PackageNamespace(""),"Error") name QName(PackageNamespace(""),"error") end
      try from ofs5 to ofs6 target ofs8 type QName(PackageNamespace(""),"Error") name QName(PackageNamespace(""),"error") end
      end ; body
      end ; method
   }
   
   public function progressHandler(param1:ProgressEvent) : void
   {
      trait method QName(PackageNamespace(""),"progressHandler")
      dispid 0
      method
      name null
      param QName(PackageNamespace("flash.events"),"ProgressEvent")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 4
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      getlocal1
      getproperty QName(PackageNamespace(""),"bubbles")
      getlocal1
      getproperty QName(PackageNamespace(""),"cancelable")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 3
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal2
      getlocal2
      getlocal1
      getproperty QName(PackageNamespace(""),"bytesLoaded")
      setproperty QName(PackageNamespace(""),"bytesLoaded")
      getlocal2
      getlocal1
      getproperty QName(PackageNamespace(""),"bytesTotal")
      setproperty QName(PackageNamespace(""),"bytesTotal")
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getlocal2
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function completeHandler(param1:Event) : void
   {
      trait method QName(PackageNamespace(""),"completeHandler")
      dispid 0
      method
      name null
      param QName(PackageNamespace("flash.events"),"Event")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 4
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      getlocal1
      getproperty QName(PackageNamespace(""),"bubbles")
      getlocal1
      getproperty QName(PackageNamespace(""),"cancelable")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 3
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal2
      getlocal2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getproperty QName(PackageNamespace(""),"bytesLoaded")
      setproperty QName(PackageNamespace(""),"bytesLoaded")
      getlocal2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getproperty QName(PackageNamespace(""),"bytesTotal")
      setproperty QName(PackageNamespace(""),"bytesTotal")
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getlocal2
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function errorHandler(param1:ErrorEvent) : void
   {
      trait method QName(PackageNamespace(""),"errorHandler")
      dispid 0
      method
      name null
      param QName(PackageNamespace("flash.events"),"ErrorEvent")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 4
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_error")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"ERROR")
      getlocal1
      getproperty QName(PackageNamespace(""),"bubbles")
      getlocal1
      getproperty QName(PackageNamespace(""),"cancelable")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 3
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal2
      getlocal2
      pushbyte 0
      setproperty QName(PackageNamespace(""),"bytesLoaded")
      getlocal2
      pushbyte 0
      setproperty QName(PackageNamespace(""),"bytesTotal")
      getlocal2
      getlocal1
      getproperty QName(PackageNamespace(""),"text")
      setproperty QName(PackageNamespace(""),"errorText")
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getlocal2
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function getFlexModuleFactoryRequestHandler(param1:Request) : void
   {
      trait method QName(PackageNamespace(""),"getFlexModuleFactoryRequestHandler")
      dispid 0
      method
      name null
      param QName(PackageNamespace("mx.events"),"Request")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 2
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"parentModuleFactory")
      setproperty QName(PackageNamespace(""),"value")
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function readyHandler(param1:Event) : void
   {
      trait method QName(PackageNamespace(""),"readyHandler")
      dispid 0
      method
      name null
      param QName(PackageNamespace("flash.events"),"Event")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getproperty QName(PackageNamespace(""),"bytesTotal")
      setproperty QName(PackageNamespace(""),"bytesTotal")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"READY")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal2
      getlocal2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getproperty QName(PackageNamespace(""),"bytesLoaded")
      setproperty QName(PackageNamespace(""),"bytesLoaded")
      getlocal2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getproperty QName(PackageNamespace(""),"bytesTotal")
      setproperty QName(PackageNamespace(""),"bytesTotal")
      getlocal0
      callpropvoid QName(PrivateNamespace(null,"#ModuleInfo"),"clearLoader"), 0
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getlocal2
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function moduleErrorHandler(param1:Event) : void
   {
      trait method QName(PackageNamespace(""),"moduleErrorHandler")
      dispid 0
      method
      name null
      param QName(PackageNamespace("flash.events"),"Event")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 3
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      pushnull
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal2
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfo"),"_ready")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"factoryInfo")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfo"),"loader")
      getproperty QName(PackageNamespace(""),"contentLoaderInfo")
      getproperty QName(PackageNamespace(""),"bytesTotal")
      setproperty QName(PackageNamespace(""),"bytesTotal")
      getlocal0
      callpropvoid QName(PrivateNamespace(null,"#ModuleInfo"),"clearLoader"), 0
      getlocal1
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      istypelate
      iffalse ofs0
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlocal1
      callproperty QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal2
      jump ofs1
      ofs0:
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"ERROR")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal2
      ofs1:
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getlocal2
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
}

import flash.system.ApplicationDomain;
import mx.core.IFlexModuleFactory;

class FactoryInfo
{
   
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 3
      maxscopedepth 4
      
      code
      getlocal0
      pushscope
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public var factory:IFlexModuleFactory;
   
   public var applicationDomain:ApplicationDomain;
   
   public var bytesTotal:int = 0;
   
   function FactoryInfo()
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 4
      maxscopedepth 5
      
      code
      getlocal0
      pushscope
      getlocal0
      constructsuper 0
      returnvoid
      end ; code
      end ; body
      end ; method
   }
}

import flash.events.EventDispatcher;
import flash.system.ApplicationDomain;
import flash.system.SecurityDomain;
import flash.utils.ByteArray;
import mx.core.IFlexModuleFactory;
import mx.events.ModuleEvent;
import mx.modules.IModuleInfo;

class ModuleInfoProxy extends EventDispatcher implements IModuleInfo
{
   
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 4
      maxscopedepth 5
      
      code
      getlocal0
      pushscope
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   private var info:ModuleInfo;
   
   private var referenced:Boolean = false;
   
   private var _data:Object;
   
   function ModuleInfoProxy(param1:ModuleInfo)
   {
      method
      name null
      param QName(PrivateNamespace(null,"#ModuleManager/1"),"ModuleInfo")
      returns null
      
      body
      maxstack 6
      localcount 2
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      constructsuper 0
      getlocal0
      getlocal1
      initproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlocal1
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"SETUP")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      pushfalse
      pushbyte 0
      pushtrue
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 5
      getlocal1
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      pushfalse
      pushbyte 0
      pushtrue
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 5
      getlocal1
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"READY")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      pushfalse
      pushbyte 0
      pushtrue
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 5
      getlocal1
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"ERROR")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      pushfalse
      pushbyte 0
      pushtrue
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 5
      getlocal1
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"UNLOAD")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      pushfalse
      pushbyte 0
      pushtrue
      callpropvoid QName(PackageNamespace(""),"addEventListener"), 5
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function get data() : Object
   {
      trait getter QName(PackageNamespace(""),"data")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Object")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"_data")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function set data(param1:Object) : void
   {
      trait setter QName(PackageNamespace(""),"data")
      dispid 0
      method
      name null
      param QName(PackageNamespace(""),"Object")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 2
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getlocal1
      initproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"_data")
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function get error() : Boolean
   {
      trait getter QName(PackageNamespace(""),"error")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"error")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get factory() : IFlexModuleFactory
   {
      trait getter QName(PackageNamespace(""),"factory")
      dispid 0
      method
      name null
      returns QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"factory")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get loaded() : Boolean
   {
      trait getter QName(PackageNamespace(""),"loaded")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"loaded")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get ready() : Boolean
   {
      trait getter QName(PackageNamespace(""),"ready")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"ready")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get setup() : Boolean
   {
      trait getter QName(PackageNamespace(""),"setup")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"Boolean")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"setup")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function get url() : String
   {
      trait getter QName(PackageNamespace(""),"url")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"String")
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"url")
      returnvalue
      end ; code
      end ; body
      end ; method
   }
   
   public function publish(param1:IFlexModuleFactory) : void
   {
      trait method QName(PackageNamespace(""),"publish")
      dispid 0
      method
      name null
      param QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 2
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlocal1
      callpropvoid QName(PackageNamespace(""),"publish"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function load(param1:ApplicationDomain = null, param2:SecurityDomain = null, param3:ByteArray = null, param4:IFlexModuleFactory = null) : void
   {
      trait method QName(PackageNamespace(""),"load")
      dispid 0
      method
      name null
      flag HAS_OPTIONAL
      param QName(PackageNamespace("flash.system"),"ApplicationDomain")
      param QName(PackageNamespace("flash.system"),"SecurityDomain")
      param QName(PackageNamespace("flash.utils"),"ByteArray")
      param QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
      optional Null()
      optional Null()
      optional Null()
      optional Null()
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 5
      localcount 6
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      pushnull
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      setlocal 5
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      callpropvoid QName(PackageNamespace(""),"resurrect"), 0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"referenced")
      iftrue ofs0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      callpropvoid QName(PackageNamespace(""),"addReference"), 0
      getlocal0
      pushtrue
      initproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"referenced")
      ofs0:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"error")
      iffalse ofs1
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"ERROR")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      jump ofs2
      ofs1:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"loaded")
      iffalse ofs3
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"setup")
      iffalse ofs4
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"SETUP")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"ready")
      iffalse ofs4
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      coerce QName(PackageNamespace("mx.events"),"ModuleEvent")
      dup
      setlocal 5
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"size")
      setproperty QName(PackageNamespace(""),"bytesLoaded")
      getlocal 5
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getproperty QName(PackageNamespace(""),"size")
      setproperty QName(PackageNamespace(""),"bytesTotal")
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getlocal 5
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      findpropstrict QName(PackageNamespace("mx.events"),"ModuleEvent")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"READY")
      constructprop QName(PackageNamespace("mx.events"),"ModuleEvent"), 1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      ofs4:
      jump ofs2
      ofs3:
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlocal1
      getlocal2
      getlocal3
      getlocal 4
      callpropvoid QName(PackageNamespace(""),"load"), 4
      ofs2:
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function release() : void
   {
      trait method QName(PackageNamespace(""),"release")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"referenced")
      iffalse ofs0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      callpropvoid QName(PackageNamespace(""),"removeReference"), 0
      getlocal0
      pushfalse
      initproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"referenced")
      ofs0:
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public function unload() : void
   {
      trait method QName(PackageNamespace(""),"unload")
      dispid 0
      method
      name null
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 3
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      callpropvoid QName(PackageNamespace(""),"unload"), 0
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"SETUP")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"PROGRESS")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"READY")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"ERROR")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"info")
      getlex QName(PackageNamespace("mx.events"),"ModuleEvent")
      getproperty QName(PackageNamespace(""),"UNLOAD")
      getlocal0
      getproperty QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   private function moduleEventHandler(param1:ModuleEvent) : void
   {
      trait method QName(PrivateNamespace(null,"#ModuleInfoProxy"),"moduleEventHandler")
      dispid 0
      method
      name null
      param QName(PackageNamespace("mx.events"),"ModuleEvent")
      returns QName(PackageNamespace(""),"void")
      
      body
      maxstack 2
      localcount 2
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal0
      pushscope
      findpropstrict QName(PackageNamespace(""),"dispatchEvent")
      getlocal1
      callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
      returnvoid
      end ; code
      end ; body
      end ; method
   }
}
