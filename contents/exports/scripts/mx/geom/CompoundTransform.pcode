
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("CompoundTransform",[PackageNamespace("mx.geom")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #CompoundTransform
   popscope
   initproperty QName(PackageNamespace("mx.geom"),"CompoundTransform")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.geom
{
   import flash.geom.Matrix;
   import flash.geom.Matrix3D;
   import flash.geom.Vector3D;
   import mx.core.AdvancedLayoutFeatures;
   import mx.utils.MatrixUtil;
   
   public class CompoundTransform
   {
      
      private static const MATRIX_VALID:uint = 32;
      
      private static const MATRIX3D_VALID:uint = 64;
      
      private static const PROPERTIES_VALID:uint = 128;
      
      private static const IS_3D:uint = 512;
      
      private static const M3D_FLAGS_VALID:uint = 1024;
      
      public static const SOURCE_PROPERTIES:uint = 1;
      
      public static const SOURCE_MATRIX:uint = 2;
      
      public static const SOURCE_MATRIX3D:uint = 3;
      
      private static const INVALIDATE_FROM_NONE:uint = 0;
      
      private static const INVALIDATE_FROM_PROPERTY:uint = 4;
      
      private static const INVALIDATE_FROM_MATRIX:uint = 5;
      
      private static const INVALIDATE_FROM_MATRIX3D:uint = 6;
      
      private static var decomposition:Vector.<Number>;
      
      private static const RADIANS_PER_DEGREES:Number = 0.017453292519943295;
      
      private static const EPSILON:Number = 0.001;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 3
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         pushbyte 32
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         pushbyte 64
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         pushshort 128
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"IS_3D")
         pushshort 512
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"IS_3D")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"M3D_FLAGS_VALID")
         pushshort 1024
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"M3D_FLAGS_VALID")
         findproperty QName(PackageNamespace(""),"SOURCE_PROPERTIES")
         pushbyte 1
         initproperty QName(PackageNamespace(""),"SOURCE_PROPERTIES")
         findproperty QName(PackageNamespace(""),"SOURCE_MATRIX")
         pushbyte 2
         initproperty QName(PackageNamespace(""),"SOURCE_MATRIX")
         findproperty QName(PackageNamespace(""),"SOURCE_MATRIX3D")
         pushbyte 3
         initproperty QName(PackageNamespace(""),"SOURCE_MATRIX3D")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_NONE")
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_NONE")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushbyte 4
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX")
         pushbyte 5
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX3D")
         pushbyte 6
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX3D")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         getlex Multiname("Vector",[PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object"),PackageNamespace("__AS3__.vec")])
         getlex QName(PackageNamespace(""),"Number")
         applytype 1
         construct 0
         setproperty QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"RADIANS_PER_DEGREES")
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         pushshort 180
         divide
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"RADIANS_PER_DEGREES")
         findproperty QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         pushdouble 0.001
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 0
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 0
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 0
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 0
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 0
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _rotationX:Number = 0;
      
      private var _rotationY:Number = 0;
      
      private var _rotationZ:Number = 0;
      
      private var _scaleX:Number = 1;
      
      private var _scaleY:Number = 1;
      
      private var _scaleZ:Number = 1;
      
      private var _x:Number = 0;
      
      private var _y:Number = 0;
      
      private var _z:Number = 0;
      
      private var _transformX:Number = 0;
      
      private var _transformY:Number = 0;
      
      private var _transformZ:Number = 0;
      
      private var _matrix:Matrix;
      
      private var _matrix3D:Matrix3D;
      
      public var sourceOfTruth:uint = 1;
      
      private var _flags:uint = 128;
      
      public function CompoundTransform()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function set x(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"x")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         subtract
         pushbyte 0
         dup
         callpropvoid QName(PackageNamespace(""),"translateBy"), 3
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_NONE")
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get x() : Number
      {
         trait getter QName(PackageNamespace(""),"x")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set y(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"y")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         pushbyte 0
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         subtract
         pushbyte 0
         callpropvoid QName(PackageNamespace(""),"translateBy"), 3
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_NONE")
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get y() : Number
      {
         trait getter QName(PackageNamespace(""),"y")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set z(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"z")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         pushbyte 0
         dup
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         subtract
         callpropvoid QName(PackageNamespace(""),"translateBy"), 3
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_NONE")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get z() : Number
      {
         trait getter QName(PackageNamespace(""),"z")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         callproperty QName(PackageNamespace(""),"clampRotation"), 1
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationX")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationX")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationX() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         callproperty QName(PackageNamespace(""),"clampRotation"), 1
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationY")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationY")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationY() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         callproperty QName(PackageNamespace(""),"clampRotation"), 1
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationZ")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationZ")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationZ() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationZ")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleX")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleX")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleX() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleY")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleY")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleY() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleZ")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleZ")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleZ() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleZ")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get is3D() : Boolean
      {
         trait getter QName(PackageNamespace(""),"is3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"M3D_FLAGS_VALID")
         bitand
         pushbyte 0
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"update3DFlags"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"IS_3D")
         bitand
         pushbyte 0
         equals
         not
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformX() : Number
      {
         trait getter QName(PackageNamespace(""),"transformX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformY() : Number
      {
         trait getter QName(PackageNamespace(""),"transformY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformZ")
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformZ")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformZ() : Number
      {
         trait getter QName(PackageNamespace(""),"transformZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformZ")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function invalidate(param1:uint, param2:Boolean) : void
      {
         trait method QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         jump ofs0
         ofs1:
         label
         getlocal0
         getlex QName(PackageNamespace(""),"SOURCE_PROPERTIES")
         initproperty QName(PackageNamespace(""),"sourceOfTruth")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         jump ofs2
         ofs3:
         label
         getlocal0
         getlex QName(PackageNamespace(""),"SOURCE_MATRIX")
         initproperty QName(PackageNamespace(""),"sourceOfTruth")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         jump ofs2
         ofs4:
         label
         getlocal0
         getlex QName(PackageNamespace(""),"SOURCE_MATRIX3D")
         initproperty QName(PackageNamespace(""),"sourceOfTruth")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         jump ofs2
         ofs5:
         label
         jump ofs2
         ofs0:
         getlocal1
         setlocal3
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_PROPERTY")
         getlocal3
         ifstrictne ofs6
         pushbyte 0
         jump ofs7
         ofs6:
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX")
         getlocal3
         ifstrictne ofs8
         pushbyte 1
         jump ofs7
         ofs8:
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX3D")
         getlocal3
         ifstrictne ofs9
         pushbyte 2
         jump ofs7
         ofs9:
         jump ofs10
         pushbyte 3
         jump ofs10
         ofs10:
         pushbyte 3
         ofs7:
         kill 3
         lookupswitch ofs5, [ofs1, ofs3, ofs4, ofs5]
         ofs2:
         getlocal2
         iffalse ofs11
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"M3D_FLAGS_VALID")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         ofs11:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function update3DFlags() : void
      {
         trait method QName(PrivateNamespace(null,"#CompoundTransform"),"update3DFlags")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal1
         pushnull
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace(""),"Number")>)
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"M3D_FLAGS_VALID")
         bitand
         pushbyte 0
         ifne ofs0
         pushfalse
         setlocal1
         jump ofs1
         ofs2:
         label
         getlex QName(PackageNamespace(""),"Math")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleZ")
         decrement
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         greaterthan
         dup
         iftrue ofs3
         pop
         getlex QName(PackageNamespace(""),"Math")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationX")
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         add
         pushshort 360
         modulo
         pushbyte 2
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         multiply
         greaterthan
         ofs3:
         dup
         iftrue ofs4
         pop
         getlex QName(PackageNamespace(""),"Math")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationY")
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         add
         pushshort 360
         modulo
         pushbyte 2
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         multiply
         greaterthan
         ofs4:
         dup
         iftrue ofs5
         pop
         getlex QName(PackageNamespace(""),"Math")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"EPSILON")
         greaterthan
         ofs5:
         convert_b
         setlocal1
         jump ofs6
         ofs7:
         label
         pushfalse
         setlocal1
         jump ofs6
         ofs8:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         getproperty QName(PackageNamespace(""),"rawData")
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace(""),"Number")>)
         setlocal2
         getlocal2
         pushbyte 2
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         pushbyte 0
         equals
         not
         dup
         iftrue ofs9
         pop
         getlocal2
         pushbyte 6
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         pushbyte 0
         equals
         not
         ofs9:
         dup
         iftrue ofs10
         pop
         getlocal2
         pushbyte 8
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         pushbyte 0
         equals
         not
         ofs10:
         dup
         iftrue ofs11
         pop
         getlocal2
         pushbyte 10
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         pushbyte 1
         equals
         not
         ofs11:
         dup
         iftrue ofs12
         pop
         getlocal2
         pushbyte 14
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         pushbyte 0
         equals
         not
         ofs12:
         convert_b
         setlocal1
         jump ofs6
         ofs13:
         label
         jump ofs6
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"sourceOfTruth")
         setlocal3
         getlex QName(PackageNamespace(""),"SOURCE_PROPERTIES")
         getlocal3
         ifstrictne ofs14
         pushbyte 0
         jump ofs15
         ofs14:
         getlex QName(PackageNamespace(""),"SOURCE_MATRIX")
         getlocal3
         ifstrictne ofs16
         pushbyte 1
         jump ofs15
         ofs16:
         getlex QName(PackageNamespace(""),"SOURCE_MATRIX3D")
         getlocal3
         ifstrictne ofs17
         pushbyte 2
         jump ofs15
         ofs17:
         jump ofs18
         pushbyte 3
         jump ofs18
         ofs18:
         pushbyte 3
         ofs15:
         kill 3
         lookupswitch ofs13, [ofs2, ofs7, ofs8, ofs13]
         ofs6:
         getlocal1
         iffalse ofs19
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"IS_3D")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         jump ofs20
         ofs19:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"IS_3D")
         bitnot
         bitand
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         ofs20:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"M3D_FLAGS_VALID")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function translateBy(param1:Number, param2:Number, param3:Number = 0) : void
      {
         trait method QName(PackageNamespace(""),"translateBy")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         optional Integer(0)
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace(""),"Number")>)
         setlocal 4
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         bitand
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         getproperty QName(PackageNamespace(""),"tx")
         getlocal1
         add
         setproperty QName(PackageNamespace(""),"tx")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         getproperty QName(PackageNamespace(""),"ty")
         getlocal2
         add
         setproperty QName(PackageNamespace(""),"ty")
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         iffalse ofs1
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         getlocal1
         add
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         getlocal2
         add
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         getlocal3
         add
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         bitand
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         getproperty QName(PackageNamespace(""),"rawData")
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace(""),"Number")>)
         dup
         setlocal 4
         pushbyte 12
         getlocal 4
         pushbyte 12
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getlocal1
         add
         setproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getlocal 4
         pushbyte 13
         getlocal 4
         pushbyte 13
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getlocal2
         add
         setproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getlocal 4
         pushbyte 14
         getlocal 4
         pushbyte 14
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getlocal3
         add
         setproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         getlocal 4
         setproperty QName(PackageNamespace(""),"rawData")
         ofs2:
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_NONE")
         getlocal3
         pushbyte 0
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get matrix() : Matrix
      {
         trait getter QName(PackageNamespace(""),"matrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Matrix")
         
         body
         maxstack 9
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         bitand
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal1
         pushnull
         ifne ofs2
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix"), 0
         dup
         setlocal2
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         getlocal2
         kill 2
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         jump ofs3
         ofs2:
         getlocal1
         callpropvoid QName(PackageNamespace(""),"identity"), 0
         ofs3:
         getlex QName(PackageNamespace("mx.core"),"AdvancedLayoutFeatures")
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationZ")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         callpropvoid QName(PackageNamespace(""),"build2DMatrix"), 8
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX_VALID")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set matrix(param1:Matrix) : void
      {
         trait setter QName(PackageNamespace(""),"matrix")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Matrix")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         pushnull
         ifne ofs0
         getlocal0
         getlocal1
         callproperty QName(PackageNamespace(""),"clone"), 0
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         callpropvoid QName(PackageNamespace(""),"identity"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         getlocal1
         callpropvoid QName(PackageNamespace(""),"concat"), 1
         ofs1:
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX")
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function validatePropertiesFromMatrix() : void
      {
         trait method QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace("flash.geom"),"Vector3D")>)
         setlocal1
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Vector3D")
         setlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"sourceOfTruth")
         getlex QName(PackageNamespace(""),"SOURCE_MATRIX3D")
         ifne ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         callproperty QName(PackageNamespace(""),"decompose"), 0
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace("flash.geom"),"Vector3D")>)
         setlocal1
         getlocal0
         getlocal1
         pushbyte 1
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"RADIANS_PER_DEGREES")
         divide
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationX")
         getlocal0
         getlocal1
         pushbyte 1
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"RADIANS_PER_DEGREES")
         divide
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationY")
         getlocal0
         getlocal1
         pushbyte 1
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"z")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"RADIANS_PER_DEGREES")
         divide
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationZ")
         getlocal0
         getlocal1
         pushbyte 2
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"x")
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleX")
         getlocal0
         getlocal1
         pushbyte 2
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"y")
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleY")
         getlocal0
         getlocal1
         pushbyte 2
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"z")
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleZ")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         pushbyte 0
         equals
         not
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         pushbyte 0
         equals
         not
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformZ")
         pushbyte 0
         equals
         not
         ofs2:
         iffalse ofs3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         findpropstrict QName(PackageNamespace("flash.geom"),"Vector3D")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformZ")
         constructprop QName(PackageNamespace("flash.geom"),"Vector3D"), 3
         callproperty QName(PackageNamespace(""),"transformVector"), 1
         coerce QName(PackageNamespace("flash.geom"),"Vector3D")
         setlocal2
         getlocal0
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         subtract
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         getlocal0
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         subtract
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         getlocal0
         getlocal2
         getproperty QName(PackageNamespace(""),"z")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformZ")
         subtract
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         jump ofs4
         ofs3:
         getlocal0
         getlocal1
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"x")
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         getlocal0
         getlocal1
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"y")
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         getlocal0
         getlocal1
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         getproperty QName(PackageNamespace(""),"z")
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         ofs4:
         jump ofs5
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"sourceOfTruth")
         getlex QName(PackageNamespace(""),"SOURCE_MATRIX")
         ifne ofs5
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_transformY")
         callpropvoid QName(PackageNamespace(""),"decomposeMatrix"), 4
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 1
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         getlocal0
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         getlocal0
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationX")
         getlocal0
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationY")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 2
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationZ")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 3
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleX")
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"decomposition")
         pushbyte 4
         getproperty MultinameL([PrivateNamespace(null,"#CompoundTransform"),PackageNamespace(""),PrivateNamespace(null,"#CompoundTransform/1"),PackageNamespace("mx.geom"),PackageInternalNs("mx.geom"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.geom:CompoundTransform"),StaticProtectedNs("mx.geom:CompoundTransform"),StaticProtectedNs("Object")])
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleY")
         getlocal0
         pushbyte 1
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleZ")
         ofs5:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get matrix3D() : Matrix3D
      {
         trait getter QName(PackageNamespace(""),"matrix3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Matrix3D")
         
         body
         maxstack 14
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         bitand
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"PROPERTIES_VALID")
         bitand
         pushfalse
         ifne ofs1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"validatePropertiesFromMatrix"), 0
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal1
         getlocal1
         pushnull
         ifne ofs2
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix3D")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix3D"), 0
         dup
         setlocal2
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         getlocal2
         kill 2
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal1
         jump ofs3
         ofs2:
         getlocal1
         callpropvoid QName(PackageNamespace(""),"identity"), 0
         ofs3:
         getlex QName(PackageNamespace("mx.core"),"AdvancedLayoutFeatures")
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"transformX")
         getlocal0
         getproperty QName(PackageNamespace(""),"transformY")
         getlocal0
         getproperty QName(PackageNamespace(""),"transformZ")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_scaleZ")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_rotationZ")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_z")
         callpropvoid QName(PackageNamespace(""),"build3DMatrix"), 13
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"MATRIX3D_VALID")
         bitor
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_flags")
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set matrix3D(param1:Matrix3D) : void
      {
         trait setter QName(PackageNamespace(""),"matrix3D")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Matrix3D")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         pushnull
         ifne ofs0
         getlocal0
         getlocal1
         callproperty QName(PackageNamespace(""),"clone"), 0
         initproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         callpropvoid QName(PackageNamespace(""),"identity"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#CompoundTransform"),"_matrix3D")
         getlocal1
         callpropvoid QName(PackageNamespace(""),"append"), 1
         ofs1:
         getlocal0
         getlex QName(PrivateNamespace(null,"#CompoundTransform"),"INVALIDATE_FROM_MATRIX3D")
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#CompoundTransform"),"invalidate"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
