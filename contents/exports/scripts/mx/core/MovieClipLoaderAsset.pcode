
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 11
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("MovieClipLoaderAsset",[PackageNamespace("mx.core")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"InteractiveObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"Sprite")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"MovieClip")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexMovieClip")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"MovieClipAsset")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"MovieClipAsset")
   newclass #MovieClipLoaderAsset
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("mx.core"),"MovieClipLoaderAsset")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.core
{
   import flash.display.Loader;
   import flash.events.Event;
   import flash.system.ApplicationDomain;
   import flash.system.LoaderContext;
   import flash.utils.ByteArray;
   
   use namespace mx_internal;
   
   public class MovieClipLoaderAsset extends MovieClipAsset implements IFlexAsset, IFlexDisplayObject
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var loader:Loader = null;
      
      private var initialized:Boolean = false;
      
      private var requestedWidth:Number;
      
      private var requestedHeight:Number;
      
      protected var initialWidth:Number = 0;
      
      protected var initialHeight:Number = 0;
      
      public function MovieClipLoaderAsset()
      {
         method
         name null
         returns null
         
         body
         maxstack 3
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         findpropstrict QName(PackageNamespace("flash.system"),"LoaderContext")
         constructprop QName(PackageNamespace("flash.system"),"LoaderContext"), 0
         coerce QName(PackageNamespace("flash.system"),"LoaderContext")
         setlocal1
         getlocal1
         findpropstrict QName(PackageNamespace("flash.system"),"ApplicationDomain")
         getlex QName(PackageNamespace("flash.system"),"ApplicationDomain")
         getproperty QName(PackageNamespace(""),"currentDomain")
         constructprop QName(PackageNamespace("flash.system"),"ApplicationDomain"), 1
         setproperty QName(PackageNamespace(""),"applicationDomain")
         pushstring "allowLoadBytesCodeExecution"
         getlocal1
         in
         iffalse ofs0
         getlocal1
         pushstring "allowLoadBytesCodeExecution"
         pushtrue
         setproperty MultinameL([PrivateNamespace(null,"#MovieClipLoaderAsset"),PackageNamespace(""),PrivateNamespace(null,"#MovieClipLoaderAsset/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:MovieClipLoaderAsset"),StaticProtectedNs("mx.core:MovieClipLoaderAsset"),StaticProtectedNs("mx.core:MovieClipAsset"),StaticProtectedNs("mx.core:FlexMovieClip"),StaticProtectedNs("flash.display:MovieClip"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         ofs0:
         getlocal0
         findpropstrict QName(PackageNamespace("flash.display"),"Loader")
         constructprop QName(PackageNamespace("flash.display"),"Loader"), 0
         initproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getproperty QName(PackageNamespace(""),"contentLoaderInfo")
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"COMPLETE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"completeHandler")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getlocal0
         getproperty QName(PackageNamespace(""),"movieClipData")
         getlocal1
         callpropvoid QName(PackageNamespace(""),"loadBytes"), 2
         findpropstrict QName(PackageNamespace(""),"addChild")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get height() : Number
      {
         trait getter QName(PackageNamespace(""),"height")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"initialized")
         iftrue ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("mx.core:MovieClipLoaderAsset"),"initialHeight")
         returnvalue
         ofs0:
         getlocal0
         getsuper QName(PackageNamespace(""),"height")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set height(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"height")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"initialized")
         iftrue ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"requestedHeight")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getlocal1
         setproperty QName(PackageNamespace(""),"height")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get measuredHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredHeight")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("mx.core:MovieClipLoaderAsset"),"initialHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function get measuredWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredWidth")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("mx.core:MovieClipLoaderAsset"),"initialWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function get width() : Number
      {
         trait getter QName(PackageNamespace(""),"width")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"initialized")
         iftrue ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("mx.core:MovieClipLoaderAsset"),"initialWidth")
         returnvalue
         ofs0:
         getlocal0
         getsuper QName(PackageNamespace(""),"width")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set width(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"width")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"initialized")
         iftrue ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"requestedWidth")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getlocal1
         setproperty QName(PackageNamespace(""),"width")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get movieClipData() : ByteArray
      {
         trait getter QName(PackageNamespace(""),"movieClipData")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.utils"),"ByteArray")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function completeHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"completeHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"initialized")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getproperty QName(PackageNamespace(""),"contentLoaderInfo")
         getproperty QName(PackageNamespace(""),"width")
         initproperty QName(ProtectedNamespace("mx.core:MovieClipLoaderAsset"),"initialWidth")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getproperty QName(PackageNamespace(""),"contentLoaderInfo")
         getproperty QName(PackageNamespace(""),"height")
         initproperty QName(ProtectedNamespace("mx.core:MovieClipLoaderAsset"),"initialHeight")
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"requestedWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"requestedWidth")
         setproperty QName(PackageNamespace(""),"width")
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"requestedHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"loader")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipLoaderAsset"),"requestedHeight")
         setproperty QName(PackageNamespace(""),"height")
         ofs1:
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         getlocal1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
