
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("DragSource",[PackageNamespace("mx.core")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #DragSource
   popscope
   initproperty QName(PackageNamespace("mx.core"),"DragSource")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.core
{
   use namespace mx_internal;
   
   public class DragSource
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var dataHolder:Object;
      
      private var formatHandlers:Object;
      
      private var _formats:Array;
      
      public function DragSource()
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         newobject 0
         initproperty QName(PrivateNamespace(null,"#DragSource"),"dataHolder")
         getlocal0
         newobject 0
         initproperty QName(PrivateNamespace(null,"#DragSource"),"formatHandlers")
         getlocal0
         newarray 0
         initproperty QName(PrivateNamespace(null,"#DragSource"),"_formats")
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get formats() : Array
      {
         trait getter QName(PackageNamespace(""),"formats")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"_formats")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function addData(param1:Object, param2:String) : void
      {
         trait method QName(PackageNamespace(""),"addData")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"_formats")
         getlocal2
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"dataHolder")
         getlocal2
         getlocal1
         setproperty MultinameL([PrivateNamespace(null,"#DragSource"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#DragSource/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),ProtectedNamespace("mx.core:DragSource"),StaticProtectedNs("mx.core:DragSource"),StaticProtectedNs("Object")])
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function addHandler(param1:Function, param2:String) : void
      {
         trait method QName(PackageNamespace(""),"addHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Function")
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"_formats")
         getlocal2
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"formatHandlers")
         getlocal2
         getlocal1
         setproperty MultinameL([PrivateNamespace(null,"#DragSource"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#DragSource/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),ProtectedNamespace("mx.core:DragSource"),StaticProtectedNs("mx.core:DragSource"),StaticProtectedNs("Object")])
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function dataForFormat(param1:String) : Object
      {
         trait method QName(PackageNamespace(""),"dataForFormat")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"dataHolder")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#DragSource"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#DragSource/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),ProtectedNamespace("mx.core:DragSource"),StaticProtectedNs("mx.core:DragSource"),StaticProtectedNs("Object")])
         coerce QName(PackageNamespace(""),"Object")
         setlocal2
         getlocal2
         iffalse ofs0
         getlocal2
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"formatHandlers")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#DragSource"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#DragSource/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),ProtectedNamespace("mx.core:DragSource"),StaticProtectedNs("mx.core:DragSource"),StaticProtectedNs("Object")])
         iffalse ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"formatHandlers")
         dup
         setlocal3
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#DragSource"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#DragSource/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),ProtectedNamespace("mx.core:DragSource"),StaticProtectedNs("mx.core:DragSource"),StaticProtectedNs("Object")])
         getlocal3
         call 0
         kill 3
         returnvalue
         ofs1:
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function hasFormat(param1:String) : Boolean
      {
         trait method QName(PackageNamespace(""),"hasFormat")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"_formats")
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         setlocal2
         pushbyte 0
         setlocal3
         jump ofs0
         ofs1:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#DragSource"),"_formats")
         getlocal3
         getproperty MultinameL([PrivateNamespace(null,"#DragSource"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#DragSource/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),ProtectedNamespace("mx.core:DragSource"),StaticProtectedNs("mx.core:DragSource"),StaticProtectedNs("Object")])
         getlocal1
         ifne ofs2
         pushtrue
         returnvalue
         ofs2:
         inclocal_i 3
         ofs0:
         getlocal3
         getlocal2
         iflt ofs1
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
