
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 7
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("BitmapAsset",[PackageNamespace("mx.core")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"Bitmap")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexBitmap")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexBitmap")
   newclass #BitmapAsset
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("mx.core"),"BitmapAsset")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.core
{
   import flash.display.BitmapData;
   import flash.display.DisplayObjectContainer;
   import flash.events.Event;
   import flash.geom.Point;
   import flash.system.ApplicationDomain;
   
   use namespace mx_internal;
   
   public class BitmapAsset extends FlexBitmap implements IFlexAsset, IFlexDisplayObject, ILayoutDirectionElement
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      private static var FlexVersionClass:Class;
      
      private static var MatrixUtilClass:Class;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var layoutFeaturesClass:Class;
      
      private var layoutFeatures:IAssetLayoutFeatures;
      
      private var _height:Number;
      
      private var _layoutDirection:String = "ltr";
      
      public function BitmapAsset(param1:BitmapData = null, param2:String = "auto", param3:Boolean = false)
      {
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("flash.display"),"BitmapData")
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         optional Null()
         optional Utf8("auto")
         optional False()
         returns null
         
         body
         maxstack 4
         localcount 5
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
         setlocal 4
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         constructsuper 3
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"FlexVersionClass")
         pushnull
         ifne ofs0
         getlex QName(PackageNamespace("flash.system"),"ApplicationDomain")
         getproperty QName(PackageNamespace(""),"currentDomain")
         coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
         dup
         setlocal 4
         pushstring "mx.core::FlexVersion"
         callproperty QName(PackageNamespace(""),"hasDefinition"), 1
         iffalse ofs0
         findproperty QName(PrivateNamespace(null,"#BitmapAsset"),"FlexVersionClass")
         findpropstrict QName(PackageNamespace(""),"Class")
         getlocal 4
         pushstring "mx.core::FlexVersion"
         callproperty QName(PackageNamespace(""),"getDefinition"), 1
         callproperty QName(PackageNamespace(""),"Class"), 1
         setproperty QName(PrivateNamespace(null,"#BitmapAsset"),"FlexVersionClass")
         ofs0:
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"FlexVersionClass")
         convert_b
         dup
         iffalse ofs1
         pop
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"FlexVersionClass")
         pushstring "compatibilityVersion"
         getproperty MultinameL([PrivateNamespace(null,"#BitmapAsset"),PackageNamespace(""),PrivateNamespace(null,"#BitmapAsset/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:FlexBitmap"),StaticProtectedNs("flash.display:Bitmap"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"FlexVersionClass")
         pushstring "VERSION_4_0"
         getproperty MultinameL([PrivateNamespace(null,"#BitmapAsset"),PackageNamespace(""),PrivateNamespace(null,"#BitmapAsset/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:FlexBitmap"),StaticProtectedNs("flash.display:Bitmap"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         greaterequals
         ofs1:
         iffalse ofs2
         getlocal0
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"ADDED")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"addedHandler")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get x() : Number
      {
         trait getter QName(PackageNamespace(""),"x")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"x")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutX")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set x(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"x")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"x")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutX")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get y() : Number
      {
         trait getter QName(PackageNamespace(""),"y")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"y")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutY")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set y(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"y")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"y")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutY")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get z() : Number
      {
         trait getter QName(PackageNamespace(""),"z")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"z")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set z(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"z")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"z")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"z")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutZ")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get width() : Number
      {
         trait getter QName(PackageNamespace(""),"width")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"width")
         returnvalue
         ofs0:
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"MatrixUtilClass")
         pushnull
         ifeq ofs1
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"MatrixUtilClass")
         dup
         setlocal2
         pushstring "transformSize"
         getproperty MultinameL([PrivateNamespace(null,"#BitmapAsset"),PackageNamespace(""),PrivateNamespace(null,"#BitmapAsset/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:FlexBitmap"),StaticProtectedNs("flash.display:Bitmap"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutWidth")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_height")
         getlex QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"matrix")
         call 3
         kill 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal1
         ofs1:
         getlocal1
         iffalse ofs2
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         jump ofs3
         ofs2:
         getlocal0
         getsuper QName(PackageNamespace(""),"width")
         convert_d
         ofs3:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set width(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"width")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"width")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"width")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutWidth")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         pushbyte 0
         ifeq ofs3
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         divide
         convert_d
         jump ofs4
         ofs3:
         pushbyte 0
         convert_d
         ofs4:
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleX")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get height() : Number
      {
         trait getter QName(PackageNamespace(""),"height")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"height")
         returnvalue
         ofs0:
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"MatrixUtilClass")
         pushnull
         ifeq ofs1
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"MatrixUtilClass")
         dup
         setlocal2
         pushstring "transformSize"
         getproperty MultinameL([PrivateNamespace(null,"#BitmapAsset"),PackageNamespace(""),PrivateNamespace(null,"#BitmapAsset/1"),PackageNamespace("mx.core"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:BitmapAsset"),StaticProtectedNs("mx.core:FlexBitmap"),StaticProtectedNs("flash.display:Bitmap"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutWidth")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_height")
         getlex QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"matrix")
         call 3
         kill 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal1
         ofs1:
         getlocal1
         iffalse ofs2
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         jump ofs3
         ofs2:
         getlocal0
         getsuper QName(PackageNamespace(""),"height")
         convert_d
         ofs3:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set height(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"height")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"height")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"height")
         jump ofs2
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_height")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         pushbyte 0
         ifeq ofs3
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         divide
         convert_d
         jump ofs4
         ofs3:
         pushbyte 0
         convert_d
         ofs4:
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleY")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get rotationX() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationX")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"rotationX")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationX")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set rotationX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationX")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationX")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"rotationX")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationX")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get rotationY() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationY")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"rotationY")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationY")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set rotationY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationY")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationY")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"rotationY")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationY")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get rotationZ() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationZ")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"rotationZ")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set rotationZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationZ")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationZ")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"rotationZ")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationZ")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get rotation() : Number
      {
         trait getter QName(PackageNamespace(""),"rotation")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"rotation")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set rotation(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotation")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotation")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"rotation")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationZ")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get scaleX() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleX")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"scaleX")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleX")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set scaleX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleX")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleX")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"scaleX")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         multiply
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutWidth")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get scaleY() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleY")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"scaleY")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleY")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set scaleY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleY")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleY")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"scaleY")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleY")
         getlocal0
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         multiply
         initproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_height")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get scaleZ() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleZ")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getsuper QName(PackageNamespace(""),"scaleZ")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set scaleZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleZ")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleZ")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifne ofs1
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"scaleZ")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal1
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleZ")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get layoutDirection() : String
      {
         trait getter QName(PackageNamespace(""),"layoutDirection")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_layoutDirection")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set layoutDirection(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"layoutDirection")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_layoutDirection")
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_layoutDirection")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateLayoutDirection"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"bitmapData")
         iffalse ofs0
         getlex QName(PackageNamespace(""),"bitmapData")
         getproperty QName(PackageNamespace(""),"height")
         returnvalue
         ofs0:
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"bitmapData")
         iffalse ofs0
         getlex QName(PackageNamespace(""),"bitmapData")
         getproperty QName(PackageNamespace(""),"width")
         returnvalue
         ofs0:
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateLayoutDirection() : void
      {
         trait method QName(PackageNamespace(""),"invalidateLayoutDirection")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal2
         getlex QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         setlocal1
         jump ofs0
         ofs1:
         label
         getlocal1
         getlex QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         istypelate
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_layoutDirection")
         pushnull
         equals
         not
         dup
         iffalse ofs3
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_layoutDirection")
         findpropstrict QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"ILayoutDirectionElement"), 1
         getproperty QName(Namespace("mx.core:ILayoutDirectionElement"),"layoutDirection")
         equals
         not
         ofs3:
         convert_b
         setlocal2
         getlocal2
         convert_b
         dup
         iffalse ofs4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         equals
         ofs4:
         iffalse ofs5
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"initAdvancedLayoutFeatures"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifeq ofs6
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal2
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"mirror")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         ofs6:
         jump ofs7
         ofs5:
         getlocal2
         not
         dup
         iffalse ofs8
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         convert_b
         ofs8:
         iffalse ofs7
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getlocal2
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"mirror")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix"), 0
         getlocal0
         pushnull
         initproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         ofs7:
         jump ofs9
         ofs2:
         getlocal1
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         setlocal1
         ofs0:
         getlocal1
         iftrue ofs1
         ofs9:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function move(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"move")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getlocal2
         setproperty QName(PackageNamespace(""),"y")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setActualSize(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"setActualSize")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"width")
         getlocal0
         getlocal2
         initproperty QName(PackageNamespace(""),"height")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function addedHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#BitmapAsset"),"addedHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateLayoutDirection"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function initAdvancedLayoutFeatures() : void
      {
         trait method QName(PrivateNamespace(null,"#BitmapAsset"),"initAdvancedLayoutFeatures")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
         setlocal1
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IAssetLayoutFeatures")
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeaturesClass")
         pushnull
         ifne ofs0
         getlex QName(PackageNamespace("flash.system"),"ApplicationDomain")
         getproperty QName(PackageNamespace(""),"currentDomain")
         coerce QName(PackageNamespace("flash.system"),"ApplicationDomain")
         setlocal1
         getlocal1
         pushstring "mx.core::AdvancedLayoutFeatures"
         callproperty QName(PackageNamespace(""),"hasDefinition"), 1
         iffalse ofs1
         getlocal0
         findpropstrict QName(PackageNamespace(""),"Class")
         getlocal1
         pushstring "mx.core::AdvancedLayoutFeatures"
         callproperty QName(PackageNamespace(""),"getDefinition"), 1
         callproperty QName(PackageNamespace(""),"Class"), 1
         initproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeaturesClass")
         ofs1:
         getlex QName(PrivateNamespace(null,"#BitmapAsset"),"MatrixUtilClass")
         pushnull
         ifne ofs0
         getlocal1
         pushstring "mx.utils::MatrixUtil"
         callproperty QName(PackageNamespace(""),"hasDefinition"), 1
         iffalse ofs0
         findproperty QName(PrivateNamespace(null,"#BitmapAsset"),"MatrixUtilClass")
         findpropstrict QName(PackageNamespace(""),"Class")
         getlocal1
         pushstring "mx.utils::MatrixUtil"
         callproperty QName(PackageNamespace(""),"getDefinition"), 1
         callproperty QName(PackageNamespace(""),"Class"), 1
         setproperty QName(PrivateNamespace(null,"#BitmapAsset"),"MatrixUtilClass")
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeaturesClass")
         pushnull
         ifeq ofs2
         getlocal0
         constructprop QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeaturesClass"), 0
         coerce QName(PackageNamespace("mx.core"),"IAssetLayoutFeatures")
         setlocal2
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleX")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleX")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleY")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleY")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleZ")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutScaleZ")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationX")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationX")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationY")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationY")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"rotation")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutRotationZ")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutX")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutY")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"z")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutZ")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"width")
         setproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"layoutWidth")
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"height")
         initproperty QName(PrivateNamespace(null,"#BitmapAsset"),"_height")
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function validateTransformMatrix() : void
      {
         trait method QName(PrivateNamespace(null,"#BitmapAsset"),"validateTransformMatrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         pushnull
         ifeq ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"is3D")
         iffalse ofs1
         getlocal0
         getsuper QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"computedMatrix3D")
         setproperty QName(PackageNamespace(""),"matrix3D")
         jump ofs0
         ofs1:
         getlocal0
         getsuper QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#BitmapAsset"),"layoutFeatures")
         getproperty QName(Namespace("mx.core:IAssetLayoutFeatures"),"computedMatrix")
         setproperty QName(PackageNamespace(""),"matrix")
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
