
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("EmbeddedFont",[PackageNamespace("mx.core")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #EmbeddedFont
   popscope
   initproperty QName(PackageNamespace("mx.core"),"EmbeddedFont")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.core
{
   use namespace mx_internal;
   
   public class EmbeddedFont
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _bold:Boolean;
      
      private var _fontName:String;
      
      private var _fontStyle:String;
      
      private var _italic:Boolean;
      
      public function EmbeddedFont(param1:String, param2:Boolean, param3:Boolean)
      {
         method
         name null
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"Boolean")
         returns null
         
         body
         maxstack 4
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         callpropvoid QName(PackageNamespace(""),"initialize"), 3
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get bold() : Boolean
      {
         trait getter QName(PackageNamespace(""),"bold")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_bold")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get fontName() : String
      {
         trait getter QName(PackageNamespace(""),"fontName")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_fontName")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get fontStyle() : String
      {
         trait getter QName(PackageNamespace(""),"fontStyle")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_fontStyle")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get italic() : Boolean
      {
         trait getter QName(PackageNamespace(""),"italic")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_italic")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function initialize(param1:String, param2:Boolean, param3:Boolean) : void
      {
         trait method QName(PackageNamespace(""),"initialize")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_bold")
         getlocal0
         getlocal3
         initproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_italic")
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_fontName")
         getlocal0
         getlex QName(PackageNamespace("mx.core"),"EmbeddedFontRegistry")
         callproperty QName(PackageNamespace(""),"getInstance"), 0
         getlocal2
         getlocal3
         callproperty QName(Namespace("mx.core:IEmbeddedFontRegistry"),"getFontStyle"), 2
         initproperty QName(PrivateNamespace(null,"#EmbeddedFont"),"_fontStyle")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
