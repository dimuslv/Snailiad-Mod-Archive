
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 10
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("MovieClipAsset",[PackageNamespace("mx.core")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"InteractiveObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"Sprite")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"MovieClip")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexMovieClip")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexMovieClip")
   newclass #MovieClipAsset
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("mx.core"),"MovieClipAsset")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.core
{
   use namespace mx_internal;
   
   public class MovieClipAsset extends FlexMovieClip implements IFlexAsset, IFlexDisplayObject, IBorder
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 10
         maxscopedepth 11
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _measuredHeight:Number;
      
      private var _measuredWidth:Number;
      
      public function MovieClipAsset()
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         getlocal0
         getlex QName(PackageNamespace(""),"width")
         initproperty QName(PrivateNamespace(null,"#MovieClipAsset"),"_measuredWidth")
         getlocal0
         getlex QName(PackageNamespace(""),"height")
         initproperty QName(PrivateNamespace(null,"#MovieClipAsset"),"_measuredHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipAsset"),"_measuredHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#MovieClipAsset"),"_measuredWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get borderMetrics() : EdgeMetrics
      {
         trait getter QName(PackageNamespace(""),"borderMetrics")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.core"),"EdgeMetrics")
         
         body
         maxstack 7
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"scale9Grid")
         pushnull
         ifne ofs0
         getlex QName(PackageNamespace("mx.core"),"EdgeMetrics")
         getproperty QName(PackageNamespace(""),"EMPTY")
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace("mx.core"),"EdgeMetrics")
         getlex QName(PackageNamespace(""),"scale9Grid")
         getproperty QName(PackageNamespace(""),"left")
         getlex QName(PackageNamespace(""),"scale9Grid")
         getproperty QName(PackageNamespace(""),"top")
         getlex QName(PackageNamespace(""),"Math")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         getlex QName(PackageNamespace(""),"scale9Grid")
         getproperty QName(PackageNamespace(""),"right")
         subtract
         callproperty QName(PackageNamespace(""),"ceil"), 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         getlex QName(PackageNamespace(""),"scale9Grid")
         getproperty QName(PackageNamespace(""),"bottom")
         subtract
         callproperty QName(PackageNamespace(""),"ceil"), 1
         constructprop QName(PackageNamespace("mx.core"),"EdgeMetrics"), 4
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function move(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"move")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getlocal2
         setproperty QName(PackageNamespace(""),"y")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setActualSize(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"setActualSize")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         findproperty QName(PackageNamespace(""),"width")
         getlocal1
         initproperty QName(PackageNamespace(""),"width")
         findproperty QName(PackageNamespace(""),"height")
         getlocal2
         initproperty QName(PackageNamespace(""),"height")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
