
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 8
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("UITextField",[PackageNamespace("mx.core")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"InteractiveObject")
   pushscope
   getlex QName(PackageNamespace("flash.text"),"TextField")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexTextField")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexTextField")
   newclass #UITextField
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("mx.core"),"UITextField")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.core
{
   import flash.display.DisplayObject;
   import flash.display.DisplayObjectContainer;
   import flash.display.Sprite;
   import flash.events.Event;
   import flash.geom.Matrix;
   import flash.text.TextFieldType;
   import flash.text.TextFormat;
   import flash.text.TextFormatAlign;
   import flash.text.TextLineMetrics;
   import mx.automation.IAutomationObject;
   import mx.managers.ISystemManager;
   import mx.managers.IToolTipManagerClient;
   import mx.managers.SystemManager;
   import mx.managers.ToolTipManager;
   import mx.resources.IResourceManager;
   import mx.resources.ResourceManager;
   import mx.styles.ISimpleStyleClient;
   import mx.styles.IStyleClient;
   import mx.styles.IStyleManager2;
   import mx.styles.StyleManager;
   import mx.styles.StyleProtoChain;
   import mx.utils.NameUtil;
   import mx.utils.StringUtil;
   
   use namespace mx_internal;
   
   public class UITextField extends FlexTextField implements IAutomationObject, IIMESupport, IFlexModule, IInvalidating, ISimpleStyleClient, IToolTipManagerClient, IUITextField
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      mx_internal static const TEXT_WIDTH_PADDING:int = 5;
      
      mx_internal static const TEXT_HEIGHT_PADDING:int = 4;
      
      private static var truncationIndicatorResource:String;
      
      mx_internal static var debuggingBorders:Boolean = false;
      
      private static var noEmbeddedFonts:Boolean;
      
      private static var _embeddedFontRegistry:IEmbeddedFontRegistry;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_WIDTH_PADDING")
         pushbyte 5
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_WIDTH_PADDING")
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_HEIGHT_PADDING")
         pushbyte 4
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_HEIGHT_PADDING")
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"debuggingBorders")
         pushfalse
         setproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"debuggingBorders")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var cachedTextFormat:TextFormat;
      
      private var invalidateDisplayListFlag:Boolean = true;
      
      mx_internal var styleChangedFlag:Boolean = true;
      
      private var explicitHTMLText:String = null;
      
      mx_internal var explicitColor:uint = 4.294967295E9;
      
      private var resourceManager:IResourceManager;
      
      private var untruncatedText:String;
      
      private var mirror:Boolean = false;
      
      private var _x:Number = 0;
      
      mx_internal var _parent:DisplayObjectContainer;
      
      private var _automationDelegate:IAutomationObject;
      
      private var _automationName:String;
      
      private var _document:Object;
      
      private var _enabled:Boolean = true;
      
      private var _explicitHeight:Number;
      
      private var _explicitWidth:Number;
      
      private var _ignorePadding:Boolean = true;
      
      private var _imeMode:String = null;
      
      private var _includeInLayout:Boolean = true;
      
      private var _inheritingStyles:Object;
      
      private var _initialized:Boolean = false;
      
      private var _moduleFactory:IFlexModuleFactory;
      
      private var _nestLevel:int = 0;
      
      private var _nonInheritingStyles:Object;
      
      private var _processedDescriptors:Boolean = true;
      
      private var _styleName:Object;
      
      mx_internal var _toolTip:String;
      
      private var _updateCompletePendingFlag:Boolean = false;
      
      private var _owner:DisplayObjectContainer;
      
      public function UITextField()
      {
         method
         name null
         returns null
         
         body
         maxstack 6
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlex QName(PackageNamespace("mx.resources"),"ResourceManager")
         callproperty QName(PackageNamespace(""),"getInstance"), 0
         initproperty QName(PrivateNamespace(null,"#UITextField"),"resourceManager")
         getlocal0
         getlex QName(PackageNamespace("mx.styles"),"StyleProtoChain")
         getproperty QName(PackageNamespace(""),"STYLE_UNINITIALIZED")
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_inheritingStyles")
         getlocal0
         getlex QName(PackageNamespace("mx.styles"),"StyleProtoChain")
         getproperty QName(PackageNamespace(""),"STYLE_UNINITIALIZED")
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_nonInheritingStyles")
         getlocal0
         constructsuper 0
         getlocal0
         pushstring ""
         setsuper QName(PackageNamespace(""),"text")
         findproperty QName(PackageNamespace(""),"focusRect")
         pushfalse
         initproperty QName(PackageNamespace(""),"focusRect")
         findproperty QName(PackageNamespace(""),"selectable")
         pushfalse
         initproperty QName(PackageNamespace(""),"selectable")
         findproperty QName(PackageNamespace(""),"tabEnabled")
         pushfalse
         initproperty QName(PackageNamespace(""),"tabEnabled")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"debuggingBorders")
         iffalse ofs0
         findproperty QName(PackageNamespace(""),"border")
         pushtrue
         initproperty QName(PackageNamespace(""),"border")
         ofs0:
         getlex QName(PrivateNamespace(null,"#UITextField"),"truncationIndicatorResource")
         iftrue ofs1
         findproperty QName(PrivateNamespace(null,"#UITextField"),"truncationIndicatorResource")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"resourceManager")
         pushstring "core"
         pushstring "truncationIndicator"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         setproperty QName(PrivateNamespace(null,"#UITextField"),"truncationIndicatorResource")
         ofs1:
         findpropstrict QName(PackageNamespace(""),"addEventListener")
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"changeHandler")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         findpropstrict QName(PackageNamespace(""),"addEventListener")
         pushstring "textFieldStyleChange"
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"textFieldStyleChangeHandler")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"resourceManager")
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"resourceManager_changeHandler")
         pushfalse
         pushbyte 0
         pushtrue
         callpropvoid QName(Namespace("flash.events:IEventDispatcher"),"addEventListener"), 5
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private static function get embeddedFontRegistry() : IEmbeddedFontRegistry
      {
         trait getter QName(PrivateNamespace(null,"#UITextField"),"embeddedFontRegistry")
         flag FINAL
         dispid 3
         method
         name null
         flag NEED_ACTIVATION
         returns QName(PackageNamespace("mx.core"),"IEmbeddedFontRegistry")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 9
         maxscopedepth 14
         
         code
         getlocal0
         pushscope
         newactivation
         dup
         setlocal1
         pushscope
         getlex QName(PrivateNamespace(null,"#UITextField"),"_embeddedFontRegistry")
         not
         dup
         iffalse ofs0
         pop
         getlex QName(PrivateNamespace(null,"#UITextField"),"noEmbeddedFonts")
         not
         ofs0:
         iffalse ofs1
         ofs2:
         findproperty QName(PrivateNamespace(null,"#UITextField"),"_embeddedFontRegistry")
         findpropstrict QName(PackageNamespace("mx.core"),"IEmbeddedFontRegistry")
         getlex QName(PackageNamespace("mx.core"),"Singleton")
         pushstring "mx.core::IEmbeddedFontRegistry"
         callproperty QName(PackageNamespace(""),"getInstance"), 1
         callproperty QName(PackageNamespace("mx.core"),"IEmbeddedFontRegistry"), 1
         setproperty QName(PrivateNamespace(null,"#UITextField"),"_embeddedFontRegistry")
         ofs3:
         jump ofs1
         ofs4:
         getlocal0
         pushscope
         getlocal1
         pushscope
         newcatch 0
         dup
         setlocal2
         dup
         pushscope
         swap
         setslot 1
         findproperty QName(PrivateNamespace(null,"#UITextField"),"noEmbeddedFonts")
         pushtrue
         setproperty QName(PrivateNamespace(null,"#UITextField"),"noEmbeddedFonts")
         popscope
         kill 2
         ofs1:
         getlex QName(PrivateNamespace(null,"#UITextField"),"_embeddedFontRegistry")
         returnvalue
         end ; code
         try from ofs2 to ofs3 target ofs4 type QName(PackageNamespace(""),"Error") name QName(PackageNamespace(""),"e") end
         end ; body
         end ; method
      }
      
      override public function set x(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"x")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_x")
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"mirror")
         iffalse ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#UITextField"),"validateTransformMatrix"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get x() : Number
      {
         trait getter QName(PackageNamespace(""),"x")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"mirror")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_x")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getsuper QName(PackageNamespace(""),"x")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set width(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"width")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"width")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"mirror")
         iffalse ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#UITextField"),"validateTransformMatrix"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set htmlText(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"htmlText")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal1
         iftrue ofs0
         pushstring ""
         setlocal1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"isHTML")
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"htmlText")
         getlocal1
         equals
         ofs1:
         iffalse ofs2
         returnvoid
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"cachedTextFormat")
         convert_b
         dup
         iffalse ofs3
         pop
         getlex QName(PackageNamespace(""),"styleSheet")
         pushnull
         equals
         ofs3:
         iffalse ofs4
         findproperty QName(PackageNamespace(""),"defaultTextFormat")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"cachedTextFormat")
         initproperty QName(PackageNamespace(""),"defaultTextFormat")
         ofs4:
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"htmlText")
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"explicitHTMLText")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         iffalse ofs5
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         ofs5:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get parent() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"parent")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_parent")
         iffalse ofs0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         jump ofs1
         ofs0:
         getlocal0
         getsuper QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set text(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"text")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal1
         iftrue ofs0
         pushstring ""
         setlocal1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"isHTML")
         not
         dup
         iffalse ofs1
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"text")
         getlocal1
         equals
         ofs1:
         iffalse ofs2
         returnvoid
         ofs2:
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"text")
         getlocal0
         pushnull
         initproperty QName(PrivateNamespace(null,"#UITextField"),"explicitHTMLText")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         iffalse ofs3
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         ofs3:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set textColor(param1:uint) : void
      {
         trait setter QName(PackageNamespace(""),"textColor")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"uint")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callpropvoid QName(PackageNamespace(""),"setColor"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationDelegate() : Object
      {
         trait getter QName(PackageNamespace(""),"automationDelegate")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_automationDelegate")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set automationDelegate(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"automationDelegate")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlex QName(PackageNamespace("mx.automation"),"IAutomationObject")
         astypelate
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_automationDelegate")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationName() : String
      {
         trait getter QName(PackageNamespace(""),"automationName")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_automationName")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_automationName")
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"automationDelegate")
         iffalse ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"automationDelegate")
         getproperty Multiname("automationName",[PrivateNamespace(null,"#UITextField"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),PackageNamespace("mx.core"),PackageNamespace(""),PrivateNamespace(null,"#UITextField/1"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:UITextField"),StaticProtectedNs("mx.core:UITextField"),StaticProtectedNs("mx.core:FlexTextField"),StaticProtectedNs("flash.text:TextField"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         returnvalue
         ofs1:
         pushstring ""
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set automationName(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"automationName")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_automationName")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationValue() : Array
      {
         trait getter QName(PackageNamespace(""),"automationValue")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"automationDelegate")
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"automationDelegate")
         getproperty Multiname("automationValue",[PrivateNamespace(null,"#UITextField"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),PackageNamespace("mx.core"),PackageNamespace(""),PrivateNamespace(null,"#UITextField/1"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:UITextField"),StaticProtectedNs("mx.core:UITextField"),StaticProtectedNs("mx.core:FlexTextField"),StaticProtectedNs("flash.text:TextField"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         returnvalue
         ofs0:
         pushstring ""
         newarray 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationOwner() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"automationOwner")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"owner")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationParent() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"automationParent")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationEnabled() : Boolean
      {
         trait getter QName(PackageNamespace(""),"automationEnabled")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"enabled")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationVisible() : Boolean
      {
         trait getter QName(PackageNamespace(""),"automationVisible")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"visible")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get baselinePosition() : Number
      {
         trait getter QName(PackageNamespace(""),"baselinePosition")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.text"),"TextLineMetrics")
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iftrue ofs0
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         ofs0:
         getlex QName(PackageNamespace(""),"text")
         pushstring ""
         equals
         setlocal2
         getlocal2
         iffalse ofs1
         getlocal0
         pushstring "Wj"
         setsuper QName(PackageNamespace(""),"text")
         ofs1:
         findpropstrict QName(PackageNamespace(""),"getLineMetrics")
         pushbyte 0
         callproperty QName(PackageNamespace(""),"getLineMetrics"), 1
         coerce QName(PackageNamespace("flash.text"),"TextLineMetrics")
         setlocal1
         getlocal2
         iffalse ofs2
         getlocal0
         pushstring ""
         setsuper QName(PackageNamespace(""),"text")
         ofs2:
         pushbyte 2
         getlocal1
         getproperty QName(PackageNamespace(""),"ascent")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get className() : String
      {
         trait getter QName(PackageNamespace(""),"className")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.utils"),"NameUtil")
         getlocal0
         callproperty QName(PackageNamespace(""),"getUnqualifiedClassName"), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get document() : Object
      {
         trait getter QName(PackageNamespace(""),"document")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_document")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set document(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"document")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_document")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get enableIME() : Boolean
      {
         trait getter QName(PackageNamespace(""),"enableIME")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"type")
         getlex QName(PackageNamespace("flash.text"),"TextFieldType")
         getproperty QName(PackageNamespace(""),"INPUT")
         equals
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get enabled() : Boolean
      {
         trait getter QName(PackageNamespace(""),"enabled")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_enabled")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set enabled(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"enabled")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         findproperty QName(PackageNamespace(""),"mouseEnabled")
         getlocal1
         initproperty QName(PackageNamespace(""),"mouseEnabled")
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_enabled")
         getlocal0
         pushstring "color"
         callpropvoid QName(PackageNamespace(""),"styleChanged"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_explicitHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_explicitHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMaxHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMaxHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMaxWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMaxWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMinHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMinHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMinWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMinWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_explicitWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_explicitWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get focusPane() : Sprite
      {
         trait getter QName(PackageNamespace(""),"focusPane")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"Sprite")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set focusPane(param1:Sprite) : void
      {
         trait setter QName(PackageNamespace(""),"focusPane")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"Sprite")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get ignorePadding() : Boolean
      {
         trait getter QName(PackageNamespace(""),"ignorePadding")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_ignorePadding")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set ignorePadding(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"ignorePadding")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_ignorePadding")
         getlocal0
         pushnull
         callpropvoid QName(PackageNamespace(""),"styleChanged"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get imeMode() : String
      {
         trait getter QName(PackageNamespace(""),"imeMode")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_imeMode")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set imeMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"imeMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_imeMode")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get includeInLayout() : Boolean
      {
         trait getter QName(PackageNamespace(""),"includeInLayout")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_includeInLayout")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set includeInLayout(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"includeInLayout")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IInvalidating")
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_includeInLayout")
         getlocal1
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_includeInLayout")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"IInvalidating")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"IInvalidating")
         setlocal2
         getlocal2
         iffalse ofs0
         getlocal2
         callpropvoid QName(Namespace("mx.core:IInvalidating"),"invalidateSize"), 0
         getlocal2
         callpropvoid QName(Namespace("mx.core:IInvalidating"),"invalidateDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get inheritingStyles() : Object
      {
         trait getter QName(PackageNamespace(""),"inheritingStyles")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_inheritingStyles")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set inheritingStyles(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"inheritingStyles")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_inheritingStyles")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get initialized() : Boolean
      {
         trait getter QName(PackageNamespace(""),"initialized")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_initialized")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set initialized(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"initialized")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_initialized")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function get isHTML() : Boolean
      {
         trait getter QName(PrivateNamespace(null,"#UITextField"),"isHTML")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"explicitHTMLText")
         pushnull
         equals
         not
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get isPopUp() : Boolean
      {
         trait getter QName(PackageNamespace(""),"isPopUp")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set isPopUp(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"isPopUp")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get maxHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"maxHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         getproperty QName(PackageNamespace(""),"DEFAULT_MAX_HEIGHT")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get maxWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"maxWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         getproperty QName(PackageNamespace(""),"DEFAULT_MAX_WIDTH")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         getlex QName(PackageNamespace(""),"stage")
         not
         dup
         iftrue ofs0
         pop
         getlex QName(PackageNamespace(""),"embedFonts")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"textHeight")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_HEIGHT_PADDING")
         add
         returnvalue
         ofs1:
         getlex QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"concatenatedMatrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlex QName(PackageNamespace(""),"Math")
         getlocal0
         getproperty QName(PackageNamespace(""),"textHeight")
         getlocal1
         getproperty QName(PackageNamespace(""),"a")
         multiply
         getlocal1
         getproperty QName(PackageNamespace(""),"d")
         divide
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_HEIGHT_PADDING")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredMinHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredMinHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredMinHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredMinHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredMinWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredMinWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredMinWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredMinWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         getlex QName(PackageNamespace(""),"stage")
         not
         dup
         iftrue ofs0
         pop
         getlex QName(PackageNamespace(""),"embedFonts")
         convert_b
         ofs0:
         iffalse ofs1
         getlex QName(PackageNamespace(""),"textWidth")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_WIDTH_PADDING")
         add
         returnvalue
         ofs1:
         getlex QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"concatenatedMatrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlex QName(PackageNamespace(""),"Math")
         getlex QName(PackageNamespace(""),"textWidth")
         getlocal1
         getproperty QName(PackageNamespace(""),"a")
         multiply
         getlocal1
         getproperty QName(PackageNamespace(""),"d")
         divide
         callproperty QName(PackageNamespace(""),"abs"), 1
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_WIDTH_PADDING")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get minHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"minHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get minWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"minWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get moduleFactory() : IFlexModuleFactory
      {
         trait getter QName(PackageNamespace(""),"moduleFactory")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_moduleFactory")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set moduleFactory(param1:IFlexModuleFactory) : void
      {
         trait setter QName(PackageNamespace(""),"moduleFactory")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_moduleFactory")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get nestLevel() : int
      {
         trait getter QName(PackageNamespace(""),"nestLevel")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_nestLevel")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set nestLevel(param1:int) : void
      {
         trait setter QName(PackageNamespace(""),"nestLevel")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal1
         pushbyte 1
         greaterthan
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_nestLevel")
         getlocal1
         equals
         not
         ofs0:
         iffalse ofs1
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_nestLevel")
         getlex QName(PackageNamespace("mx.styles"),"StyleProtoChain")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"initTextField"), 1
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"styleChangedFlag")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get nonInheritingStyles() : Object
      {
         trait getter QName(PackageNamespace(""),"nonInheritingStyles")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_nonInheritingStyles")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set nonInheritingStyles(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"nonInheritingStyles")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_nonInheritingStyles")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get percentHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"percentHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set percentHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"percentHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get percentWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"percentWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set percentWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"percentWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get processedDescriptors() : Boolean
      {
         trait getter QName(PackageNamespace(""),"processedDescriptors")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_processedDescriptors")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set processedDescriptors(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"processedDescriptors")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_processedDescriptors")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get styleManager() : IStyleManager2
      {
         trait getter QName(PackageNamespace(""),"styleManager")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.styles"),"IStyleManager2")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("mx.styles"),"StyleManager")
         getlocal0
         getproperty QName(PackageNamespace(""),"moduleFactory")
         callproperty QName(PackageNamespace(""),"getStyleManager"), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get styleName() : Object
      {
         trait getter QName(PackageNamespace(""),"styleName")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_styleName")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set styleName(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"styleName")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_styleName")
         getlocal1
         ifstrictne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_styleName")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs1
         getlex QName(PackageNamespace("mx.styles"),"StyleProtoChain")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"initTextField"), 1
         getlocal0
         pushstring "styleName"
         callpropvoid QName(PackageNamespace(""),"styleChanged"), 1
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get systemManager() : ISystemManager
      {
         trait getter QName(PackageNamespace(""),"systemManager")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.managers"),"ISystemManager")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IUIComponent")
         setlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal1
         jump ofs0
         ofs1:
         label
         getlocal1
         getlex QName(PackageNamespace("mx.core"),"IUIComponent")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"IUIComponent")
         setlocal2
         getlocal2
         iffalse ofs2
         getlocal2
         getproperty QName(Namespace("mx.core:IUIComponent"),"systemManager")
         returnvalue
         ofs2:
         getlocal1
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal1
         ofs0:
         getlocal1
         iftrue ofs1
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set systemManager(param1:ISystemManager) : void
      {
         trait setter QName(PackageNamespace(""),"systemManager")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.managers"),"ISystemManager")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get nonZeroTextHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"nonZeroTextHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal1
         getlocal0
         getsuper QName(PackageNamespace(""),"text")
         pushstring ""
         ifne ofs0
         getlocal0
         pushstring "Wj"
         setsuper QName(PackageNamespace(""),"text")
         getlocal0
         getproperty QName(PackageNamespace(""),"textHeight")
         convert_d
         setlocal1
         getlocal0
         pushstring ""
         setsuper QName(PackageNamespace(""),"text")
         getlocal1
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"textHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function get textHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"textHeight")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getsuper QName(PackageNamespace(""),"textHeight")
         convert_d
         setlocal1
         getlex QName(PackageNamespace(""),"numLines")
         pushbyte 1
         ifngt ofs0
         getlocal1
         findpropstrict QName(PackageNamespace(""),"getLineMetrics")
         pushbyte 1
         callproperty QName(PackageNamespace(""),"getLineMetrics"), 1
         getproperty QName(PackageNamespace(""),"leading")
         add
         convert_d
         setlocal1
         ofs0:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get toolTip() : String
      {
         trait getter QName(PackageNamespace(""),"toolTip")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_toolTip")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set toolTip(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"toolTip")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_toolTip")
         coerce_s
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_toolTip")
         getlex QName(PackageNamespace("mx.managers"),"ToolTipManager")
         getlocal0
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"registerToolTip"), 3
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get tweeningProperties() : Array
      {
         trait getter QName(PackageNamespace(""),"tweeningProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set tweeningProperties(param1:Array) : void
      {
         trait setter QName(PackageNamespace(""),"tweeningProperties")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Array")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get updateCompletePendingFlag() : Boolean
      {
         trait getter QName(PackageNamespace(""),"updateCompletePendingFlag")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_updateCompletePendingFlag")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set updateCompletePendingFlag(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"updateCompletePendingFlag")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_updateCompletePendingFlag")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function setTextFormat(param1:TextFormat, param2:int = -1, param3:int = -1) : void
      {
         trait method QName(PackageNamespace(""),"setTextFormat")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("flash.text"),"TextFormat")
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         optional Integer(-1)
         optional Integer(-1)
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"styleSheet")
         iffalse ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         callsupervoid QName(PackageNamespace(""),"setTextFormat"), 3
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("flash.events"),"Event")
         pushstring "textFormatChange"
         constructprop QName(PackageNamespace("flash.events"),"Event"), 1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function insertXMLText(param1:int, param2:int, param3:String, param4:Boolean = false) : void
      {
         trait method QName(PackageNamespace(""),"insertXMLText")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         optional False()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         getlocal 4
         callsupervoid QName(PackageNamespace(""),"insertXMLText"), 4
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("flash.events"),"Event")
         pushstring "textInsert"
         constructprop QName(PackageNamespace("flash.events"),"Event"), 1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function replaceText(param1:int, param2:int, param3:String) : void
      {
         trait method QName(PackageNamespace(""),"replaceText")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         callsupervoid QName(PackageNamespace(""),"replaceText"), 3
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("flash.events"),"Event")
         pushstring "textReplace"
         constructprop QName(PackageNamespace("flash.events"),"Event"), 1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function initialize() : void
      {
         trait method QName(PackageNamespace(""),"initialize")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getExplicitOrMeasuredWidth() : Number
      {
         trait method QName(PackageNamespace(""),"getExplicitOrMeasuredWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getExplicitOrMeasuredHeight() : Number
      {
         trait method QName(PackageNamespace(""),"getExplicitOrMeasuredHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setVisible(param1:Boolean, param2:Boolean = false) : void
      {
         trait method QName(PackageNamespace(""),"setVisible")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"Boolean")
         optional False()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         setproperty QName(PackageNamespace(""),"visible")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setFocus() : void
      {
         trait method QName(PackageNamespace(""),"setFocus")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"systemManager")
         getproperty QName(Namespace("mx.managers:ISystemManager"),"stage")
         getlocal0
         setproperty QName(PackageNamespace(""),"focus")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getUITextFormat() : UITextFormat
      {
         trait method QName(PackageNamespace(""),"getUITextFormat")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.core"),"UITextFormat")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         findpropstrict QName(PackageNamespace("mx.core"),"UITextFormat")
         getlocal0
         callproperty QName(PrivateNamespace(null,"#UITextField"),"creatingSystemManager"), 0
         constructprop QName(PackageNamespace("mx.core"),"UITextFormat"), 1
         coerce QName(PackageNamespace("mx.core"),"UITextFormat")
         setlocal1
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"moduleFactory")
         setproperty QName(PackageNamespace(""),"moduleFactory")
         getlocal1
         findpropstrict QName(PackageNamespace(""),"getTextFormat")
         callproperty QName(PackageNamespace(""),"getTextFormat"), 0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"copyFrom"), 1
         getlocal1
         getlex QName(PackageNamespace(""),"antiAliasType")
         setproperty QName(PackageNamespace(""),"antiAliasType")
         getlocal1
         getlex QName(PackageNamespace(""),"gridFitType")
         setproperty QName(PackageNamespace(""),"gridFitType")
         getlocal1
         getlex QName(PackageNamespace(""),"sharpness")
         setproperty QName(PackageNamespace(""),"sharpness")
         getlocal1
         getlex QName(PackageNamespace(""),"thickness")
         setproperty QName(PackageNamespace(""),"thickness")
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function move(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"move")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         getlocal1
         ifeq ofs0
         getlocal0
         getlocal1
         setproperty QName(PackageNamespace(""),"x")
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         getlocal2
         ifeq ofs1
         getlocal0
         getlocal2
         setproperty QName(PackageNamespace(""),"y")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setActualSize(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"setActualSize")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"width")
         getlocal1
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"width")
         ofs0:
         getlex QName(PackageNamespace(""),"height")
         getlocal2
         ifeq ofs1
         findproperty QName(PackageNamespace(""),"height")
         getlocal2
         initproperty QName(PackageNamespace(""),"height")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getStyle(param1:String) : *
      {
         trait method QName(PackageNamespace(""),"getStyle")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns null
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"styleManager")
         getproperty QName(Namespace("mx.styles:IStyleManager"),"inheritingStyles")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#UITextField"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),PackageNamespace("mx.core"),PackageNamespace(""),PrivateNamespace(null,"#UITextField/1"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:UITextField"),StaticProtectedNs("mx.core:UITextField"),StaticProtectedNs("mx.core:FlexTextField"),StaticProtectedNs("flash.text:TextField"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"inheritingStyles")
         iffalse ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"inheritingStyles")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#UITextField"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),PackageNamespace("mx.core"),PackageNamespace(""),PrivateNamespace(null,"#UITextField/1"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:UITextField"),StaticProtectedNs("mx.core:UITextField"),StaticProtectedNs("mx.core:FlexTextField"),StaticProtectedNs("flash.text:TextField"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce_a
         jump ofs2
         ofs1:
         findpropstrict QName(PackageNamespace("mx.styles"),"IStyleClient")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.styles"),"IStyleClient"), 1
         getlocal1
         callproperty QName(Namespace("mx.styles:IStyleClient"),"getStyle"), 1
         coerce_a
         ofs2:
         returnvalue
         jump ofs0
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"nonInheritingStyles")
         iffalse ofs3
         getlocal0
         getproperty QName(PackageNamespace(""),"nonInheritingStyles")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#UITextField"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),PackageNamespace("mx.core"),PackageNamespace(""),PrivateNamespace(null,"#UITextField/1"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:UITextField"),StaticProtectedNs("mx.core:UITextField"),StaticProtectedNs("mx.core:FlexTextField"),StaticProtectedNs("flash.text:TextField"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce_a
         jump ofs4
         ofs3:
         findpropstrict QName(PackageNamespace("mx.styles"),"IStyleClient")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.styles"),"IStyleClient"), 1
         getlocal1
         callproperty QName(Namespace("mx.styles:IStyleClient"),"getStyle"), 1
         coerce_a
         ofs4:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setStyle(param1:String, param2:*) : void
      {
         trait method QName(PackageNamespace(""),"setStyle")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         param null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function parentChanged(param1:DisplayObjectContainer) : void
      {
         trait method QName(PackageNamespace(""),"parentChanged")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal1
         iftrue ofs0
         getlocal0
         pushnull
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_parent")
         getlocal0
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_nestLevel")
         jump ofs1
         ofs0:
         getlocal1
         getlex QName(PackageNamespace("mx.styles"),"IStyleClient")
         istypelate
         iffalse ofs2
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_parent")
         jump ofs1
         ofs2:
         getlocal1
         getlex QName(PackageNamespace("mx.managers"),"SystemManager")
         istypelate
         iffalse ofs3
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_parent")
         jump ofs1
         ofs3:
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"parent")
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_parent")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function styleChanged(param1:String) : void
      {
         trait method QName(PackageNamespace(""),"styleChanged")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"styleChangedFlag")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         iftrue ofs0
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         pushstring "callLater"
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         in
         iffalse ofs0
         findpropstrict QName(PackageNamespace(""),"Object")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace(""),"Object"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"validateNow")
         callpropvoid Multiname("callLater",[PrivateNamespace(null,"#UITextField"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),PackageNamespace("mx.core"),PackageNamespace(""),PrivateNamespace(null,"#UITextField/1"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:UITextField"),StaticProtectedNs("mx.core:UITextField"),StaticProtectedNs("mx.core:FlexTextField"),StaticProtectedNs("flash.text:TextField"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")]), 1
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateNow() : void
      {
         trait method QName(PackageNamespace(""),"validateNow")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 8
         localcount 4
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal1
         pushnull
         coerce QName(PackageNamespace("flash.text"),"TextFormat")
         setlocal2
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iftrue ofs0
         returnvoid
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs1
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"width")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         equals
         not
         ofs1:
         iffalse ofs2
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         pushbyte 4
         ifngt ofs3
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         convert_d
         jump ofs4
         ofs3:
         pushbyte 4
         convert_d
         ofs4:
         initproperty QName(PackageNamespace(""),"width")
         ofs2:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs5
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"height")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         equals
         not
         ofs5:
         iffalse ofs6
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         setsuper QName(PackageNamespace(""),"height")
         ofs6:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"styleChangedFlag")
         iffalse ofs7
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"mirror")
         convert_b
         setlocal1
         getlocal0
         getlocal0
         pushstring "layoutDirection"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         getlex QName(PackageNamespace("mx.core"),"LayoutDirection")
         getproperty QName(PackageNamespace(""),"RTL")
         equals
         initproperty QName(PrivateNamespace(null,"#UITextField"),"mirror")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"mirror")
         convert_b
         dup
         iftrue ofs8
         pop
         getlocal1
         convert_b
         ofs8:
         iffalse ofs7
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#UITextField"),"validateTransformMatrix"), 0
         ofs7:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"styleChangedFlag")
         iffalse ofs9
         getlocal0
         callproperty QName(PackageNamespace(""),"getTextStyles"), 0
         coerce QName(PackageNamespace("flash.text"),"TextFormat")
         setlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"font")
         iffalse ofs10
         getlex QName(PrivateNamespace(null,"#UITextField"),"noEmbeddedFonts")
         convert_b
         dup
         iftrue ofs11
         pop
         getlex QName(PrivateNamespace(null,"#UITextField"),"embeddedFontRegistry")
         not
         ofs11:
         iffalse ofs12
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
         jump ofs13
         ofs12:
         getlex QName(PrivateNamespace(null,"#UITextField"),"embeddedFontRegistry")
         getlocal2
         getproperty QName(PackageNamespace(""),"font")
         getlocal2
         getproperty QName(PackageNamespace(""),"bold")
         getlocal2
         getproperty QName(PackageNamespace(""),"italic")
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"moduleFactory")
         getlocal0
         callproperty QName(PrivateNamespace(null,"#UITextField"),"creatingSystemManager"), 0
         pushfalse
         callproperty QName(Namespace("mx.core:IEmbeddedFontRegistry"),"getAssociatedModuleFactory"), 7
         coerce QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
         ofs13:
         coerce QName(PackageNamespace("mx.core"),"IFlexModuleFactory")
         setlocal3
         findproperty QName(PackageNamespace(""),"embedFonts")
         getlocal3
         pushnull
         equals
         not
         initproperty QName(PackageNamespace(""),"embedFonts")
         jump ofs14
         ofs10:
         findproperty QName(PackageNamespace(""),"embedFonts")
         getlocal0
         pushstring "embedFonts"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         initproperty QName(PackageNamespace(""),"embedFonts")
         ofs14:
         getlocal0
         pushstring "fontAntiAliasType"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         getlex QName(PackageNamespace(""),"undefined")
         ifeq ofs15
         findproperty QName(PackageNamespace(""),"antiAliasType")
         getlocal0
         pushstring "fontAntiAliasType"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         initproperty QName(PackageNamespace(""),"antiAliasType")
         findproperty QName(PackageNamespace(""),"gridFitType")
         getlocal0
         pushstring "fontGridFitType"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         initproperty QName(PackageNamespace(""),"gridFitType")
         findproperty QName(PackageNamespace(""),"sharpness")
         getlocal0
         pushstring "fontSharpness"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         initproperty QName(PackageNamespace(""),"sharpness")
         findproperty QName(PackageNamespace(""),"thickness")
         getlocal0
         pushstring "fontThickness"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         initproperty QName(PackageNamespace(""),"thickness")
         ofs15:
         getlex QName(PackageNamespace(""),"styleSheet")
         iftrue ofs16
         getlocal0
         getlocal2
         callsupervoid QName(PackageNamespace(""),"setTextFormat"), 1
         findproperty QName(PackageNamespace(""),"defaultTextFormat")
         getlocal2
         initproperty QName(PackageNamespace(""),"defaultTextFormat")
         ofs16:
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("flash.events"),"Event")
         pushstring "textFieldStyleChange"
         constructprop QName(PackageNamespace("flash.events"),"Event"), 1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         ofs9:
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"styleChangedFlag")
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function validateTransformMatrix() : void
      {
         trait method QName(PrivateNamespace(null,"#UITextField"),"validateTransformMatrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"mirror")
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"matrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal1
         pushbyte -1
         setproperty QName(PackageNamespace(""),"a")
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_x")
         getlex QName(PackageNamespace(""),"width")
         add
         setproperty QName(PackageNamespace(""),"tx")
         getlex QName(PackageNamespace(""),"transform")
         getlocal1
         setproperty QName(PackageNamespace(""),"matrix")
         jump ofs1
         ofs0:
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal2
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_x")
         setproperty QName(PackageNamespace(""),"tx")
         getlocal2
         getlex QName(PackageNamespace(""),"y")
         setproperty QName(PackageNamespace(""),"ty")
         getlex QName(PackageNamespace(""),"transform")
         getlocal2
         setproperty QName(PackageNamespace(""),"matrix")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getTextStyles() : TextFormat
      {
         trait method QName(PackageNamespace(""),"getTextStyles")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.text"),"TextFormat")
         
         body
         maxstack 4
         localcount 5
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.text"),"TextFormat")
         constructprop QName(PackageNamespace("flash.text"),"TextFormat"), 0
         coerce QName(PackageNamespace("flash.text"),"TextFormat")
         setlocal1
         getlocal0
         pushstring "textAlign"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         coerce_s
         setlocal2
         getlocal0
         pushstring "direction"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         coerce_s
         setlocal3
         getlocal2
         pushstring "start"
         ifne ofs0
         getlocal3
         pushstring "ltr"
         equals
         iffalse ofs1
         getlex QName(PackageNamespace("flash.text"),"TextFormatAlign")
         getproperty QName(PackageNamespace(""),"LEFT")
         coerce_s
         jump ofs2
         ofs1:
         getlex QName(PackageNamespace("flash.text"),"TextFormatAlign")
         getproperty QName(PackageNamespace(""),"RIGHT")
         coerce_s
         ofs2:
         coerce_s
         setlocal2
         jump ofs3
         ofs0:
         getlocal2
         pushstring "end"
         ifne ofs4
         getlocal3
         pushstring "ltr"
         equals
         iffalse ofs5
         getlex QName(PackageNamespace("flash.text"),"TextFormatAlign")
         getproperty QName(PackageNamespace(""),"RIGHT")
         coerce_s
         jump ofs6
         ofs5:
         getlex QName(PackageNamespace("flash.text"),"TextFormatAlign")
         getproperty QName(PackageNamespace(""),"LEFT")
         coerce_s
         ofs6:
         coerce_s
         setlocal2
         jump ofs3
         ofs4:
         getlocal2
         pushstring "justify"
         equals
         dup
         iffalse ofs7
         pop
         getlocal3
         pushstring "rtl"
         equals
         ofs7:
         iffalse ofs3
         getlex QName(PackageNamespace("flash.text"),"TextFormatAlign")
         getproperty QName(PackageNamespace(""),"RIGHT")
         coerce_s
         setlocal2
         ofs3:
         getlocal1
         getlocal2
         setproperty QName(PackageNamespace(""),"align")
         getlocal1
         getlocal0
         pushstring "fontWeight"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         pushstring "bold"
         equals
         setproperty QName(PackageNamespace(""),"bold")
         getlocal0
         getproperty QName(PackageNamespace(""),"enabled")
         iffalse ofs8
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"explicitColor")
         getlex QName(PackageNamespace("mx.styles"),"StyleManager")
         getproperty QName(PackageNamespace(""),"NOT_A_COLOR")
         ifne ofs9
         getlocal1
         getlocal0
         pushstring "color"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"color")
         jump ofs10
         ofs9:
         getlocal1
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"explicitColor")
         setproperty QName(PackageNamespace(""),"color")
         ofs10:
         jump ofs11
         ofs8:
         getlocal1
         getlocal0
         pushstring "disabledColor"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"color")
         ofs11:
         getlocal1
         getlex QName(PackageNamespace("mx.utils"),"StringUtil")
         getlocal0
         pushstring "fontFamily"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         pushstring ","
         callproperty QName(PackageNamespace(""),"trimArrayElements"), 2
         setproperty QName(PackageNamespace(""),"font")
         getlocal1
         getlocal0
         pushstring "textIndent"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"indent")
         getlocal1
         getlocal0
         pushstring "fontStyle"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         pushstring "italic"
         equals
         setproperty QName(PackageNamespace(""),"italic")
         getlocal0
         pushstring "kerning"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         coerce_a
         dup
         setlocal 4
         pushstring "auto"
         equals
         dup
         iftrue ofs12
         pop
         getlocal 4
         pushstring "on"
         equals
         ofs12:
         iffalse ofs13
         pushtrue
         coerce_a
         setlocal 4
         jump ofs14
         ofs13:
         getlocal 4
         pushstring "default"
         equals
         dup
         iftrue ofs15
         pop
         getlocal 4
         pushstring "off"
         equals
         ofs15:
         iffalse ofs14
         pushfalse
         coerce_a
         setlocal 4
         ofs14:
         getlocal1
         getlocal 4
         setproperty QName(PackageNamespace(""),"kerning")
         getlocal1
         getlocal0
         pushstring "leading"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"leading")
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"ignorePadding")
         iffalse ofs16
         pushbyte 0
         coerce QName(PackageNamespace(""),"Object")
         jump ofs17
         ofs16:
         getlocal0
         pushstring "paddingLeft"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         coerce QName(PackageNamespace(""),"Object")
         ofs17:
         setproperty QName(PackageNamespace(""),"leftMargin")
         getlocal1
         getlocal0
         pushstring "letterSpacing"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"letterSpacing")
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"ignorePadding")
         iffalse ofs18
         pushbyte 0
         coerce QName(PackageNamespace(""),"Object")
         jump ofs19
         ofs18:
         getlocal0
         pushstring "paddingRight"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         coerce QName(PackageNamespace(""),"Object")
         ofs19:
         setproperty QName(PackageNamespace(""),"rightMargin")
         getlocal1
         getlocal0
         pushstring "fontSize"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"size")
         getlocal1
         getlocal0
         pushstring "textDecoration"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         pushstring "underline"
         equals
         setproperty QName(PackageNamespace(""),"underline")
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"cachedTextFormat")
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setColor(param1:uint) : void
      {
         trait method QName(PackageNamespace(""),"setColor")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"uint")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"explicitColor")
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"styleChangedFlag")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateSize() : void
      {
         trait method QName(PackageNamespace(""),"invalidateSize")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateDisplayList() : void
      {
         trait method QName(PackageNamespace(""),"invalidateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#UITextField"),"invalidateDisplayListFlag")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateProperties() : void
      {
         trait method QName(PackageNamespace(""),"invalidateProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function truncateToFit(param1:String = null) : Boolean
      {
         trait method QName(PackageNamespace(""),"truncateToFit")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"String")
         optional Null()
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 6
         localcount 6
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         coerce_s
         setlocal 4
         getlocal1
         iftrue ofs0
         getlex QName(PrivateNamespace(null,"#UITextField"),"truncationIndicatorResource")
         coerce_s
         setlocal1
         ofs0:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateNow"), 0
         getlocal0
         getsuper QName(PackageNamespace(""),"text")
         coerce_s
         setlocal2
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#UITextField"),"untruncatedText")
         getlex QName(PackageNamespace(""),"width")
         convert_d
         setlocal3
         getlocal2
         pushstring ""
         equals
         not
         dup
         iffalse ofs1
         pop
         getlex QName(PackageNamespace(""),"textWidth")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_WIDTH_PADDING")
         add
         getlocal3
         pushdouble 1.0E-14
         add
         greaterthan
         ofs1:
         iffalse ofs2
         getlocal0
         getlocal2
         dup
         setlocal 5
         setsuper QName(PackageNamespace(""),"text")
         getlocal 5
         kill 5
         coerce_s
         setlocal 4
         getlocal2
         pushbyte 0
         getlex QName(PackageNamespace(""),"Math")
         getlocal3
         getlex QName(PackageNamespace(""),"textWidth")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_WIDTH_PADDING")
         add
         divide
         getlocal2
         getproperty QName(PackageNamespace(""),"length")
         multiply
         callproperty QName(PackageNamespace(""),"floor"), 1
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"slice"), 2
         jump ofs3
         ofs4:
         label
         getlocal 4
         pushbyte 0
         pushbyte -1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"slice"), 2
         coerce_s
         setlocal 4
         getlocal0
         getlocal 4
         getlocal1
         add
         setsuper QName(PackageNamespace(""),"text")
         ofs3:
         getlocal 4
         getproperty QName(PackageNamespace(""),"length")
         pushbyte 1
         greaterthan
         dup
         iffalse ofs5
         pop
         getlex QName(PackageNamespace(""),"textWidth")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"TEXT_WIDTH_PADDING")
         add
         getlocal3
         greaterthan
         ofs5:
         iftrue ofs4
         pushtrue
         returnvalue
         ofs2:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function changeHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#UITextField"),"changeHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         pushnull
         initproperty QName(PrivateNamespace(null,"#UITextField"),"explicitHTMLText")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function textFieldStyleChangeHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#UITextField"),"textFieldStyleChangeHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"explicitHTMLText")
         pushnull
         ifeq ofs0
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"explicitHTMLText")
         setsuper QName(PackageNamespace(""),"htmlText")
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function resourceManager_changeHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#UITextField"),"resourceManager_changeHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         findproperty QName(PrivateNamespace(null,"#UITextField"),"truncationIndicatorResource")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"resourceManager")
         pushstring "core"
         pushstring "truncationIndicator"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         setproperty QName(PrivateNamespace(null,"#UITextField"),"truncationIndicatorResource")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"untruncatedText")
         pushnull
         ifeq ofs0
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"untruncatedText")
         setsuper QName(PackageNamespace(""),"text")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"truncateToFit"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function owns(param1:DisplayObject) : Boolean
      {
         trait method QName(PackageNamespace(""),"owns")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         equals
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get owner() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"owner")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_owner")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#UITextField"),"_owner")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set owner(param1:DisplayObjectContainer) : void
      {
         trait setter QName(PackageNamespace(""),"owner")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#UITextField"),"_owner")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function creatingSystemManager() : ISystemManager
      {
         trait method QName(PrivateNamespace(null,"#UITextField"),"creatingSystemManager")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.managers"),"ISystemManager")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"moduleFactory")
         pushnull
         equals
         not
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"moduleFactory")
         getlex QName(PackageNamespace("mx.managers"),"ISystemManager")
         istypelate
         ofs0:
         iffalse ofs1
         findpropstrict QName(PackageNamespace("mx.managers"),"ISystemManager")
         getlocal0
         getproperty QName(PackageNamespace(""),"moduleFactory")
         callproperty QName(PackageNamespace("mx.managers"),"ISystemManager"), 1
         coerce QName(PackageNamespace("mx.managers"),"ISystemManager")
         jump ofs2
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"systemManager")
         coerce QName(PackageNamespace("mx.managers"),"ISystemManager")
         ofs2:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function replayAutomatableEvent(param1:Event) : Boolean
      {
         trait method QName(PackageNamespace(""),"replayAutomatableEvent")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"automationDelegate")
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"automationDelegate")
         getlocal1
         callproperty Multiname("replayAutomatableEvent",[PrivateNamespace(null,"#UITextField"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),PackageNamespace("mx.core"),PackageNamespace(""),PrivateNamespace(null,"#UITextField/1"),PackageInternalNs("mx.core"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("mx.core:UITextField"),StaticProtectedNs("mx.core:UITextField"),StaticProtectedNs("mx.core:FlexTextField"),StaticProtectedNs("flash.text:TextField"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")]), 1
         returnvalue
         ofs0:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function createAutomationIDPart(param1:IAutomationObject) : Object
      {
         trait method QName(PackageNamespace(""),"createAutomationIDPart")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.automation"),"IAutomationObject")
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function createAutomationIDPartWithRequiredProperties(param1:IAutomationObject, param2:Array) : Object
      {
         trait method QName(PackageNamespace(""),"createAutomationIDPartWithRequiredProperties")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.automation"),"IAutomationObject")
         param QName(PackageNamespace(""),"Array")
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function resolveAutomationIDPart(param1:Object) : Array
      {
         trait method QName(PackageNamespace(""),"resolveAutomationIDPart")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         newarray 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getAutomationChildAt(param1:int) : IAutomationObject
      {
         trait method QName(PackageNamespace(""),"getAutomationChildAt")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace("mx.automation"),"IAutomationObject")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getAutomationChildren() : Array
      {
         trait method QName(PackageNamespace(""),"getAutomationChildren")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get numAutomationChildren() : int
      {
         trait getter QName(PackageNamespace(""),"numAutomationChildren")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get showInAutomationHierarchy() : Boolean
      {
         trait getter QName(PackageNamespace(""),"showInAutomationHierarchy")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set showInAutomationHierarchy(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"showInAutomationHierarchy")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get automationTabularData() : Object
      {
         trait getter QName(PackageNamespace(""),"automationTabularData")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
