
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 4
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("EffectEvent",[PackageNamespace("mx.events")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"Event")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"Event")
   newclass #EffectEvent
   popscope
   popscope
   initproperty QName(PackageNamespace("mx.events"),"EffectEvent")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.events
{
   import flash.events.Event;
   import mx.core.mx_internal;
   import mx.effects.IEffectInstance;
   
   use namespace mx_internal;
   
   public class EffectEvent extends Event
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      public static const EFFECT_END:String = "effectEnd";
      
      public static const EFFECT_STOP:String = "effectStop";
      
      public static const EFFECT_START:String = "effectStart";
      
      public static const EFFECT_REPEAT:String = "effectRepeat";
      
      public static const EFFECT_UPDATE:String = "effectUpdate";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         findproperty QName(PackageNamespace(""),"EFFECT_END")
         pushstring "effectEnd"
         initproperty QName(PackageNamespace(""),"EFFECT_END")
         findproperty QName(PackageNamespace(""),"EFFECT_STOP")
         pushstring "effectStop"
         initproperty QName(PackageNamespace(""),"EFFECT_STOP")
         findproperty QName(PackageNamespace(""),"EFFECT_START")
         pushstring "effectStart"
         initproperty QName(PackageNamespace(""),"EFFECT_START")
         findproperty QName(PackageNamespace(""),"EFFECT_REPEAT")
         pushstring "effectRepeat"
         initproperty QName(PackageNamespace(""),"EFFECT_REPEAT")
         findproperty QName(PackageNamespace(""),"EFFECT_UPDATE")
         pushstring "effectUpdate"
         initproperty QName(PackageNamespace(""),"EFFECT_UPDATE")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var effectInstance:IEffectInstance;
      
      public function EffectEvent(param1:String, param2:Boolean = false, param3:Boolean = false, param4:IEffectInstance = null)
      {
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace("mx.effects"),"IEffectInstance")
         optional False()
         optional False()
         optional Null()
         returns null
         
         body
         maxstack 4
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         constructsuper 3
         getlocal0
         getlocal 4
         initproperty QName(PackageNamespace(""),"effectInstance")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function clone() : Event
      {
         trait method QName(PackageNamespace(""),"clone")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.events"),"Event")
         
         body
         maxstack 5
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("mx.events"),"EffectEvent")
         getlex QName(PackageNamespace(""),"type")
         getlex QName(PackageNamespace(""),"bubbles")
         getlex QName(PackageNamespace(""),"cancelable")
         getlocal0
         getproperty QName(PackageNamespace(""),"effectInstance")
         constructprop QName(PackageNamespace("mx.events"),"EffectEvent"), 4
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
