
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 4
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("FlexEvent",[PackageNamespace("mx.events")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"Event")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"Event")
   newclass #FlexEvent
   popscope
   popscope
   initproperty QName(PackageNamespace("mx.events"),"FlexEvent")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package mx.events
{
   import flash.events.Event;
   import mx.core.mx_internal;
   
   use namespace mx_internal;
   
   public class FlexEvent extends Event
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      public static const ADD:String = "add";
      
      public static const ADD_FOCUS_MANAGER:String = "addFocusManager";
      
      public static const APPLICATION_COMPLETE:String = "applicationComplete";
      
      public static const BUTTON_DOWN:String = "buttonDown";
      
      public static const CHANGE_END:String = "changeEnd";
      
      public static const CHANGE_START:String = "changeStart";
      
      public static const CHANGING:String = "changing";
      
      public static const CREATION_COMPLETE:String = "creationComplete";
      
      public static const CONTENT_CREATION_COMPLETE:String = "contentCreationComplete";
      
      public static const CURSOR_UPDATE:String = "cursorUpdate";
      
      public static const DATA_CHANGE:String = "dataChange";
      
      public static const ENTER:String = "enter";
      
      public static const ENTER_FRAME:String = "flexEventEnterFrame";
      
      public static const ENTER_STATE:String = "enterState";
      
      public static const EXIT_STATE:String = "exitState";
      
      public static const FLEX_WINDOW_ACTIVATE:String = "flexWindowActivate";
      
      public static const FLEX_WINDOW_DEACTIVATE:String = "flexWindowDeactivate";
      
      public static const HIDE:String = "hide";
      
      public static const IDLE:String = "idle";
      
      public static const INIT_COMPLETE:String = "initComplete";
      
      public static const INIT_PROGRESS:String = "initProgress";
      
      public static const INITIALIZE:String = "initialize";
      
      public static const INVALID:String = "invalid";
      
      public static const LOADING:String = "loading";
      
      public static const MUTED_CHANGE:String = "mutedChange";
      
      public static const NEW_CHILD_APPLICATION:String = "newChildApplication";
      
      public static const PREINITIALIZE:String = "preinitialize";
      
      public static const PRELOADER_DONE:String = "preloaderDone";
      
      public static const PRELOADER_DOC_FRAME_READY:String = "preloaderDocFrameReady";
      
      public static const RENDER:String = "flexEventRender";
      
      public static const REMOVE:String = "remove";
      
      public static const REPEAT:String = "repeat";
      
      public static const REPEAT_END:String = "repeatEnd";
      
      public static const REPEAT_START:String = "repeatStart";
      
      public static const SELECTION_CHANGE:String = "selectionChange";
      
      public static const SHOW:String = "show";
      
      public static const TRANSFORM_CHANGE:String = "transformChange";
      
      public static const UPDATE_COMPLETE:String = "updateComplete";
      
      public static const URL_CHANGED:String = "urlChanged";
      
      public static const VALID:String = "valid";
      
      public static const VALUE_COMMIT:String = "valueCommit";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         findproperty QName(PackageNamespace(""),"ADD")
         pushstring "add"
         initproperty QName(PackageNamespace(""),"ADD")
         findproperty QName(PackageNamespace(""),"ADD_FOCUS_MANAGER")
         pushstring "addFocusManager"
         initproperty QName(PackageNamespace(""),"ADD_FOCUS_MANAGER")
         findproperty QName(PackageNamespace(""),"APPLICATION_COMPLETE")
         pushstring "applicationComplete"
         initproperty QName(PackageNamespace(""),"APPLICATION_COMPLETE")
         findproperty QName(PackageNamespace(""),"BUTTON_DOWN")
         pushstring "buttonDown"
         initproperty QName(PackageNamespace(""),"BUTTON_DOWN")
         findproperty QName(PackageNamespace(""),"CHANGE_END")
         pushstring "changeEnd"
         initproperty QName(PackageNamespace(""),"CHANGE_END")
         findproperty QName(PackageNamespace(""),"CHANGE_START")
         pushstring "changeStart"
         initproperty QName(PackageNamespace(""),"CHANGE_START")
         findproperty QName(PackageNamespace(""),"CHANGING")
         pushstring "changing"
         initproperty QName(PackageNamespace(""),"CHANGING")
         findproperty QName(PackageNamespace(""),"CREATION_COMPLETE")
         pushstring "creationComplete"
         initproperty QName(PackageNamespace(""),"CREATION_COMPLETE")
         findproperty QName(PackageNamespace(""),"CONTENT_CREATION_COMPLETE")
         pushstring "contentCreationComplete"
         initproperty QName(PackageNamespace(""),"CONTENT_CREATION_COMPLETE")
         findproperty QName(PackageNamespace(""),"CURSOR_UPDATE")
         pushstring "cursorUpdate"
         initproperty QName(PackageNamespace(""),"CURSOR_UPDATE")
         findproperty QName(PackageNamespace(""),"DATA_CHANGE")
         pushstring "dataChange"
         initproperty QName(PackageNamespace(""),"DATA_CHANGE")
         findproperty QName(PackageNamespace(""),"ENTER")
         pushstring "enter"
         initproperty QName(PackageNamespace(""),"ENTER")
         findproperty QName(PackageNamespace(""),"ENTER_FRAME")
         pushstring "flexEventEnterFrame"
         initproperty QName(PackageNamespace(""),"ENTER_FRAME")
         findproperty QName(PackageNamespace(""),"ENTER_STATE")
         pushstring "enterState"
         initproperty QName(PackageNamespace(""),"ENTER_STATE")
         findproperty QName(PackageNamespace(""),"EXIT_STATE")
         pushstring "exitState"
         initproperty QName(PackageNamespace(""),"EXIT_STATE")
         findproperty QName(PackageNamespace(""),"FLEX_WINDOW_ACTIVATE")
         pushstring "flexWindowActivate"
         initproperty QName(PackageNamespace(""),"FLEX_WINDOW_ACTIVATE")
         findproperty QName(PackageNamespace(""),"FLEX_WINDOW_DEACTIVATE")
         pushstring "flexWindowDeactivate"
         initproperty QName(PackageNamespace(""),"FLEX_WINDOW_DEACTIVATE")
         findproperty QName(PackageNamespace(""),"HIDE")
         pushstring "hide"
         initproperty QName(PackageNamespace(""),"HIDE")
         findproperty QName(PackageNamespace(""),"IDLE")
         pushstring "idle"
         initproperty QName(PackageNamespace(""),"IDLE")
         findproperty QName(PackageNamespace(""),"INIT_COMPLETE")
         pushstring "initComplete"
         initproperty QName(PackageNamespace(""),"INIT_COMPLETE")
         findproperty QName(PackageNamespace(""),"INIT_PROGRESS")
         pushstring "initProgress"
         initproperty QName(PackageNamespace(""),"INIT_PROGRESS")
         findproperty QName(PackageNamespace(""),"INITIALIZE")
         pushstring "initialize"
         initproperty QName(PackageNamespace(""),"INITIALIZE")
         findproperty QName(PackageNamespace(""),"INVALID")
         pushstring "invalid"
         initproperty QName(PackageNamespace(""),"INVALID")
         findproperty QName(PackageNamespace(""),"LOADING")
         pushstring "loading"
         initproperty QName(PackageNamespace(""),"LOADING")
         findproperty QName(PackageNamespace(""),"MUTED_CHANGE")
         pushstring "mutedChange"
         initproperty QName(PackageNamespace(""),"MUTED_CHANGE")
         findproperty QName(PackageNamespace(""),"NEW_CHILD_APPLICATION")
         pushstring "newChildApplication"
         initproperty QName(PackageNamespace(""),"NEW_CHILD_APPLICATION")
         findproperty QName(PackageNamespace(""),"PREINITIALIZE")
         pushstring "preinitialize"
         initproperty QName(PackageNamespace(""),"PREINITIALIZE")
         findproperty QName(PackageNamespace(""),"PRELOADER_DONE")
         pushstring "preloaderDone"
         initproperty QName(PackageNamespace(""),"PRELOADER_DONE")
         findproperty QName(PackageNamespace(""),"PRELOADER_DOC_FRAME_READY")
         pushstring "preloaderDocFrameReady"
         initproperty QName(PackageNamespace(""),"PRELOADER_DOC_FRAME_READY")
         findproperty QName(PackageNamespace(""),"RENDER")
         pushstring "flexEventRender"
         initproperty QName(PackageNamespace(""),"RENDER")
         findproperty QName(PackageNamespace(""),"REMOVE")
         pushstring "remove"
         initproperty QName(PackageNamespace(""),"REMOVE")
         findproperty QName(PackageNamespace(""),"REPEAT")
         pushstring "repeat"
         initproperty QName(PackageNamespace(""),"REPEAT")
         findproperty QName(PackageNamespace(""),"REPEAT_END")
         pushstring "repeatEnd"
         initproperty QName(PackageNamespace(""),"REPEAT_END")
         findproperty QName(PackageNamespace(""),"REPEAT_START")
         pushstring "repeatStart"
         initproperty QName(PackageNamespace(""),"REPEAT_START")
         findproperty QName(PackageNamespace(""),"SELECTION_CHANGE")
         pushstring "selectionChange"
         initproperty QName(PackageNamespace(""),"SELECTION_CHANGE")
         findproperty QName(PackageNamespace(""),"SHOW")
         pushstring "show"
         initproperty QName(PackageNamespace(""),"SHOW")
         findproperty QName(PackageNamespace(""),"TRANSFORM_CHANGE")
         pushstring "transformChange"
         initproperty QName(PackageNamespace(""),"TRANSFORM_CHANGE")
         findproperty QName(PackageNamespace(""),"UPDATE_COMPLETE")
         pushstring "updateComplete"
         initproperty QName(PackageNamespace(""),"UPDATE_COMPLETE")
         findproperty QName(PackageNamespace(""),"URL_CHANGED")
         pushstring "urlChanged"
         initproperty QName(PackageNamespace(""),"URL_CHANGED")
         findproperty QName(PackageNamespace(""),"VALID")
         pushstring "valid"
         initproperty QName(PackageNamespace(""),"VALID")
         findproperty QName(PackageNamespace(""),"VALUE_COMMIT")
         pushstring "valueCommit"
         initproperty QName(PackageNamespace(""),"VALUE_COMMIT")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function FlexEvent(param1:String, param2:Boolean = false, param3:Boolean = false)
      {
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"Boolean")
         optional False()
         optional False()
         returns null
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         constructsuper 3
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function clone() : Event
      {
         trait method QName(PackageNamespace(""),"clone")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.events"),"Event")
         
         body
         maxstack 4
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("mx.events"),"FlexEvent")
         getlex QName(PackageNamespace(""),"type")
         getlex QName(PackageNamespace(""),"bubbles")
         getlex QName(PackageNamespace(""),"cancelable")
         constructprop QName(PackageNamespace("mx.events"),"FlexEvent"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
