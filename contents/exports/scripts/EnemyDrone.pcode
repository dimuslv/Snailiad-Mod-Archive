
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 8
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("EnemyDrone",[PackageNamespace("")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxPoint")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxRect")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxObject")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxSprite")
   pushscope
   getlex QName(PackageNamespace(""),"Enemy")
   pushscope
   getlex QName(PackageNamespace(""),"Enemy")
   newclass #EnemyDrone
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace(""),"EnemyDrone")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package
{
   import org.flixel.FlxG;
   
   public class EnemyDrone extends Enemy
   {
      
      private static const IMG_WIDTH:int = 24;
      
      private static const IMG_HEIGHT:int = 29;
      
      private static const IMG_OFS_X:int = 0;
      
      private static const IMG_OFS_Y:int = 0;
      
      private static const MAX_HP:int = 1850;
      
      private static const DEFENSE:int = 10;
      
      private static const OFFENSE:int = 4;
      
      private static const MODE_WAIT:int = 0;
      
      private static const MODE_COS_UP_LEFT:int = 1;
      
      private static const MODE_COS_DOWN_LEFT:int = 2;
      
      private static const MODE_COS_UP_RIGHT:int = 3;
      
      private static const MODE_COS_DOWN_RIGHT:int = 4;
      
      private static const MODE_SEMICIRCLE_LEFT_UP:int = 5;
      
      private static const MODE_SEMICIRCLE_LEFT_DOWN:int = 6;
      
      private static const MODE_SEMICIRCLE_RIGHT_UP:int = 7;
      
      private static const MODE_SEMICIRCLE_RIGHT_DOWN:int = 8;
      
      private static const MODE_ATTACK:int = 9;
      
      private static const SHOT_TIMEOUT:Number = 0.08;
      
      private static const SHOT_SPEED:Number = 700;
      
      private static const SHOT_NUM:int = 4;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_WIDTH")
         pushbyte 24
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_WIDTH")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_HEIGHT")
         pushbyte 29
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_HEIGHT")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_OFS_X")
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_OFS_X")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_OFS_Y")
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_OFS_Y")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MAX_HP")
         pushshort 1850
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MAX_HP")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"DEFENSE")
         pushbyte 10
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"DEFENSE")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"OFFENSE")
         pushbyte 4
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"OFFENSE")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_WAIT")
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_WAIT")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_LEFT")
         pushbyte 1
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_LEFT")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_LEFT")
         pushbyte 2
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_LEFT")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_RIGHT")
         pushbyte 3
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_RIGHT")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_RIGHT")
         pushbyte 4
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_RIGHT")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_UP")
         pushbyte 5
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_UP")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_DOWN")
         pushbyte 6
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_DOWN")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_UP")
         pushbyte 7
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_UP")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_DOWN")
         pushbyte 8
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_DOWN")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_ATTACK")
         pushbyte 9
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_ATTACK")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_TIMEOUT")
         pushdouble 0.08
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_TIMEOUT")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_SPEED")
         pushshort 700
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_SPEED")
         findproperty QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_NUM")
         pushbyte 4
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_NUM")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var mode:int = 0;
      
      private var originX:Number;
      
      private var originY:Number;
      
      private var theta:Number = 0;
      
      private var elapsed:Number = 0;
      
      private var X_RADIUS:Number = 130;
      
      private var Y_RADIUS:Number = 40;
      
      private var MOVE_TIME:Number = 2.2;
      
      private var shotTimeout:Number = 0;
      
      private var shotNum:int = 0;
      
      public function EnemyDrone(param1:int, param2:int)
      {
         method
         name null
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 7
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         convert_b
         dup
         iffalse ofs0
         pop
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"_insaneMode")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal0
         pushdouble 1.3
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MOVE_TIME")
         getlocal0
         pushbyte 110
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"X_RADIUS")
         getlocal0
         pushbyte 60
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         jump ofs2
         ofs1:
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         convert_b
         dup
         iffalse ofs3
         pop
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"_hardMode")
         convert_b
         ofs3:
         iffalse ofs2
         getlocal0
         pushdouble 1.6
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MOVE_TIME")
         getlocal0
         pushbyte 100
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"X_RADIUS")
         getlocal0
         pushbyte 50
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         ofs2:
         getlocal0
         getlocal1
         getlocal2
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MAX_HP")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"DEFENSE")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"OFFENSE")
         pushtrue
         constructsuper 6
         findpropstrict QName(PackageNamespace(""),"loadGraphic")
         getlex QName(PackageNamespace(""),"Art")
         getproperty QName(PackageNamespace(""),"EnemyDrone")
         pushtrue
         pushtrue
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_WIDTH")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_HEIGHT")
         callpropvoid QName(PackageNamespace(""),"loadGraphic"), 5
         findproperty QName(PackageNamespace(""),"width")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_WIDTH")
         initproperty QName(PackageNamespace(""),"width")
         findproperty QName(PackageNamespace(""),"height")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_HEIGHT")
         initproperty QName(PackageNamespace(""),"height")
         getlocal1
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_OFS_X")
         subtract
         convert_i
         setlocal1
         getlocal2
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"IMG_OFS_Y")
         subtract
         convert_i
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MOVE_TIME")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         findpropstrict QName(PackageNamespace(""),"addAnimation")
         pushstring "normal"
         pushbyte 0
         pushbyte 1
         newarray 2
         pushbyte 18
         pushtrue
         callpropvoid QName(PackageNamespace(""),"addAnimation"), 4
         findpropstrict QName(PackageNamespace(""),"play")
         pushstring "normal"
         callpropvoid QName(PackageNamespace(""),"play"), 1
         findproperty QName(PackageNamespace(""),"active")
         pushtrue
         initproperty QName(PackageNamespace(""),"active")
         findproperty QName(PackageNamespace(""),"visible")
         pushtrue
         initproperty QName(PackageNamespace(""),"visible")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function normalizedSigmoid(param1:Number) : Number
      {
         trait method QName(PrivateNamespace(null,"#EnemyDrone"),"normalizedSigmoid")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushbyte 1
         dup
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         pushbyte 12
         multiply
         pushbyte 6
         subtract
         negate
         callproperty QName(PackageNamespace(""),"exp"), 1
         add
         divide
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function touch(param1:Player) : void
      {
         trait method QName(PackageNamespace(""),"touch")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Player")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callsupervoid QName(PackageNamespace(""),"touch"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function updatePosition() : void
      {
         trait method QName(PackageNamespace(""),"updatePosition")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 7
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_WAIT")
         equals
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_ATTACK")
         equals
         ofs0:
         iffalse ofs1
         returnvoid
         ofs1:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MOVE_TIME")
         divide
         callproperty QName(PrivateNamespace(null,"#EnemyDrone"),"normalizedSigmoid"), 1
         convert_d
         setlocal1
         jump ofs2
         ofs3:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"X_RADIUS")
         getlocal1
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs5:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"X_RADIUS")
         getlocal1
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         add
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs6:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"X_RADIUS")
         getlocal1
         multiply
         add
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs7:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"X_RADIUS")
         getlocal1
         multiply
         add
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         add
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs8:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"sin"), 1
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs9:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"sin"), 1
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         add
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs10:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"sin"), 1
         multiply
         add
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         subtract
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs11:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"sin"), 1
         multiply
         add
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"Y_RADIUS")
         pushbyte 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         multiply
         callproperty QName(PackageNamespace(""),"cos"), 1
         subtract
         multiply
         add
         initproperty QName(PackageNamespace(""),"y")
         jump ofs4
         ofs12:
         label
         jump ofs4
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         setlocal2
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_LEFT")
         getlocal2
         ifstrictne ofs13
         pushbyte 0
         jump ofs14
         ofs13:
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_LEFT")
         getlocal2
         ifstrictne ofs15
         pushbyte 1
         jump ofs14
         ofs15:
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_RIGHT")
         getlocal2
         ifstrictne ofs16
         pushbyte 2
         jump ofs14
         ofs16:
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_RIGHT")
         getlocal2
         ifstrictne ofs17
         pushbyte 3
         jump ofs14
         ofs17:
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_UP")
         getlocal2
         ifstrictne ofs18
         pushbyte 4
         jump ofs14
         ofs18:
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_DOWN")
         getlocal2
         ifstrictne ofs19
         pushbyte 5
         jump ofs14
         ofs19:
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_UP")
         getlocal2
         ifstrictne ofs20
         pushbyte 6
         jump ofs14
         ofs20:
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_DOWN")
         getlocal2
         ifstrictne ofs21
         pushbyte 7
         jump ofs14
         ofs21:
         jump ofs22
         pushbyte 8
         jump ofs22
         ofs22:
         pushbyte 8
         ofs14:
         kill 2
         lookupswitch ofs12, [ofs3, ofs5, ofs6, ofs7, ofs8, ofs9, ofs10, ofs11, ofs12]
         ofs4:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function shoot() : void
      {
         trait method QName(PackageNamespace(""),"shoot")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 2
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace(""),"EnemyBullet")
         setlocal1
         getlex QName(PackageNamespace(""),"facing")
         getlex QName(PackageNamespace(""),"RIGHT")
         ifne ofs0
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"enemyBulletPool")
         pushbyte 5
         callproperty QName(PackageNamespace(""),"getBullet"), 1
         coerce QName(PackageNamespace(""),"EnemyBullet")
         setlocal1
         getlocal1
         iffalse ofs1
         getlocal1
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         add
         getlex QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"height")
         pushbyte 2
         divide
         add
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_SPEED")
         pushbyte 0
         callpropvoid QName(PackageNamespace(""),"shoot"), 4
         ofs1:
         jump ofs2
         ofs0:
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"enemyBulletPool")
         pushbyte 5
         callproperty QName(PackageNamespace(""),"getBullet"), 1
         coerce QName(PackageNamespace(""),"EnemyBullet")
         setlocal1
         getlocal1
         iffalse ofs2
         getlocal1
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         add
         getlex QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"height")
         pushbyte 2
         divide
         add
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_SPEED")
         negate
         pushbyte 0
         callpropvoid QName(PackageNamespace(""),"shoot"), 4
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function shootDonuts() : void
      {
         trait method QName(PackageNamespace(""),"shootDonuts")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 7
         localcount 4
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace(""),"EnemyBulletRotaryPea")
         setlocal3
         pushbyte 3
         setlocal1
         getlex QName(PackageNamespace(""),"Sfx")
         callpropvoid QName(PackageNamespace(""),"playShot7"), 0
         pushbyte 0
         setlocal2
         jump ofs0
         ofs1:
         label
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"enemyBulletPool")
         pushbyte 7
         callproperty QName(PackageNamespace(""),"getBullet"), 1
         getlex QName(PackageNamespace(""),"EnemyBulletRotaryPea")
         astypelate
         coerce QName(PackageNamespace(""),"EnemyBulletRotaryPea")
         setlocal3
         getlocal3
         iffalse ofs2
         getlocal3
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         add
         getlex QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"height")
         pushbyte 2
         divide
         add
         pushbyte 60
         pushbyte 4
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         pushbyte 2
         multiply
         getlocal1
         divide
         getlocal2
         multiply
         callpropvoid QName(PackageNamespace(""),"shootRotary"), 5
         ofs2:
         inclocal_i 2
         ofs0:
         getlocal2
         getlocal1
         iflt ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function update() : void
      {
         trait method QName(PackageNamespace(""),"update")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 9
         maxscopedepth 10
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"realState")
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"STATE_GAME")
         ifeq ofs0
         returnvoid
         ofs0:
         findpropstrict QName(PackageNamespace(""),"onScreen")
         callproperty QName(PackageNamespace(""),"onScreen"), 0
         iffalse ofs1
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"x")
         ifnlt ofs2
         findproperty QName(PackageNamespace(""),"facing")
         getlex QName(PackageNamespace(""),"LEFT")
         initproperty QName(PackageNamespace(""),"facing")
         jump ofs3
         ofs2:
         findproperty QName(PackageNamespace(""),"facing")
         getlex QName(PackageNamespace(""),"RIGHT")
         initproperty QName(PackageNamespace(""),"facing")
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_ATTACK")
         ifne ofs4
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotTimeout")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         subtract
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotTimeout")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotTimeout")
         pushbyte 0
         ifnle ofs5
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_TIMEOUT")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotTimeout")
         getlocal0
         dup
         setlocal1
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotNum")
         decrement_i
         setlocal2
         getlocal1
         getlocal2
         setproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotNum")
         kill 2
         kill 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotNum")
         pushbyte 0
         ifnle ofs6
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_WAIT")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"shootDonuts"), 0
         ofs6:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"shoot"), 0
         ofs5:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         add
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         jump ofs1
         ofs4:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         add
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"updatePosition"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"MOVE_TIME")
         greaterequals
         dup
         iffalse ofs7
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_WAIT")
         equals
         not
         ofs7:
         iffalse ofs8
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_ATTACK")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"SHOT_NUM")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"shotNum")
         jump ofs1
         ofs8:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_WAIT")
         ifne ofs1
         getlocal0
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"elapsed")
         getlocal0
         getlex QName(PackageNamespace(""),"x")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originX")
         getlocal0
         getlex QName(PackageNamespace(""),"y")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"originY")
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"x")
         ifnlt ofs9
         getlex QName(PackageNamespace(""),"facing")
         getlex QName(PackageNamespace(""),"LEFT")
         ifne ofs10
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"y")
         ifnlt ofs11
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_LEFT")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         jump ofs12
         ofs11:
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_LEFT")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         ofs12:
         jump ofs13
         ofs10:
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"y")
         ifnlt ofs14
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_UP")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         jump ofs13
         ofs14:
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_RIGHT_DOWN")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         ofs13:
         jump ofs1
         ofs9:
         getlex QName(PackageNamespace(""),"facing")
         getlex QName(PackageNamespace(""),"RIGHT")
         ifne ofs15
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"y")
         ifnlt ofs16
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_UP_RIGHT")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         jump ofs17
         ofs16:
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_COS_DOWN_RIGHT")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         ofs17:
         jump ofs1
         ofs15:
         getlex QName(PackageNamespace(""),"PlayState")
         getproperty QName(PackageNamespace(""),"player")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"y")
         ifnlt ofs18
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_UP")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         jump ofs1
         ofs18:
         getlocal0
         getlex QName(PrivateNamespace(null,"#EnemyDrone"),"MODE_SEMICIRCLE_LEFT_DOWN")
         initproperty QName(PrivateNamespace(null,"#EnemyDrone"),"mode")
         ofs1:
         getlocal0
         callsupervoid QName(PackageNamespace(""),"update"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
