
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 7
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("StarInward",[PackageNamespace("")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxPoint")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxRect")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxObject")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxSprite")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxSprite")
   newclass #StarInward
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace(""),"StarInward")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package
{
   import org.flixel.FlxG;
   import org.flixel.FlxSprite;
   import org.flixel.FlxU;
   
   public class StarInward extends FlxSprite
   {
      
      private static const IMG_WIDTH:int = 16;
      
      private static const IMG_HEIGHT:int = 16;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal0
         pushscope
         findproperty QName(PrivateNamespace(null,"#StarInward"),"IMG_WIDTH")
         pushbyte 16
         initproperty QName(PrivateNamespace(null,"#StarInward"),"IMG_WIDTH")
         findproperty QName(PrivateNamespace(null,"#StarInward"),"IMG_HEIGHT")
         pushbyte 16
         initproperty QName(PrivateNamespace(null,"#StarInward"),"IMG_HEIGHT")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function StarInward()
      {
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         findpropstrict QName(PackageNamespace(""),"loadGraphic")
         getlex QName(PackageNamespace(""),"Art")
         getproperty QName(PackageNamespace(""),"Star")
         pushtrue
         pushtrue
         getlex QName(PrivateNamespace(null,"#StarInward"),"IMG_WIDTH")
         getlex QName(PrivateNamespace(null,"#StarInward"),"IMG_HEIGHT")
         callpropvoid QName(PackageNamespace(""),"loadGraphic"), 5
         findproperty QName(PackageNamespace(""),"width")
         getlex QName(PrivateNamespace(null,"#StarInward"),"IMG_WIDTH")
         initproperty QName(PackageNamespace(""),"width")
         findproperty QName(PackageNamespace(""),"height")
         getlex QName(PrivateNamespace(null,"#StarInward"),"IMG_HEIGHT")
         initproperty QName(PackageNamespace(""),"height")
         findpropstrict QName(PackageNamespace(""),"addAnimation")
         pushstring "normal"
         getlex QName(PackageNamespace(""),"int")
         getglobalscope
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         pushbyte 32
         multiply
         call 1
         newarray 1
         callpropvoid QName(PackageNamespace(""),"addAnimation"), 2
         findpropstrict QName(PackageNamespace(""),"play")
         pushstring "normal"
         callpropvoid QName(PackageNamespace(""),"play"), 1
         getlex QName(PackageNamespace(""),"scrollFactor")
         getlex QName(PackageNamespace(""),"scrollFactor")
         pushbyte 0
         dup
         setlocal1
         setproperty QName(PackageNamespace(""),"y")
         getlocal1
         kill 1
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"placeRandom"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function placeRandom() : void
      {
         trait method QName(PackageNamespace(""),"placeRandom")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 6
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal3
         pushnan
         setlocal 4
         jump ofs0
         ofs1:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         multiply
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"height")
         negate
         initproperty QName(PackageNamespace(""),"y")
         jump ofs2
         ofs3:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         multiply
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         initproperty QName(PackageNamespace(""),"y")
         jump ofs2
         ofs4:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"width")
         negate
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         multiply
         initproperty QName(PackageNamespace(""),"y")
         jump ofs2
         ofs5:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         multiply
         initproperty QName(PackageNamespace(""),"y")
         jump ofs2
         ofs6:
         label
         jump ofs2
         ofs0:
         findpropstrict QName(PackageNamespace(""),"int")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         pushbyte 4
         multiply
         callproperty QName(PackageNamespace(""),"int"), 1
         setlocal 5
         pushbyte 0
         getlocal 5
         ifstrictne ofs7
         pushbyte 0
         jump ofs8
         ofs7:
         pushbyte 1
         getlocal 5
         ifstrictne ofs9
         pushbyte 1
         jump ofs8
         ofs9:
         pushbyte 2
         getlocal 5
         ifstrictne ofs10
         pushbyte 2
         jump ofs8
         ofs10:
         pushbyte 3
         getlocal 5
         ifstrictne ofs11
         pushbyte 3
         jump ofs8
         ofs11:
         jump ofs12
         pushbyte 4
         jump ofs12
         ofs12:
         pushbyte 4
         ofs8:
         kill 5
         lookupswitch ofs6, [ofs1, ofs3, ofs4, ofs5, ofs6]
         ofs2:
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         convert_i
         setlocal1
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         pushbyte 2
         divide
         convert_i
         setlocal2
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         getlex QName(PackageNamespace(""),"y")
         subtract
         getlocal1
         getlex QName(PackageNamespace(""),"x")
         subtract
         callproperty QName(PackageNamespace(""),"atan2"), 2
         convert_d
         setlocal3
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         pushbyte 120
         multiply
         pushbyte 60
         add
         convert_d
         setlocal 4
         getlex QName(PackageNamespace(""),"velocity")
         getlocal 4
         getlex QName(PackageNamespace(""),"Math")
         getlocal3
         callproperty QName(PackageNamespace(""),"cos"), 1
         multiply
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"velocity")
         getlocal 4
         getlex QName(PackageNamespace(""),"Math")
         getlocal3
         callproperty QName(PackageNamespace(""),"sin"), 1
         multiply
         setproperty QName(PackageNamespace(""),"y")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function update() : void
      {
         trait method QName(PackageNamespace(""),"update")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         lessthan
         dup
         iffalse ofs0
         pop
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         getlex QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         add
         lessthan
         ofs0:
         iffalse ofs1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"placeRandom"), 0
         ofs1:
         getlex QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         greaterthan
         dup
         iffalse ofs2
         pop
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         getlex QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         subtract
         greaterthan
         ofs2:
         iffalse ofs3
         getlocal0
         callpropvoid QName(PackageNamespace(""),"placeRandom"), 0
         ofs3:
         getlocal0
         callsupervoid QName(PackageNamespace(""),"update"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
