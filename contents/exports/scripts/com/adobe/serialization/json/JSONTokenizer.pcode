
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("JSONTokenizer",[PackageNamespace("com.adobe.serialization.json")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #JSONTokenizer
   popscope
   initproperty QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenizer")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package com.adobe.serialization.json
{
   public class JSONTokenizer
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var obj:Object;
      
      private var jsonString:String;
      
      private var loc:int;
      
      private var ch:String;
      
      public function JSONTokenizer(param1:String)
      {
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns null
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         getlocal0
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getNextToken() : JSONToken
      {
         trait method QName(PackageNamespace(""),"getNextToken")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         
         body
         maxstack 3
         localcount 6
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce_s
         setlocal2
         pushnull
         coerce_s
         setlocal3
         pushnull
         coerce_s
         setlocal 4
         findpropstrict QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         constructprop QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken"), 0
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"skipIgnored"), 0
         jump ofs0
         ofs1:
         label
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"LEFT_BRACE")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushstring "{"
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs3:
         label
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"RIGHT_BRACE")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushstring "}"
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs4:
         label
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"LEFT_BRACKET")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushstring "["
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs5:
         label
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"RIGHT_BRACKET")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushstring "]"
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs6:
         label
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"COMMA")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushstring ","
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs7:
         label
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"COLON")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushstring ":"
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs8:
         label
         pushstring "t"
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         coerce_s
         setlocal2
         getlocal2
         pushstring "true"
         ifne ofs9
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"TRUE")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushtrue
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs10
         ofs9:
         getlocal0
         pushstring "Expecting \'true\' but found "
         getlocal2
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs10:
         jump ofs2
         ofs11:
         label
         pushstring "f"
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         coerce_s
         setlocal3
         getlocal3
         pushstring "false"
         ifne ofs12
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"FALSE")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushfalse
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs13
         ofs12:
         getlocal0
         pushstring "Expecting \'false\' but found "
         getlocal3
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs13:
         jump ofs2
         ofs14:
         label
         pushstring "n"
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         coerce_s
         dup
         setlocal 4
         pushstring "null"
         ifne ofs15
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"NULL")
         setproperty QName(PackageNamespace(""),"type")
         getlocal1
         pushnull
         setproperty QName(PackageNamespace(""),"value")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs16
         ofs15:
         getlocal0
         pushstring "Expecting \'null\' but found "
         getlocal 4
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs16:
         jump ofs2
         ofs17:
         label
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"readString"), 0
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         jump ofs2
         ofs18:
         label
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         convert_b
         dup
         iftrue ofs19
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "-"
         equals
         ofs19:
         iffalse ofs20
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"readNumber"), 0
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         jump ofs21
         ofs20:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         ifne ofs22
         pushnull
         returnvalue
         ofs22:
         getlocal0
         pushstring "Unexpected "
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         pushstring " encountered"
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs21:
         jump ofs2
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         setlocal 5
         pushstring "{"
         getlocal 5
         ifstrictne ofs23
         pushbyte 0
         jump ofs24
         ofs23:
         pushstring "}"
         getlocal 5
         ifstrictne ofs25
         pushbyte 1
         jump ofs24
         ofs25:
         pushstring "["
         getlocal 5
         ifstrictne ofs26
         pushbyte 2
         jump ofs24
         ofs26:
         pushstring "]"
         getlocal 5
         ifstrictne ofs27
         pushbyte 3
         jump ofs24
         ofs27:
         pushstring ","
         getlocal 5
         ifstrictne ofs28
         pushbyte 4
         jump ofs24
         ofs28:
         pushstring ":"
         getlocal 5
         ifstrictne ofs29
         pushbyte 5
         jump ofs24
         ofs29:
         pushstring "t"
         getlocal 5
         ifstrictne ofs30
         pushbyte 6
         jump ofs24
         ofs30:
         pushstring "f"
         getlocal 5
         ifstrictne ofs31
         pushbyte 7
         jump ofs24
         ofs31:
         pushstring "n"
         getlocal 5
         ifstrictne ofs32
         pushbyte 8
         jump ofs24
         ofs32:
         pushstring "\""
         getlocal 5
         ifstrictne ofs33
         pushbyte 9
         jump ofs24
         ofs33:
         jump ofs34
         pushbyte 10
         jump ofs34
         ofs34:
         pushbyte 10
         ofs24:
         kill 5
         lookupswitch ofs18, [ofs1, ofs3, ofs4, ofs5, ofs6, ofs7, ofs8, ofs11, ofs14, ofs17, ofs18]
         ofs2:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function readString() : JSONToken
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"readString")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         
         body
         maxstack 5
         localcount 6
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce_s
         setlocal3
         pushbyte 0
         setlocal 4
         findpropstrict QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         constructprop QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken"), 0
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"STRING")
         setproperty QName(PackageNamespace(""),"type")
         pushstring ""
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs0
         ofs1:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "\\"
         ifne ofs2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs3
         ofs4:
         label
         getlocal2
         pushstring "\""
         add
         setlocal2
         jump ofs5
         ofs6:
         label
         getlocal2
         pushstring "/"
         add
         setlocal2
         jump ofs5
         ofs7:
         label
         getlocal2
         pushstring "\\"
         add
         setlocal2
         jump ofs5
         ofs8:
         label
         getlocal2
         pushstring "\b"
         add
         setlocal2
         jump ofs5
         ofs9:
         label
         getlocal2
         pushstring "\f"
         add
         setlocal2
         jump ofs5
         ofs10:
         label
         getlocal2
         pushstring "\n"
         add
         setlocal2
         jump ofs5
         ofs11:
         label
         getlocal2
         pushstring "\r"
         add
         setlocal2
         jump ofs5
         ofs12:
         label
         getlocal2
         pushstring "\t"
         add
         setlocal2
         jump ofs5
         ofs13:
         label
         pushstring ""
         setlocal3
         pushbyte 0
         setlocal 4
         jump ofs14
         ofs15:
         label
         getlocal0
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isHexDigit"), 1
         iftrue ofs16
         getlocal0
         pushstring " Excepted a hex digit, but found: "
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs16:
         getlocal3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal3
         inclocal_i 4
         ofs14:
         getlocal 4
         pushbyte 4
         iflt ofs15
         getlocal2
         getlex QName(PackageNamespace(""),"String")
         findpropstrict QName(PackageNamespace(""),"parseInt")
         getlocal3
         pushbyte 16
         callproperty QName(PackageNamespace(""),"parseInt"), 2
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"fromCharCode"), 1
         add
         coerce_s
         setlocal2
         jump ofs5
         ofs17:
         label
         getlocal2
         pushstring "\\"
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         add
         coerce_s
         setlocal2
         jump ofs5
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         setlocal 5
         pushstring "\""
         getlocal 5
         ifstrictne ofs18
         pushbyte 0
         jump ofs19
         ofs18:
         pushstring "/"
         getlocal 5
         ifstrictne ofs20
         pushbyte 1
         jump ofs19
         ofs20:
         pushstring "\\"
         getlocal 5
         ifstrictne ofs21
         pushbyte 2
         jump ofs19
         ofs21:
         pushstring "b"
         getlocal 5
         ifstrictne ofs22
         pushbyte 3
         jump ofs19
         ofs22:
         pushstring "f"
         getlocal 5
         ifstrictne ofs23
         pushbyte 4
         jump ofs19
         ofs23:
         pushstring "n"
         getlocal 5
         ifstrictne ofs24
         pushbyte 5
         jump ofs19
         ofs24:
         pushstring "r"
         getlocal 5
         ifstrictne ofs25
         pushbyte 6
         jump ofs19
         ofs25:
         pushstring "t"
         getlocal 5
         ifstrictne ofs26
         pushbyte 7
         jump ofs19
         ofs26:
         pushstring "u"
         getlocal 5
         ifstrictne ofs27
         pushbyte 8
         jump ofs19
         ofs27:
         jump ofs28
         pushbyte 9
         jump ofs28
         ofs28:
         pushbyte 9
         ofs19:
         kill 5
         lookupswitch ofs17, [ofs4, ofs6, ofs7, ofs8, ofs9, ofs10, ofs11, ofs12, ofs13, ofs17]
         ofs5:
         jump ofs29
         ofs2:
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal2
         ofs29:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "\""
         equals
         not
         dup
         iffalse ofs30
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         equals
         not
         ofs30:
         iftrue ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         ifne ofs31
         getlocal0
         pushstring "Unterminated string literal"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs31:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal1
         getlocal2
         setproperty QName(PackageNamespace(""),"value")
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function readNumber() : JSONToken
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"readNumber")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         constructprop QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken"), 0
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal1
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"NUMBER")
         setproperty QName(PackageNamespace(""),"type")
         pushstring ""
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "-"
         ifne ofs0
         getlocal2
         pushstring "-"
         add
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs0:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs1
         getlocal0
         pushstring "Expecting a digit"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "0"
         ifne ofs2
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iffalse ofs3
         getlocal0
         pushstring "A digit cannot immediately follow 0"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs3:
         jump ofs4
         ofs2:
         jump ofs5
         ofs6:
         label
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs5:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs6
         ofs4:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "."
         ifne ofs7
         getlocal2
         pushstring "."
         add
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs8
         getlocal0
         pushstring "Expecting a digit"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs8:
         jump ofs9
         ofs10:
         label
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs9:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs10
         ofs7:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "e"
         equals
         dup
         iftrue ofs11
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "E"
         equals
         ofs11:
         iffalse ofs12
         getlocal2
         pushstring "e"
         add
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "+"
         equals
         dup
         iftrue ofs13
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "-"
         equals
         ofs13:
         iffalse ofs14
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs14:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs15
         getlocal0
         pushstring "Scientific notation number needs exponent value"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs15:
         jump ofs16
         ofs17:
         label
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal2
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs16:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs17
         ofs12:
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal2
         callproperty QName(PackageNamespace(""),"Number"), 1
         convert_d
         setlocal3
         findpropstrict QName(PackageNamespace(""),"isFinite")
         getlocal3
         callproperty QName(PackageNamespace(""),"isFinite"), 1
         convert_b
         dup
         iffalse ofs18
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal3
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs18:
         iffalse ofs19
         getlocal1
         getlocal3
         setproperty QName(PackageNamespace(""),"value")
         getlocal1
         returnvalue
         ofs19:
         getlocal0
         pushstring "Number "
         getlocal3
         add
         pushstring " is not valid!"
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function nextChar() : String
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 5
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         getlocal0
         dup
         setlocal1
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         dup
         increment_i
         setlocal2
         getlocal1
         getlocal2
         setproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         kill 2
         kill 1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"charAt"), 1
         dup
         setlocal1
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         getlocal1
         kill 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function skipIgnored() : void
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"skipIgnored")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal1
         jump ofs0
         ofs1:
         label
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         convert_i
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"skipWhite"), 0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"skipComments"), 0
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         ifne ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function skipComments() : void
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"skipComments")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "/"
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs1
         ofs2:
         label
         jump ofs3
         ofs4:
         label
         ofs3:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "\n"
         equals
         not
         dup
         iffalse ofs5
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         equals
         not
         ofs5:
         iftrue ofs4
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs0
         ofs6:
         label
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs7
         ofs8:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "*"
         ifne ofs9
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "/"
         ifne ofs10
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs11
         ofs10:
         jump ofs12
         ofs9:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs12:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         ifne ofs7
         getlocal0
         pushstring "Multi-line comment not closed"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs7:
         jump ofs8
         ofs11:
         jump ofs0
         ofs13:
         label
         getlocal0
         pushstring "Unexpected "
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         pushstring " encountered (expecting \'/\' or \'*\' )"
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         jump ofs0
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         setlocal1
         pushstring "/"
         getlocal1
         ifstrictne ofs14
         pushbyte 0
         jump ofs15
         ofs14:
         pushstring "*"
         getlocal1
         ifstrictne ofs16
         pushbyte 1
         jump ofs15
         ofs16:
         jump ofs17
         pushbyte 2
         jump ofs17
         ofs17:
         pushbyte 2
         ofs15:
         kill 1
         lookupswitch ofs13, [ofs2, ofs6, ofs13]
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function skipWhite() : void
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"skipWhite")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         jump ofs0
         ofs1:
         label
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs0:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isWhiteSpace"), 1
         iftrue ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function isWhiteSpace(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"isWhiteSpace")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal1
         pushstring " "
         equals
         dup
         iftrue ofs0
         pop
         getlocal1
         pushstring "\t"
         equals
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal1
         pushstring "\n"
         equals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal1
         pushstring "\r"
         equals
         ofs2:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function isDigit(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal1
         pushstring "0"
         greaterequals
         dup
         iffalse ofs0
         pop
         getlocal1
         pushstring "9"
         lessequals
         ofs0:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function isHexDigit(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"isHexDigit")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"toUpperCase"), 0
         coerce_s
         setlocal2
         getlocal0
         getlocal1
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         convert_b
         dup
         iftrue ofs0
         pop
         getlocal2
         pushstring "A"
         greaterequals
         dup
         iffalse ofs0
         pop
         getlocal2
         pushstring "F"
         lessequals
         ofs0:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function parseError(param1:String) : void
      {
         trait method QName(PackageNamespace(""),"parseError")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("com.adobe.serialization.json"),"JSONParseError")
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         constructprop QName(PackageNamespace("com.adobe.serialization.json"),"JSONParseError"), 3
         throw
         end ; code
         end ; body
         end ; method
      }
   }
}
