
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 11
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("ErrorSkin",[PackageNamespace("spark.skins.spark")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"InteractiveObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"Sprite")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexSprite")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"UIComponent")
   pushscope
   getlex QName(PackageNamespace("spark.skins.spark"),"HighlightBitmapCaptureSkin")
   pushscope
   getlex QName(PackageNamespace("spark.skins.spark"),"HighlightBitmapCaptureSkin")
   newclass #ErrorSkin
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("spark.skins.spark"),"ErrorSkin")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package spark.skins.spark
{
   import flash.filters.GlowFilter;
   import flash.geom.Point;
   import flash.geom.Rectangle;
   import mx.core.mx_internal;
   
   use namespace mx_internal;
   
   public class ErrorSkin extends HighlightBitmapCaptureSkin
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      private static var glowFilter:GlowFilter;
      
      private static var rect:Rectangle;
      
      private static var filterPt:Point;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 10
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         findproperty QName(PrivateNamespace(null,"#ErrorSkin"),"glowFilter")
         findpropstrict QName(PackageNamespace("flash.filters"),"GlowFilter")
         pushint 16711680
         pushdouble 0.85
         pushbyte 2
         dup
         pushbyte 3
         pushbyte 1
         pushfalse
         pushtrue
         constructprop QName(PackageNamespace("flash.filters"),"GlowFilter"), 8
         setproperty QName(PrivateNamespace(null,"#ErrorSkin"),"glowFilter")
         findproperty QName(PrivateNamespace(null,"#ErrorSkin"),"rect")
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 0
         setproperty QName(PrivateNamespace(null,"#ErrorSkin"),"rect")
         findproperty QName(PrivateNamespace(null,"#ErrorSkin"),"filterPt")
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 0
         setproperty QName(PrivateNamespace(null,"#ErrorSkin"),"filterPt")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function ErrorSkin()
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         findproperty QName(PackageNamespace(""),"mouseEnabled")
         pushfalse
         initproperty QName(PackageNamespace(""),"mouseEnabled")
         findproperty QName(PackageNamespace(""),"mouseChildren")
         pushfalse
         initproperty QName(PackageNamespace(""),"mouseChildren")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function processBitmap() : void
      {
         trait method QName(ProtectedNamespace("spark.skins.spark:ErrorSkin"),"processBitmap")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"rect")
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"rect")
         pushbyte 0
         dup
         setlocal1
         setproperty QName(PackageNamespace(""),"y")
         getlocal1
         kill 1
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"rect")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"bitmapData")
         getproperty QName(PackageNamespace(""),"width")
         setproperty QName(PackageNamespace(""),"width")
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"rect")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"bitmapData")
         getproperty QName(PackageNamespace(""),"height")
         setproperty QName(PackageNamespace(""),"height")
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"glowFilter")
         getlex QName(PackageNamespace(""),"target")
         pushstring "errorColor"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"color")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"bitmapData")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"bitmapData")
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"rect")
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"filterPt")
         getlex QName(PrivateNamespace(null,"#ErrorSkin"),"glowFilter")
         callpropvoid QName(PackageNamespace(""),"applyFilter"), 4
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function updateDisplayList(param1:Number, param2:Number) : void
      {
         trait method QName(ProtectedNamespace("spark.skins.spark:ErrorSkin"),"updateDisplayList")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"target")
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         getlocal2
         callsupervoid QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"updateDisplayList"), 2
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         pushbyte 0
         dup
         setlocal3
         setproperty QName(PackageNamespace(""),"y")
         getlocal3
         kill 3
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getlex QName(PackageNamespace(""),"target")
         getproperty QName(PackageNamespace(""),"width")
         setproperty QName(PackageNamespace(""),"width")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getlex QName(PackageNamespace(""),"target")
         getproperty QName(PackageNamespace(""),"height")
         setproperty QName(PackageNamespace(""),"height")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
