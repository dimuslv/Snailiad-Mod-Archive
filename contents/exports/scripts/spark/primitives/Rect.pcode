
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 7
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("Rect",[PackageNamespace("spark.primitives")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("spark.primitives.supportClasses"),"GraphicElement")
   pushscope
   getlex QName(PackageNamespace("spark.primitives.supportClasses"),"StrokedElement")
   pushscope
   getlex QName(PackageNamespace("spark.primitives.supportClasses"),"FilledElement")
   pushscope
   getlex QName(PackageNamespace("spark.primitives.supportClasses"),"FilledElement")
   newclass #Rect
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("spark.primitives"),"Rect")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package spark.primitives
{
   import flash.display.Graphics;
   import flash.geom.Matrix;
   import flash.geom.Point;
   import flash.geom.Rectangle;
   import mx.core.mx_internal;
   import mx.utils.GraphicsUtil;
   import mx.utils.MatrixUtil;
   import spark.primitives.supportClasses.FilledElement;
   
   use namespace mx_internal;
   
   public class Rect extends FilledElement
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _bottomLeftRadiusX:Number;
      
      private var _bottomLeftRadiusY:Number;
      
      private var _bottomRightRadiusX:Number;
      
      private var _bottomRightRadiusY:Number;
      
      private var _radiusX:Number = 0;
      
      private var _radiusY:Number = 0;
      
      private var _topLeftRadiusX:Number;
      
      private var _topLeftRadiusY:Number;
      
      private var _topRightRadiusX:Number;
      
      private var _topRightRadiusY:Number;
      
      public function Rect()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private static function getRoundRectBoundingBox(param1:Number, param2:Number, param3:Rect, param4:Matrix) : Rectangle
      {
         trait method QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox")
         flag FINAL
         dispid 3
         method
         name null
         flag NEED_ACTIVATION
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace("spark.primitives"),"Rect")
         param QName(PackageNamespace("flash.geom"),"Matrix")
         returns QName(PackageNamespace("flash.geom"),"Rectangle")
         
         body
         maxstack 8
         localcount 6
         initscopedepth 8
         maxscopedepth 10
         trait slot QName(PackageInternalNs("spark.primitives"),"width")
         slotid 1
         type QName(PackageNamespace(""),"Number")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"height")
         slotid 2
         type QName(PackageNamespace(""),"Number")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"r")
         slotid 3
         type QName(PackageNamespace("spark.primitives"),"Rect")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"m")
         slotid 4
         type QName(PackageNamespace("flash.geom"),"Matrix")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"maxRadiusX")
         slotid 5
         type QName(PackageNamespace(""),"Number")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"maxRadiusY")
         slotid 6
         type QName(PackageNamespace(""),"Number")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"radiusX")
         slotid 7
         type QName(PackageNamespace(""),"Number")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"radiusY")
         slotid 8
         type QName(PackageNamespace(""),"Number")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"radiusValue")
         slotid 9
         type QName(PackageNamespace(""),"Function")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"boundingBox")
         slotid 10
         type QName(PackageNamespace("flash.geom"),"Rectangle")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"rX")
         slotid 11
         type QName(PackageNamespace(""),"Number")
         end ; trait
         trait slot QName(PackageInternalNs("spark.primitives"),"rY")
         slotid 12
         type QName(PackageNamespace(""),"Number")
         end ; trait
         
         code
         getlocal0
         pushscope
         newactivation
         dup
         setlocal 5
         pushscope
         getscopeobject 1
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setslot 10
         getscopeobject 1
         pushnan
         setslot 11
         getscopeobject 1
         pushnan
         setslot 12
         getscopeobject 1
         getlocal1
         setslot 1
         getscopeobject 1
         getlocal2
         setslot 2
         getscopeobject 1
         getlocal3
         setslot 3
         getscopeobject 1
         getlocal 4
         setslot 4
         getscopeobject 1
         newfunction 3640
         coerce QName(PackageNamespace(""),"Function")
         setslot 9
         getscopeobject 1
         getscopeobject 1
         getslot 1
         pushbyte 2
         divide
         convert_d
         setslot 5
         getscopeobject 1
         getscopeobject 1
         getslot 2
         pushbyte 2
         divide
         convert_d
         setslot 6
         getscopeobject 1
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"radiusX")
         convert_d
         setslot 7
         getscopeobject 1
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"radiusY")
         pushbyte 0
         equals
         iffalse ofs0
         getscopeobject 1
         getslot 7
         convert_d
         jump ofs1
         ofs0:
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"radiusY")
         convert_d
         ofs1:
         convert_d
         setslot 8
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 7
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"topLeftRadiusX")
         getscopeobject 1
         getslot 5
         call 3
         convert_d
         setslot 11
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"topLeftRadiusY")
         getscopeobject 1
         getslot 6
         call 3
         convert_d
         setslot 12
         getscopeobject 1
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 12
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 12
         getscopeobject 1
         getslot 4
         getscopeobject 1
         getslot 10
         callproperty QName(PackageNamespace(""),"getEllipseBoundingBox"), 6
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setslot 10
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 7
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"topRightRadiusX")
         getscopeobject 1
         getslot 5
         call 3
         convert_d
         setslot 11
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"topRightRadiusY")
         getscopeobject 1
         getslot 6
         call 3
         convert_d
         setslot 12
         getscopeobject 1
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getscopeobject 1
         getslot 1
         getscopeobject 1
         getslot 11
         subtract
         getscopeobject 1
         getslot 12
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 12
         getscopeobject 1
         getslot 4
         getscopeobject 1
         getslot 10
         callproperty QName(PackageNamespace(""),"getEllipseBoundingBox"), 6
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setslot 10
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 7
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"bottomRightRadiusX")
         getscopeobject 1
         getslot 5
         call 3
         convert_d
         setslot 11
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"bottomRightRadiusY")
         getscopeobject 1
         getslot 6
         call 3
         convert_d
         setslot 12
         getscopeobject 1
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getscopeobject 1
         getslot 1
         getscopeobject 1
         getslot 11
         subtract
         getscopeobject 1
         getslot 2
         getscopeobject 1
         getslot 12
         subtract
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 12
         getscopeobject 1
         getslot 4
         getscopeobject 1
         getslot 10
         callproperty QName(PackageNamespace(""),"getEllipseBoundingBox"), 6
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setslot 10
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 7
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"bottomLeftRadiusX")
         getscopeobject 1
         getslot 5
         call 3
         convert_d
         setslot 11
         getscopeobject 1
         getscopeobject 1
         getslot 9
         getglobalscope
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 3
         getproperty QName(PackageNamespace(""),"bottomLeftRadiusY")
         getscopeobject 1
         getslot 6
         call 3
         convert_d
         setslot 12
         getscopeobject 1
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 2
         getscopeobject 1
         getslot 12
         subtract
         getscopeobject 1
         getslot 11
         getscopeobject 1
         getslot 12
         getscopeobject 1
         getslot 4
         getscopeobject 1
         getslot 10
         callproperty QName(PackageNamespace(""),"getEllipseBoundingBox"), 6
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setslot 10
         getscopeobject 1
         getslot 10
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get bottomLeftRadiusX() : Number
      {
         trait getter QName(PackageNamespace(""),"bottomLeftRadiusX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_bottomLeftRadiusX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set bottomLeftRadiusX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"bottomLeftRadiusX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_bottomLeftRadiusX")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_bottomLeftRadiusX")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get bottomLeftRadiusY() : Number
      {
         trait getter QName(PackageNamespace(""),"bottomLeftRadiusY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_bottomLeftRadiusY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set bottomLeftRadiusY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"bottomLeftRadiusY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_bottomLeftRadiusY")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_bottomLeftRadiusY")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get bottomRightRadiusX() : Number
      {
         trait getter QName(PackageNamespace(""),"bottomRightRadiusX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_bottomRightRadiusX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set bottomRightRadiusX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"bottomRightRadiusX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"bottomRightRadiusX")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_bottomRightRadiusX")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get bottomRightRadiusY() : Number
      {
         trait getter QName(PackageNamespace(""),"bottomRightRadiusY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_bottomRightRadiusY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set bottomRightRadiusY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"bottomRightRadiusY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_bottomRightRadiusY")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_bottomRightRadiusY")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get radiusX() : Number
      {
         trait getter QName(PackageNamespace(""),"radiusX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_radiusX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set radiusX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"radiusX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_radiusX")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_radiusX")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get radiusY() : Number
      {
         trait getter QName(PackageNamespace(""),"radiusY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_radiusY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set radiusY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"radiusY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_radiusY")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_radiusY")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get topLeftRadiusX() : Number
      {
         trait getter QName(PackageNamespace(""),"topLeftRadiusX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_topLeftRadiusX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set topLeftRadiusX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"topLeftRadiusX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_topLeftRadiusX")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_topLeftRadiusX")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get topLeftRadiusY() : Number
      {
         trait getter QName(PackageNamespace(""),"topLeftRadiusY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_topLeftRadiusY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set topLeftRadiusY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"topLeftRadiusY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_topLeftRadiusY")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_topLeftRadiusY")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get topRightRadiusX() : Number
      {
         trait getter QName(PackageNamespace(""),"topRightRadiusX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_topRightRadiusX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set topRightRadiusX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"topRightRadiusX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"topRightRadiusX")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_topRightRadiusX")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get topRightRadiusY() : Number
      {
         trait getter QName(PackageNamespace(""),"topRightRadiusY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_topRightRadiusY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set topRightRadiusY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"topRightRadiusY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Rect"),"_topRightRadiusY")
         ifeq ofs0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Rect"),"_topRightRadiusY")
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function draw(param1:Graphics) : void
      {
         trait method QName(ProtectedNamespace("spark.primitives:Rect"),"draw")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"Graphics")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 16
         localcount 4
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal2
         pushnan
         setlocal3
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"topLeftRadiusX")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iftrue ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"topRightRadiusX")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs0:
         dup
         iftrue ofs1
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"bottomLeftRadiusX")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs1:
         dup
         iftrue ofs2
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"bottomRightRadiusX")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs2:
         iffalse ofs3
         getlex QName(PackageNamespace("mx.utils"),"GraphicsUtil")
         getlocal1
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawX")
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawY")
         getlex QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace(""),"height")
         getlocal0
         getproperty QName(PackageNamespace(""),"radiusX")
         getlocal0
         getproperty QName(PackageNamespace(""),"radiusY")
         getlocal0
         getproperty QName(PackageNamespace(""),"topLeftRadiusX")
         getlocal0
         getproperty QName(PackageNamespace(""),"topLeftRadiusY")
         getlocal0
         getproperty QName(PackageNamespace(""),"topRightRadiusX")
         getlocal0
         getproperty QName(PackageNamespace(""),"topRightRadiusY")
         getlocal0
         getproperty QName(PackageNamespace(""),"bottomLeftRadiusX")
         getlocal0
         getproperty QName(PackageNamespace(""),"bottomLeftRadiusY")
         getlocal0
         getproperty QName(PackageNamespace(""),"bottomRightRadiusX")
         getlocal0
         getproperty QName(PackageNamespace(""),"bottomRightRadiusY")
         callpropvoid QName(PackageNamespace(""),"drawRoundRectComplex2"), 15
         jump ofs4
         ofs3:
         getlocal0
         getproperty QName(PackageNamespace(""),"radiusX")
         pushbyte 0
         ifeq ofs5
         getlocal0
         getproperty QName(PackageNamespace(""),"radiusX")
         convert_d
         setlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"radiusY")
         pushbyte 0
         equals
         iffalse ofs6
         getlocal0
         getproperty QName(PackageNamespace(""),"radiusX")
         convert_d
         jump ofs7
         ofs6:
         getlocal0
         getproperty QName(PackageNamespace(""),"radiusY")
         convert_d
         ofs7:
         convert_d
         setlocal3
         getlocal1
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawX")
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawY")
         getlex QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace(""),"height")
         getlocal2
         pushbyte 2
         multiply
         getlocal3
         pushbyte 2
         multiply
         callpropvoid QName(PackageNamespace(""),"drawRoundRect"), 6
         jump ofs4
         ofs5:
         getlocal1
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawX")
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawY")
         getlex QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace(""),"height")
         callpropvoid QName(PackageNamespace(""),"drawRect"), 4
         ofs4:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function transformWidthForLayout(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives:Rect"),"transformWidthForLayout")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 4
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal3
         convert_b
         dup
         iffalse ofs0
         pop
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0:
         iffalse ofs1
         findpropstrict QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox")
         getlocal1
         getlocal2
         getlocal0
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox"), 4
         getproperty QName(PackageNamespace(""),"width")
         convert_d
         setlocal1
         ofs1:
         getlocal1
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents")
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"width")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override protected function transformHeightForLayout(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives:Rect"),"transformHeightForLayout")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 4
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal3
         convert_b
         dup
         iffalse ofs0
         pop
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0:
         iffalse ofs1
         findpropstrict QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox")
         getlocal1
         getlocal2
         getlocal0
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox"), 4
         getproperty QName(PackageNamespace(""),"height")
         convert_d
         setlocal2
         ofs1:
         getlocal2
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents")
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"height")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function getBoundsXAtSize(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getBoundsXAtSize")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 10
         localcount 7
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents")
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 4
         findpropstrict QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix")
         getlocal3
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 5
         iftrue ofs0
         getlocal 4
         getproperty QName(PackageNamespace(""),"left")
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal1
         getlocal 4
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs1:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs2
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs2:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 5
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform")
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform")
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlex QName(PackageNamespace(""),"minWidth")
         getlex QName(PackageNamespace(""),"minHeight")
         getlex QName(PackageNamespace(""),"maxWidth")
         getlex QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iftrue ofs3
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlex QName(PackageNamespace(""),"minWidth")
         getlex QName(PackageNamespace(""),"minHeight")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         ofs3:
         getlocal 4
         getproperty QName(PackageNamespace(""),"left")
         findpropstrict QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox")
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getlocal 5
         callproperty QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox"), 4
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function getBoundsYAtSize(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getBoundsYAtSize")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 10
         localcount 7
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents")
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 4
         findpropstrict QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix")
         getlocal3
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 5
         iftrue ofs0
         getlocal 4
         getproperty QName(PackageNamespace(""),"top")
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal1
         getlocal 4
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs1:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs2
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs2:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 5
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform")
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform")
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlex QName(PackageNamespace(""),"minWidth")
         getlex QName(PackageNamespace(""),"minHeight")
         getlex QName(PackageNamespace(""),"maxWidth")
         getlex QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iftrue ofs3
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlex QName(PackageNamespace(""),"minWidth")
         getlex QName(PackageNamespace(""),"minHeight")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         ofs3:
         getlocal 4
         getproperty QName(PackageNamespace(""),"top")
         findpropstrict QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox")
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getlocal 5
         callproperty QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox"), 4
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function getLayoutBoundsX(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsX")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 6
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"left")
         convert_d
         setlocal2
         getlocal1
         convert_b
         dup
         iffalse ofs0
         pop
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal2
         findpropstrict QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox")
         getlex QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace(""),"height")
         getlocal0
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox"), 4
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs1:
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function getLayoutBoundsY(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsY")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 6
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         findpropstrict QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:StrokedElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"top")
         convert_d
         setlocal2
         getlocal1
         convert_b
         dup
         iffalse ofs0
         pop
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal2
         findpropstrict QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox")
         getlex QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace(""),"height")
         getlocal0
         getlex QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PrivateNamespace(null,"#Rect"),"getRoundRectBoundingBox"), 4
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs1:
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
