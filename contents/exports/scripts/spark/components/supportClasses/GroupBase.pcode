
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 10
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("GroupBase",[PackageNamespace("spark.components.supportClasses")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"InteractiveObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"Sprite")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexSprite")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"UIComponent")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"UIComponent")
   newclass #GroupBase
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("spark.components.supportClasses"),"GroupBase")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package spark.components.supportClasses
{
   import flash.display.DisplayObject;
   import flash.display.Sprite;
   import flash.events.Event;
   import flash.events.MouseEvent;
   import flash.filters.ShaderFilter;
   import flash.geom.Point;
   import flash.geom.Rectangle;
   import mx.core.IVisualElement;
   import mx.core.UIComponent;
   import mx.core.mx_internal;
   import mx.events.PropertyChangeEvent;
   import mx.graphics.shaderClasses.LuminosityMaskShader;
   import spark.components.ResizeMode;
   import spark.core.IViewport;
   import spark.core.MaskType;
   import spark.events.DisplayLayerObjectExistenceEvent;
   import spark.layouts.BasicLayout;
   import spark.layouts.supportClasses.LayoutBase;
   import spark.utils.FTETextUtil;
   import spark.utils.MaskUtil;
   
   use namespace mx_internal;
   
   public class GroupBase extends UIComponent implements IViewport
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 10
         maxscopedepth 11
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _explicitAlpha:Number = 1.0;
      
      private var _explicitMouseChildren:Boolean = true;
      
      private var _explicitMouseEnabled:Boolean = true;
      
      private var _layout:LayoutBase;
      
      private var _layoutProperties:Object = null;
      
      private var layoutInvalidateSizeFlag:Boolean = false;
      
      private var layoutInvalidateDisplayListFlag:Boolean = false;
      
      private var clipAndEnableScrollingExplicitlySet:Boolean = false;
      
      private var _scrollRectSet:Boolean = false;
      
      private var _autoLayout:Boolean = true;
      
      mx_internal var _overlay:DisplayLayer;
      
      private var _resizeMode:String = "noScale";
      
      private var _mouseEnabledWhereTransparent:Boolean = true;
      
      private var mouseEventReferenceCount:int;
      
      private var _hasMouseListeners:Boolean = false;
      
      private var _contentWidth:Number = 0;
      
      private var _contentHeight:Number = 0;
      
      private var _focusPane:Sprite;
      
      private var _mask:DisplayObject;
      
      mx_internal var maskChanged:Boolean;
      
      private var _maskType:String = "clip";
      
      private var maskTypeChanged:Boolean;
      
      private var originalMaskFilters:Array;
      
      private var _luminosityInvert:Boolean = false;
      
      private var luminositySettingsChanged:Boolean;
      
      private var _luminosityClip:Boolean = false;
      
      public function GroupBase()
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         findproperty QName(PackageNamespace(""),"showInAutomationHierarchy")
         pushfalse
         initproperty QName(PackageNamespace(""),"showInAutomationHierarchy")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal static function sortOnLayer(param1:Vector.<IVisualElement>) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"sortOnLayer")
         flag FINAL
         dispid 3
         method
         name null
         param TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace("mx.core"),"IVisualElement")>)
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 6
         initscopedepth 10
         maxscopedepth 11
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal3
         pushbyte 0
         setlocal 5
         getlocal1
         getproperty QName(PackageNamespace(""),"length")
         convert_d
         setlocal2
         getlocal2
         pushbyte 1
         ifnle ofs0
         returnvoid
         ofs0:
         pushbyte 1
         setlocal 4
         jump ofs1
         ofs2:
         label
         getlocal 4
         convert_i
         setlocal 5
         jump ofs3
         ofs4:
         label
         getlocal1
         getlocal 5
         getproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getproperty QName(Namespace("mx.core:IVisualElement"),"depth")
         getlocal1
         getlocal 5
         decrement
         getproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getproperty QName(Namespace("mx.core:IVisualElement"),"depth")
         ifnlt ofs5
         getlocal1
         getlocal 5
         getproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal3
         getlocal1
         getlocal 5
         getlocal1
         getlocal 5
         decrement
         getproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         setproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlocal1
         getlocal 5
         decrement
         getlocal3
         setproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         jump ofs6
         ofs5:
         jump ofs7
         ofs6:
         getlocal 5
         decrement_i
         setlocal 5
         ofs3:
         getlocal 5
         pushbyte 0
         ifgt ofs4
         ofs7:
         inclocal_i 4
         ofs1:
         getlocal 4
         getlocal2
         iflt ofs2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set alpha(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"alpha")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"enabled")
         iffalse ofs0
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"alpha")
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_explicitAlpha")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get baselinePosition() : Number
      {
         trait getter QName(PackageNamespace(""),"baselinePosition")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         findpropstrict QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"validateBaselinePosition")
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"validateBaselinePosition"), 0
         iftrue ofs0
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         ofs0:
         getlex QName(PackageNamespace("spark.utils"),"FTETextUtil")
         getlocal0
         getlex QName(PackageNamespace(""),"height")
         getlex QName(PackageNamespace(""),"moduleFactory")
         callproperty QName(PackageNamespace(""),"calculateFontBaseline"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set mouseChildren(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"mouseChildren")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"enabled")
         iffalse ofs0
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"mouseChildren")
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_explicitMouseChildren")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set mouseEnabled(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"mouseEnabled")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"enabled")
         iffalse ofs0
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"mouseEnabled")
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_explicitMouseEnabled")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set enabled(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"enabled")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal2
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"enabled")
         getlocal0
         getlocal1
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_explicitMouseChildren")
         convert_b
         jump ofs1
         ofs0:
         pushfalse
         ofs1:
         setsuper QName(PackageNamespace(""),"mouseChildren")
         getlocal0
         getlocal1
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_explicitMouseEnabled")
         convert_b
         jump ofs3
         ofs2:
         pushfalse
         ofs3:
         setsuper QName(PackageNamespace(""),"mouseEnabled")
         getlocal1
         iffalse ofs4
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_explicitAlpha")
         setsuper QName(PackageNamespace(""),"alpha")
         jump ofs5
         ofs4:
         findpropstrict QName(PackageNamespace(""),"getStyle")
         pushstring "disabledAlpha"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         convert_d
         setlocal2
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs5
         getlocal0
         getlocal2
         setsuper QName(PackageNamespace(""),"alpha")
         ofs5:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get layout() : LayoutBase
      {
         trait getter QName(PackageNamespace(""),"layout")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutBase")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set layout(param1:LayoutBase) : void
      {
         trait setter QName(PackageNamespace(""),"layout")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutBase")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         pushnull
         setproperty QName(PackageNamespace(""),"target")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlex QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         getproperty QName(PackageNamespace(""),"PROPERTY_CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"redispatchLayoutEvent")
         callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"clipAndEnableScrollingExplicitlySet")
         iffalse ofs1
         getlocal0
         pushstring "clipAndEnableScrolling"
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getproperty QName(PackageNamespace(""),"clipAndEnableScrolling")
         newobject 1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal0
         setproperty QName(PackageNamespace(""),"target")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlex QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         getproperty QName(PackageNamespace(""),"PROPERTY_CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"redispatchLayoutEvent")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("clipAndEnableScrolling",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace(""),"undefined")
         ifstricteq ofs3
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("clipAndEnableScrolling",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         setproperty QName(PackageNamespace(""),"clipAndEnableScrolling")
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("verticalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace(""),"undefined")
         ifstricteq ofs4
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("verticalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         setproperty QName(PackageNamespace(""),"verticalScrollPosition")
         ofs4:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("horizontalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace(""),"undefined")
         ifstricteq ofs5
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("horizontalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         setproperty QName(PackageNamespace(""),"horizontalScrollPosition")
         ofs5:
         getlocal0
         pushnull
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         ofs2:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function redispatchLayoutEvent(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#GroupBase"),"redispatchLayoutEvent")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         astypelate
         coerce QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         setlocal2
         getlocal2
         iffalse ofs0
         jump ofs1
         ofs2:
         label
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         getlocal1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         jump ofs0
         ofs3:
         label
         jump ofs0
         ofs1:
         getlocal2
         getproperty QName(PackageNamespace(""),"property")
         setlocal3
         pushstring "verticalScrollPosition"
         getlocal3
         ifstrictne ofs4
         pushbyte 0
         jump ofs5
         ofs4:
         pushstring "horizontalScrollPosition"
         getlocal3
         ifstrictne ofs6
         pushbyte 1
         jump ofs5
         ofs6:
         jump ofs7
         pushbyte 2
         jump ofs7
         ofs7:
         pushbyte 2
         ofs5:
         kill 3
         lookupswitch ofs3, [ofs2, ofs2, ofs3]
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable(event="propertyChange")]
      public function get horizontalScrollPosition() : Number
      {
         trait getter QName(PackageNamespace(""),"horizontalScrollPosition")
         flag METADATA
         metadata"Bindable"
         item "event" "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getproperty QName(PackageNamespace(""),"horizontalScrollPosition")
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("horizontalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace(""),"undefined")
         strictequals
         not
         ofs1:
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("horizontalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         returnvalue
         ofs2:
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function set _754184102horizontalScrollPosition(param1:Number) : void
      {
         trait setter QName(PrivateNamespace(null,"#GroupBase"),"_754184102horizontalScrollPosition")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal1
         setproperty QName(PackageNamespace(""),"horizontalScrollPosition")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getlocal1
         setproperty Multiname("horizontalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         jump ofs1
         ofs2:
         getlocal0
         pushstring "horizontalScrollPosition"
         getlocal1
         newobject 1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable(event="propertyChange")]
      public function get verticalScrollPosition() : Number
      {
         trait getter QName(PackageNamespace(""),"verticalScrollPosition")
         flag METADATA
         metadata"Bindable"
         item "event" "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getproperty QName(PackageNamespace(""),"verticalScrollPosition")
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("verticalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace(""),"undefined")
         strictequals
         not
         ofs1:
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("verticalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         returnvalue
         ofs2:
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function set _1010846676verticalScrollPosition(param1:Number) : void
      {
         trait setter QName(PrivateNamespace(null,"#GroupBase"),"_1010846676verticalScrollPosition")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal1
         setproperty QName(PackageNamespace(""),"verticalScrollPosition")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getlocal1
         setproperty Multiname("verticalScrollPosition",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         jump ofs1
         ofs2:
         getlocal0
         pushstring "verticalScrollPosition"
         getlocal1
         newobject 1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get clipAndEnableScrolling() : Boolean
      {
         trait getter QName(PackageNamespace(""),"clipAndEnableScrolling")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getproperty QName(PackageNamespace(""),"clipAndEnableScrolling")
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("clipAndEnableScrolling",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace(""),"undefined")
         strictequals
         not
         ofs1:
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getproperty Multiname("clipAndEnableScrolling",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         returnvalue
         ofs2:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set clipAndEnableScrolling(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"clipAndEnableScrolling")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"clipAndEnableScrollingExplicitlySet")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal1
         setproperty QName(PackageNamespace(""),"clipAndEnableScrolling")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         getlocal1
         setproperty Multiname("clipAndEnableScrolling",[PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         jump ofs1
         ofs2:
         getlocal0
         pushstring "clipAndEnableScrolling"
         getlocal1
         newobject 1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_layoutProperties")
         ofs1:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get scrollRect() : Rectangle
      {
         trait getter QName(PackageNamespace(""),"scrollRect")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Rectangle")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_scrollRectSet")
         iftrue ofs0
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         jump ofs1
         ofs0:
         getlocal0
         getsuper QName(PackageNamespace(""),"scrollRect")
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set scrollRect(param1:Rectangle) : void
      {
         trait setter QName(PackageNamespace(""),"scrollRect")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Rectangle")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_scrollRectSet")
         not
         dup
         iffalse ofs0
         pop
         getlocal1
         not
         ofs0:
         iffalse ofs1
         returnvoid
         ofs1:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_scrollRectSet")
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"scrollRect")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get autoLayout() : Boolean
      {
         trait getter QName(PackageNamespace(""),"autoLayout")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_autoLayout")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set autoLayout(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"autoLayout")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_autoLayout")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_autoLayout")
         getlocal1
         iffalse ofs1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         findpropstrict QName(ProtectedNamespace("mx.core:UIComponent"),"invalidateParentSizeAndDisplayList")
         callpropvoid QName(ProtectedNamespace("mx.core:UIComponent"),"invalidateParentSizeAndDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get overlay() : DisplayLayer
      {
         trait getter QName(PackageNamespace(""),"overlay")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("spark.components.supportClasses"),"DisplayLayer")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         iftrue ofs0
         getlocal0
         findpropstrict QName(PackageNamespace("spark.components.supportClasses"),"DisplayLayer")
         constructprop QName(PackageNamespace("spark.components.supportClasses"),"DisplayLayer"), 0
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getlex QName(PackageNamespace("spark.events"),"DisplayLayerObjectExistenceEvent")
         getproperty QName(PackageNamespace(""),"OBJECT_ADD")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"overlay_objectAdd")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getlex QName(PackageNamespace("spark.events"),"DisplayLayerObjectExistenceEvent")
         getproperty QName(PackageNamespace(""),"OBJECT_REMOVE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"overlay_objectRemove")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs0:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function overlay_objectAdd(param1:DisplayLayerObjectExistenceEvent) : void
      {
         trait method QName(PrivateNamespace(null,"#GroupBase"),"overlay_objectAdd")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.events"),"DisplayLayerObjectExistenceEvent")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"object")
         getlocal1
         getproperty QName(PackageNamespace(""),"index")
         getlex QName(PackageNamespace(""),"numChildren")
         add
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getproperty QName(PackageNamespace(""),"numDisplayObjects")
         subtract
         pushbyte 1
         add
         callsupervoid QName(PackageNamespace(""),"addChildAt"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function overlay_objectRemove(param1:DisplayLayerObjectExistenceEvent) : void
      {
         trait method QName(PrivateNamespace(null,"#GroupBase"),"overlay_objectRemove")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.events"),"DisplayLayerObjectExistenceEvent")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"object")
         callsupervoid QName(PackageNamespace(""),"removeChild"), 1
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getproperty QName(PackageNamespace(""),"numDisplayObjects")
         pushbyte 1
         ifne ofs0
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function destroyOverlay() : void
      {
         trait method QName(PrivateNamespace(null,"#GroupBase"),"destroyOverlay")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getlex QName(PackageNamespace("spark.events"),"DisplayLayerObjectExistenceEvent")
         getproperty QName(PackageNamespace(""),"OBJECT_ADD")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"overlay_objectAdd")
         callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getlex QName(PackageNamespace("spark.events"),"DisplayLayerObjectExistenceEvent")
         getproperty QName(PackageNamespace(""),"OBJECT_REMOVE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"overlay_objectRemove")
         callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
         getlocal0
         pushnull
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get resizeMode() : String
      {
         trait getter QName(PackageNamespace(""),"resizeMode")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set resizeMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"resizeMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         ifne ofs1
         findpropstrict QName(ProtectedNamespace("mx.core:UIComponent"),"setStretchXY")
         pushbyte 1
         dup
         callpropvoid QName(ProtectedNamespace("mx.core:UIComponent"),"setStretchXY"), 2
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get mouseEnabledWhereTransparent() : Boolean
      {
         trait getter QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mouseEnabledWhereTransparent")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set mouseEnabledWhereTransparent(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mouseEnabledWhereTransparent")
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_mouseEnabledWhereTransparent")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_hasMouseListeners")
         iffalse ofs1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function drawBackground() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"drawBackground")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 10
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal3
         pushbyte 0
         setlocal 4
         pushbyte 0
         setlocal 5
         pushbyte 0
         setlocal 6
         pushbyte 0
         setlocal 7
         pushbyte 0
         setlocal 8
         pushbyte 0
         setlocal 9
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mouseEnabledWhereTransparent")
         not
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_hasMouseListeners")
         not
         ofs0:
         iffalse ofs1
         returnvoid
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         ifne ofs2
         getlex QName(PackageNamespace(""),"measuredWidth")
         convert_d
         jump ofs3
         ofs2:
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"unscaledWidth")
         convert_d
         ofs3:
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         ifne ofs4
         getlex QName(PackageNamespace(""),"measuredHeight")
         convert_d
         jump ofs5
         ofs4:
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"unscaledHeight")
         convert_d
         ofs5:
         convert_d
         setlocal2
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         convert_b
         dup
         iftrue ofs6
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         convert_b
         ofs6:
         iffalse ofs7
         returnvoid
         ofs7:
         getlex QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         getlex QName(PackageNamespace(""),"graphics")
         pushint 16777215
         pushbyte 0
         callpropvoid QName(PackageNamespace(""),"beginFill"), 2
         getlocal0
         getproperty QName(PackageNamespace(""),"layout")
         convert_b
         dup
         iffalse ofs8
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"layout")
         getproperty QName(PackageNamespace(""),"useVirtualLayout")
         convert_b
         ofs8:
         iffalse ofs9
         getlex QName(PackageNamespace(""),"graphics")
         getlocal0
         getproperty QName(PackageNamespace(""),"horizontalScrollPosition")
         getlocal0
         getproperty QName(PackageNamespace(""),"verticalScrollPosition")
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"drawRect"), 4
         jump ofs10
         ofs9:
         pushshort 4096
         setlocal3
         getlex QName(PackageNamespace(""),"Math")
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"contentWidth")
         callproperty QName(PackageNamespace(""),"max"), 2
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_i
         setlocal 4
         getlex QName(PackageNamespace(""),"Math")
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"contentHeight")
         callproperty QName(PackageNamespace(""),"max"), 2
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_i
         setlocal 5
         pushbyte 0
         setlocal 6
         jump ofs11
         ofs12:
         label
         pushbyte 0
         setlocal 7
         jump ofs13
         ofs14:
         label
         getlex QName(PackageNamespace(""),"Math")
         getlocal 4
         getlocal 6
         subtract
         getlocal3
         callproperty QName(PackageNamespace(""),"min"), 2
         convert_i
         setlocal 8
         getlex QName(PackageNamespace(""),"Math")
         getlocal 5
         getlocal 7
         subtract
         getlocal3
         callproperty QName(PackageNamespace(""),"min"), 2
         convert_i
         setlocal 9
         getlex QName(PackageNamespace(""),"graphics")
         getlocal 6
         getlocal 7
         getlocal 8
         getlocal 9
         callpropvoid QName(PackageNamespace(""),"drawRect"), 4
         getlocal 7
         getlocal3
         add
         convert_i
         setlocal 7
         ofs13:
         getlocal 7
         getlocal 5
         iflt ofs14
         getlocal 6
         getlocal3
         add
         convert_i
         setlocal 6
         ofs11:
         getlocal 6
         getlocal 4
         iflt ofs12
         ofs10:
         getlex QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"endFill"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function set hasMouseListeners(param1:Boolean) : void
      {
         trait setter QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"hasMouseListeners")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mouseEnabledWhereTransparent")
         iffalse ofs0
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList"), 0
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"_hasMouseListeners")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function get hasMouseListeners() : Boolean
      {
         trait getter QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"hasMouseListeners")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_hasMouseListeners")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override protected function canSkipMeasurement() : Boolean
      {
         trait method QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"canSkipMeasurement")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         equals
         iffalse ofs0
         pushfalse
         jump ofs1
         ofs0:
         getlocal0
         callsuper QName(ProtectedNamespace("mx.core:UIComponent"),"canSkipMeasurement"), 0
         convert_b
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function invalidateSize() : void
      {
         trait method QName(PackageNamespace(""),"invalidateSize")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"layoutInvalidateSizeFlag")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function invalidateDisplayList() : void
      {
         trait method QName(PackageNamespace(""),"invalidateDisplayList")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"layoutInvalidateDisplayListFlag")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override mx_internal function childXYChanged() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"childXYChanged")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"autoLayout")
         iffalse ofs0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function $invalidateSize() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateSize")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(PackageNamespace(""),"invalidateSize"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function $invalidateDisplayList() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function createChildren() : void
      {
         trait method QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"createChildren")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(ProtectedNamespace("mx.core:UIComponent"),"createChildren"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"layout")
         iftrue ofs0
         getlocal0
         findpropstrict QName(PackageNamespace("spark.layouts"),"BasicLayout")
         constructprop QName(PackageNamespace("spark.layouts"),"BasicLayout"), 0
         initproperty QName(PackageNamespace(""),"layout")
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function commitProperties() : void
      {
         trait method QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"commitProperties")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(ProtectedNamespace("mx.core:UIComponent"),"commitProperties"), 0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getproperty QName(PackageNamespace(""),"numDisplayObjects")
         pushbyte 0
         equals
         ofs0:
         iffalse ofs1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#GroupBase"),"destroyOverlay"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function measure() : void
      {
         trait method QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"measure")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal1
         pushnan
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"layoutInvalidateSizeFlag")
         convert_b
         ofs0:
         iffalse ofs1
         getlex QName(PackageNamespace(""),"measuredWidth")
         convert_d
         setlocal1
         getlex QName(PackageNamespace(""),"measuredHeight")
         convert_d
         setlocal2
         getlocal0
         callsupervoid QName(ProtectedNamespace("mx.core:UIComponent"),"measure"), 0
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"layoutInvalidateSizeFlag")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         callpropvoid QName(PackageNamespace(""),"measure"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"clipAndEnableScrolling")
         convert_b
         dup
         iftrue ofs2
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         equals
         ofs2:
         iffalse ofs3
         findproperty QName(PackageNamespace(""),"measuredMinWidth")
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredMinWidth")
         findproperty QName(PackageNamespace(""),"measuredMinHeight")
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredMinHeight")
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         equals
         dup
         iffalse ofs4
         pop
         getlex QName(PackageNamespace(""),"measuredWidth")
         getlocal1
         equals
         not
         dup
         iftrue ofs4
         pop
         getlex QName(PackageNamespace(""),"measuredHeight")
         getlocal2
         equals
         not
         ofs4:
         iffalse ofs1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function validateMatrix() : void
      {
         trait method QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"validateMatrix")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal1
         pushnan
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         ifne ofs0
         pushbyte 1
         convert_d
         setlocal1
         pushbyte 1
         convert_d
         setlocal2
         getlex QName(PackageNamespace(""),"measuredWidth")
         pushbyte 0
         ifeq ofs1
         getlex QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace(""),"measuredWidth")
         divide
         convert_d
         setlocal1
         ofs1:
         getlex QName(PackageNamespace(""),"measuredHeight")
         pushbyte 0
         ifeq ofs2
         getlex QName(PackageNamespace(""),"height")
         getlex QName(PackageNamespace(""),"measuredHeight")
         divide
         convert_d
         setlocal2
         ofs2:
         findpropstrict QName(ProtectedNamespace("mx.core:UIComponent"),"setStretchXY")
         getlocal1
         getlocal2
         callpropvoid QName(ProtectedNamespace("mx.core:UIComponent"),"setStretchXY"), 2
         ofs0:
         getlocal0
         callsupervoid QName(ProtectedNamespace("mx.core:UIComponent"),"validateMatrix"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function updateDisplayList(param1:Number, param2:Number) : void
      {
         trait method QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"updateDisplayList")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 7
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.filters"),"ShaderFilter")
         setlocal3
         pushbyte 0
         setlocal 4
         pushbyte 0
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader")
         setlocal 6
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         ifne ofs0
         getlex QName(PackageNamespace(""),"measuredWidth")
         convert_d
         setlocal1
         getlex QName(PackageNamespace(""),"measuredHeight")
         convert_d
         setlocal2
         ofs0:
         getlocal0
         getlocal1
         getlocal2
         callsupervoid QName(ProtectedNamespace("mx.core:UIComponent"),"updateDisplayList"), 2
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"maskChanged")
         iffalse ofs1
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"maskChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         iffalse ofs1
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"maskTypeChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"parent")
         iftrue ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"overlay")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getlex QName(PackageNamespace("spark.components.supportClasses"),"OverlayDepth")
         getproperty QName(PackageNamespace(""),"MASK")
         callpropvoid QName(PackageNamespace(""),"addDisplayObject"), 2
         getlex QName(PackageNamespace("spark.utils"),"MaskUtil")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         pushnull
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMask"), 2
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"luminositySettingsChanged")
         iffalse ofs2
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"luminositySettingsChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         coerce_a
         convert_b
         dup
         iffalse ofs3
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_maskType")
         getlex QName(PackageNamespace("spark.core"),"MaskType")
         getproperty QName(PackageNamespace(""),"LUMINOSITY")
         equals
         coerce_a
         convert_b
         ofs3:
         dup
         iffalse ofs4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         getproperty QName(PackageNamespace(""),"length")
         pushbyte 0
         greaterthan
         ofs4:
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         setlocal 5
         pushbyte 0
         setlocal 4
         jump ofs5
         ofs6:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         getlocal 4
         getproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace("flash.filters"),"ShaderFilter")
         istypelate
         dup
         iffalse ofs7
         pop
         findpropstrict QName(PackageNamespace("flash.filters"),"ShaderFilter")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         getlocal 4
         getproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         callproperty QName(PackageNamespace("flash.filters"),"ShaderFilter"), 1
         getproperty QName(PackageNamespace(""),"shader")
         getlex QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader")
         istypelate
         ofs7:
         iffalse ofs8
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         getlocal 4
         getproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce QName(PackageNamespace("flash.filters"),"ShaderFilter")
         setlocal3
         jump ofs9
         ofs8:
         inclocal_i 4
         ofs5:
         getlocal 4
         getlocal 5
         iflt ofs6
         ofs9:
         getlocal3
         convert_b
         dup
         iffalse ofs10
         pop
         getlocal3
         getproperty QName(PackageNamespace(""),"shader")
         getlex QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader")
         istypelate
         ofs10:
         iffalse ofs2
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader")
         getlocal3
         getproperty QName(PackageNamespace(""),"shader")
         callproperty QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader"), 1
         getlocal0
         callproperty QName(PrivateNamespace(null,"#GroupBase"),"calculateLuminositySettings"), 0
         setproperty QName(PackageNamespace(""),"mode")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         getlocal 4
         getlocal3
         setproperty MultinameL([PrivateNamespace(null,"#GroupBase"),PackageNamespace(""),PrivateNamespace(null,"#GroupBase/1"),PackageNamespace("spark.components.supportClasses"),PackageInternalNs("spark.components.supportClasses"),Namespace("http://adobe.com/AS3/2006/builtin"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.components.supportClasses:GroupBase"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         setproperty QName(PackageNamespace(""),"filters")
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"maskTypeChanged")
         iffalse ofs11
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"maskTypeChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         iffalse ofs11
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_maskType")
         getlex QName(PackageNamespace("spark.core"),"MaskType")
         getproperty QName(PackageNamespace(""),"CLIP")
         ifne ofs12
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         pushfalse
         setproperty QName(PackageNamespace(""),"cacheAsBitmap")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getproperty QName(PackageNamespace(""),"filters")
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"originalMaskFilters")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         newarray 0
         setproperty QName(PackageNamespace(""),"filters")
         jump ofs11
         ofs12:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_maskType")
         getlex QName(PackageNamespace("spark.core"),"MaskType")
         getproperty QName(PackageNamespace(""),"ALPHA")
         ifne ofs13
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         pushtrue
         setproperty QName(PackageNamespace(""),"cacheAsBitmap")
         findproperty QName(PackageNamespace(""),"cacheAsBitmap")
         pushtrue
         initproperty QName(PackageNamespace(""),"cacheAsBitmap")
         jump ofs11
         ofs13:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_maskType")
         getlex QName(PackageNamespace("spark.core"),"MaskType")
         getproperty QName(PackageNamespace(""),"LUMINOSITY")
         ifne ofs11
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         pushtrue
         setproperty QName(PackageNamespace(""),"cacheAsBitmap")
         findproperty QName(PackageNamespace(""),"cacheAsBitmap")
         pushtrue
         initproperty QName(PackageNamespace(""),"cacheAsBitmap")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader"), 0
         coerce QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityMaskShader")
         dup
         setlocal 6
         getlocal0
         callproperty QName(PrivateNamespace(null,"#GroupBase"),"calculateLuminositySettings"), 0
         setproperty QName(PackageNamespace(""),"mode")
         findpropstrict QName(PackageNamespace("flash.filters"),"ShaderFilter")
         getlocal 6
         constructprop QName(PackageNamespace("flash.filters"),"ShaderFilter"), 1
         coerce QName(PackageNamespace("flash.filters"),"ShaderFilter")
         setlocal3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_mask")
         getlocal3
         newarray 1
         setproperty QName(PackageNamespace(""),"filters")
         ofs11:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"layoutInvalidateDisplayListFlag")
         iffalse ofs14
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GroupBase"),"layoutInvalidateDisplayListFlag")
         getlocal0
         getproperty QName(PackageNamespace(""),"autoLayout")
         convert_b
         dup
         iffalse ofs15
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         convert_b
         ofs15:
         iffalse ofs16
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"updateDisplayList"), 2
         ofs16:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         iffalse ofs14
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GroupBase"),"_layout")
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"updateScrollRect"), 2
         ofs14:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function calculateLuminositySettings() : int
      {
         trait method QName(PrivateNamespace(null,"#GroupBase"),"calculateLuminositySettings")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"luminosityInvert")
         iffalse ofs0
         getlocal1
         pushbyte 1
         add
         convert_i
         setlocal1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"luminosityClip")
         iffalse ofs1
         getlocal1
         pushbyte 2
         add
         convert_i
         setlocal1
         ofs1:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function styleChanged(param1:String) : void
      {
         trait method QName(PackageNamespace(""),"styleChanged")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal3
         getlocal0
         getlocal1
         callsupervoid QName(PackageNamespace(""),"styleChanged"), 1
         getlocal1
         pushnull
         equals
         dup
         iftrue ofs0
         pop
         getlocal1
         pushstring "styleName"
         equals
         ofs0:
         convert_b
         setlocal2
         getlex QName(PackageNamespace(""),"enabled")
         not
         dup
         iffalse ofs1
         pop
         getlocal2
         convert_b
         dup
         iftrue ofs1
         pop
         getlocal1
         pushstring "disabledAlpha"
         equals
         ofs1:
         iffalse ofs2
         findpropstrict QName(PackageNamespace(""),"getStyle")
         pushstring "disabledAlpha"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         convert_d
         setlocal3
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal3
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs2
         getlocal0
         getlocal3
         setsuper QName(PackageNamespace(""),"alpha")
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function globalToLocal(param1:Point) : Point
      {
         trait method QName(PackageNamespace(""),"globalToLocal")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Point")
         returns QName(PackageNamespace("flash.geom"),"Point")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal2
         pushnan
         setlocal3
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         equals
         dup
         iffalse ofs0
         pop
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         pushnull
         equals
         not
         ofs0:
         iffalse ofs1
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getproperty QName(PackageNamespace(""),"stretchX")
         convert_d
         setlocal2
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getproperty QName(PackageNamespace(""),"stretchY")
         convert_d
         setlocal3
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         pushbyte 1
         setproperty QName(PackageNamespace(""),"stretchX")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         pushbyte 1
         setproperty QName(PackageNamespace(""),"stretchY")
         findpropstrict QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix")
         callpropvoid QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix"), 0
         getlocal0
         getlocal1
         callsuper QName(PackageNamespace(""),"globalToLocal"), 1
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getlocal2
         setproperty QName(PackageNamespace(""),"stretchX")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getlocal3
         setproperty QName(PackageNamespace(""),"stretchY")
         findpropstrict QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix")
         callpropvoid QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix"), 0
         getlocal 4
         returnvalue
         ofs1:
         getlocal0
         getlocal1
         callsuper QName(PackageNamespace(""),"globalToLocal"), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function localToGlobal(param1:Point) : Point
      {
         trait method QName(PackageNamespace(""),"localToGlobal")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Point")
         returns QName(PackageNamespace("flash.geom"),"Point")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal2
         pushnan
         setlocal3
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         equals
         dup
         iffalse ofs0
         pop
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         pushnull
         equals
         not
         ofs0:
         iffalse ofs1
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getproperty QName(PackageNamespace(""),"stretchX")
         convert_d
         setlocal2
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getproperty QName(PackageNamespace(""),"stretchY")
         convert_d
         setlocal3
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         pushbyte 1
         setproperty QName(PackageNamespace(""),"stretchX")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         pushbyte 1
         setproperty QName(PackageNamespace(""),"stretchY")
         findpropstrict QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix")
         callpropvoid QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix"), 0
         getlocal0
         getlocal1
         callsuper QName(PackageNamespace(""),"localToGlobal"), 1
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getlocal2
         setproperty QName(PackageNamespace(""),"stretchX")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_layoutFeatures")
         getlocal3
         setproperty QName(PackageNamespace(""),"stretchY")
         findpropstrict QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix")
         callpropvoid QName(ProtectedNamespace("mx.core:UIComponent"),"applyComputedMatrix"), 0
         getlocal 4
         returnvalue
         ofs1:
         getlocal0
         getlocal1
         callsuper QName(PackageNamespace(""),"localToGlobal"), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getHorizontalScrollPositionDelta(param1:uint) : Number
      {
         trait method QName(PackageNamespace(""),"getHorizontalScrollPositionDelta")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"uint")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"layout")
         getlocal1
         callproperty QName(PackageNamespace(""),"getHorizontalScrollPositionDelta"), 1
         convert_d
         jump ofs1
         ofs0:
         pushbyte 0
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getVerticalScrollPositionDelta(param1:uint) : Number
      {
         trait method QName(PackageNamespace(""),"getVerticalScrollPositionDelta")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"uint")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"layout")
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"layout")
         getlocal1
         callproperty QName(PackageNamespace(""),"getVerticalScrollPositionDelta"), 1
         convert_d
         jump ofs1
         ofs0:
         pushbyte 0
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get contentWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"contentWidth")
         flag METADATA
         metadata"Bindable"
         item "
