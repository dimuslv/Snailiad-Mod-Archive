
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 11
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("Group",[PackageNamespace("spark.components")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"InteractiveObject")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
   pushscope
   getlex QName(PackageNamespace("flash.display"),"Sprite")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"FlexSprite")
   pushscope
   getlex QName(PackageNamespace("mx.core"),"UIComponent")
   pushscope
   getlex QName(PackageNamespace("spark.components.supportClasses"),"GroupBase")
   pushscope
   getlex QName(PackageNamespace("spark.components.supportClasses"),"GroupBase")
   newclass #Group
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("spark.components"),"Group")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package spark.components
{
   import flash.display.BlendMode;
   import flash.display.DisplayObject;
   import flash.geom.Rectangle;
   import mx.core.IFlexModule;
   import mx.core.IFontContextComponent;
   import mx.core.IUIComponent;
   import mx.core.IUITextField;
   import mx.core.IVisualElement;
   import mx.core.IVisualElementContainer;
   import mx.core.UIComponent;
   import mx.core.mx_internal;
   import mx.events.FlexEvent;
   import mx.graphics.shaderClasses.ColorBurnShader;
   import mx.graphics.shaderClasses.ColorDodgeShader;
   import mx.graphics.shaderClasses.ColorShader;
   import mx.graphics.shaderClasses.ExclusionShader;
   import mx.graphics.shaderClasses.HueShader;
   import mx.graphics.shaderClasses.LuminosityShader;
   import mx.graphics.shaderClasses.SaturationShader;
   import mx.graphics.shaderClasses.SoftLightShader;
   import mx.styles.ISimpleStyleClient;
   import mx.styles.IStyleClient;
   import mx.styles.StyleProtoChain;
   import spark.components.supportClasses.GroupBase;
   import spark.core.DisplayObjectSharingMode;
   import spark.core.IGraphicElement;
   import spark.core.ISharedDisplayObject;
   import spark.events.ElementExistenceEvent;
   
   use namespace mx_internal;
   
   public class Group extends GroupBase implements IVisualElementContainer, ISharedDisplayObject
   {
      
      private static const ITEM_ORDERED_LAYERING:uint = 0;
      
      private static const SPARSE_LAYERING:uint = 1;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 11
         maxscopedepth 12
         
         code
         getlocal0
         pushscope
         findproperty QName(PrivateNamespace(null,"#Group"),"ITEM_ORDERED_LAYERING")
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#Group"),"ITEM_ORDERED_LAYERING")
         findproperty QName(PrivateNamespace(null,"#Group"),"SPARSE_LAYERING")
         pushbyte 1
         initproperty QName(PrivateNamespace(null,"#Group"),"SPARSE_LAYERING")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var needsDisplayObjectAssignment:Boolean = false;
      
      private var layeringMode:uint = 0;
      
      private var numGraphicElements:uint = 0;
      
      private var _blendMode:String = "auto";
      
      private var blendModeChanged:Boolean;
      
      private var blendShaderChanged:Boolean;
      
      private var mxmlContentChanged:Boolean = false;
      
      private var _mxmlContent:Array;
      
      private var scaleGridChanged:Boolean = false;
      
      private var scaleGridStorageVariable:Rectangle;
      
      private var createChildrenCalled:Boolean = false;
      
      private var _redrawRequested:Boolean = false;
      
      public function Group()
      {
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set resizeMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"resizeMode")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         callproperty QName(PrivateNamespace(null,"#Group"),"isValidScaleGrid"), 0
         iffalse ofs0
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         coerce_s
         setlocal1
         ofs0:
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"resizeMode")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set scrollRect(param1:Rectangle) : void
      {
         trait setter QName(PackageNamespace(""),"scrollRect")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Rectangle")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"canShareDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"scrollRect")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         pushbyte 0
         greaterthan
         dup
         iffalse ofs0
         pop
         getlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"canShareDisplayObject")
         equals
         not
         ofs0:
         iffalse ofs1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override mx_internal function set hasMouseListeners(param1:Boolean) : void
      {
         trait setter QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"hasMouseListeners")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         iffalse ofs0
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"redrawRequested")
         ofs0:
         getlocal0
         getlocal1
         setsuper QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"hasMouseListeners")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set width(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"width")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal1
         ifeq ofs0
         getlex QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         convert_b
         dup
         iffalse ofs1
         pop
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"hasMouseListeners")
         convert_b
         ofs1:
         iffalse ofs0
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"redrawRequested")
         getlocal0
         callsupervoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList"), 0
         ofs0:
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"width")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set height(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"height")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal1
         ifeq ofs0
         getlex QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         convert_b
         dup
         iffalse ofs1
         pop
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"hasMouseListeners")
         convert_b
         ofs1:
         iffalse ofs0
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"redrawRequested")
         getlocal0
         callsupervoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList"), 0
         ofs0:
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"height")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set alpha(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"alpha")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getsuper QName(PackageNamespace(""),"alpha")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         pushstring "auto"
         ifne ofs1
         getlocal1
         pushbyte 0
         greaterthan
         dup
         iffalse ofs2
         pop
         getlocal1
         pushbyte 1
         lessthan
         ofs2:
         dup
         iffalse ofs3
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"alpha")
         pushbyte 0
         equals
         dup
         iftrue ofs3
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"alpha")
         pushbyte 1
         equals
         ofs3:
         dup
         iftrue ofs4
         pop
         getlocal1
         pushbyte 0
         equals
         dup
         iftrue ofs5
         pop
         getlocal1
         pushbyte 1
         equals
         ofs5:
         dup
         iffalse ofs4
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"alpha")
         pushbyte 0
         greaterthan
         dup
         iffalse ofs4
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"alpha")
         pushbyte 1
         lessthan
         ofs4:
         iffalse ofs1
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"blendModeChanged")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs1:
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"alpha")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get blendMode() : String
      {
         trait getter QName(PackageNamespace(""),"blendMode")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function set blendMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"blendMode")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushnull
         coerce_s
         setlocal2
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         ifne ofs0
         returnvoid
         ofs0:
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"blendModeChanged")
         getlocal1
         pushstring "auto"
         ifne ofs1
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 0
         greaterthan
         dup
         iffalse ofs2
         pop
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 1
         lessthan
         ofs2:
         dup
         iffalse ofs3
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"blendMode")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"LAYER")
         equals
         not
         ofs3:
         dup
         iftrue ofs4
         pop
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 1
         equals
         dup
         iftrue ofs5
         pop
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 0
         equals
         ofs5:
         dup
         iffalse ofs4
         pop
         getlocal0
         getsuper QName(PackageNamespace(""),"blendMode")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         not
         ofs4:
         iffalse ofs6
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         ofs6:
         jump ofs7
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         coerce_s
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         getlocal0
         getlocal1
         callproperty QName(PrivateNamespace(null,"#Group"),"isAIMBlendMode"), 1
         iffalse ofs8
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"blendShaderChanged")
         ofs8:
         getlocal2
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         dup
         iftrue ofs9
         pop
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         ofs9:
         dup
         iffalse ofs10
         pop
         getlocal2
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         dup
         iffalse ofs11
         pop
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         ofs11:
         not
         ofs10:
         iffalse ofs7
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         ofs7:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function set mxmlContent(param1:Array) : void
      {
         trait setter QName(PackageNamespace(""),"mxmlContent")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Array")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"createChildrenCalled")
         iffalse ofs0
         getlocal0
         getlocal1
         callpropvoid QName(PrivateNamespace(null,"#Group"),"setMXMLContent"), 1
         jump ofs1
         ofs0:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function getMXMLContent() : Array
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getMXMLContent")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"concat"), 0
         returnvalue
         ofs0:
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function setMXMLContent(param1:Array) : void
      {
         trait method QName(PrivateNamespace(null,"#Group"),"setMXMLContent")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Array")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal2
         pushbyte 0
         setlocal3
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 4
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         pushnull
         equals
         not
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         equals
         not
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getproperty QName(PackageNamespace(""),"length")
         decrement
         convert_i
         setlocal2
         jump ofs2
         ofs3:
         label
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementRemoved"), 2
         getlocal2
         decrement_i
         setlocal2
         ofs2:
         getlocal2
         pushbyte 0
         ifge ofs3
         ofs1:
         getlocal0
         getlocal1
         iffalse ofs4
         getlocal1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"concat"), 0
         coerce QName(PackageNamespace(""),"Array")
         jump ofs5
         ofs4:
         pushnull
         coerce QName(PackageNamespace(""),"Array")
         ofs5:
         initproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         pushnull
         ifeq ofs6
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         setlocal3
         pushbyte 0
         setlocal2
         jump ofs7
         ofs8:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         dup
         setlocal 4
         getproperty QName(Namespace("mx.core:IVisualElement"),"parent")
         convert_b
         dup
         iffalse ofs9
         pop
         getlocal 4
         getproperty QName(Namespace("mx.core:IVisualElement"),"parent")
         getlocal0
         equals
         not
         ofs9:
         iffalse ofs10
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "mxmlElementNoMultipleParents"
         getlocal 4
         newarray 1
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 3
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         ofs10:
         getlocal0
         getlocal 4
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementAdded"), 2
         inclocal_i 2
         ofs7:
         getlocal2
         getlocal3
         iflt ofs8
         ofs6:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function set scale9Grid(param1:Rectangle) : void
      {
         trait setter QName(PackageNamespace(""),"scale9Grid")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Rectangle")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         pushnull
         ifeq ofs0
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"top")
         initproperty QName(PackageNamespace(""),"scaleGridTop")
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"bottom")
         initproperty QName(PackageNamespace(""),"scaleGridBottom")
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"left")
         initproperty QName(PackageNamespace(""),"scaleGridLeft")
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"right")
         initproperty QName(PackageNamespace(""),"scaleGridRight")
         jump ofs1
         ofs0:
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"scaleGridTop")
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"scaleGridBottom")
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"scaleGridLeft")
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"scaleGridRight")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleGridBottom() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleGridBottom")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"height")
         returnvalue
         ofs0:
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleGridBottom(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleGridBottom")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iftrue ofs0
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 4
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"height")
         ifeq ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getlocal1
         setproperty QName(PackageNamespace(""),"height")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleGridLeft() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleGridLeft")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"x")
         returnvalue
         ofs0:
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleGridLeft(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleGridLeft")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iftrue ofs0
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 4
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"x")
         ifeq ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getlocal1
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleGridRight() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleGridRight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"width")
         returnvalue
         ofs0:
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleGridRight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleGridRight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iftrue ofs0
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 4
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"width")
         ifeq ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getlocal1
         setproperty QName(PackageNamespace(""),"width")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleGridTop() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleGridTop")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"y")
         returnvalue
         ofs0:
         getlex QName(PackageNamespace(""),"NaN")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleGridTop(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleGridTop")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         iftrue ofs0
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 4
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         ofs0:
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getproperty QName(PackageNamespace(""),"y")
         ifeq ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridStorageVariable")
         getlocal1
         setproperty QName(PackageNamespace(""),"y")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function isValidScaleGrid() : Boolean
      {
         trait method QName(PrivateNamespace(null,"#Group"),"isValidScaleGrid")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridLeft")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridTop")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs0:
         dup
         iffalse ofs1
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridRight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs1:
         dup
         iffalse ofs2
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridBottom")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs2:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override protected function createChildren() : void
      {
         trait method QName(ProtectedNamespace("spark.components:Group"),"createChildren")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"createChildren"), 0
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"createChildrenCalled")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         iffalse ofs0
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         callpropvoid QName(PrivateNamespace(null,"#Group"),"setMXMLContent"), 1
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function commitProperties() : void
      {
         trait method QName(ProtectedNamespace("spark.components:Group"),"commitProperties")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal1
         pushbyte 0
         setlocal2
         pushnull
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal3
         getlocal0
         callsupervoid QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"commitProperties"), 0
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"blendModeChanged")
         iffalse ofs0
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#Group"),"blendModeChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         pushstring "auto"
         ifne ofs1
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 0
         equals
         dup
         iftrue ofs2
         pop
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 1
         equals
         ofs2:
         iffalse ofs3
         getlocal0
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         setsuper QName(PackageNamespace(""),"blendMode")
         jump ofs4
         ofs3:
         getlocal0
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"LAYER")
         setsuper QName(PackageNamespace(""),"blendMode")
         ofs4:
         jump ofs5
         ofs1:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         callproperty QName(PrivateNamespace(null,"#Group"),"isAIMBlendMode"), 1
         iftrue ofs5
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         setsuper QName(PackageNamespace(""),"blendMode")
         ofs5:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"blendShaderChanged")
         iffalse ofs0
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#Group"),"blendShaderChanged")
         jump ofs6
         ofs7:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs8:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorDodgeShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorDodgeShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs9:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorBurnShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorBurnShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs10:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ExclusionShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ExclusionShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs11:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"HueShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"HueShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs12:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs13:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"SaturationShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"SaturationShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs14:
         label
         getlocal0
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"SoftLightShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"SoftLightShader"), 0
         setsuper QName(PackageNamespace(""),"blendShader")
         jump ofs0
         ofs15:
         label
         jump ofs0
         ofs6:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         setlocal 4
         pushstring "color"
         getlocal 4
         ifstrictne ofs16
         pushbyte 0
         jump ofs17
         ofs16:
         pushstring "colordodge"
         getlocal 4
         ifstrictne ofs18
         pushbyte 1
         jump ofs17
         ofs18:
         pushstring "colorburn"
         getlocal 4
         ifstrictne ofs19
         pushbyte 2
         jump ofs17
         ofs19:
         pushstring "exclusion"
         getlocal 4
         ifstrictne ofs20
         pushbyte 3
         jump ofs17
         ofs20:
         pushstring "hue"
         getlocal 4
         ifstrictne ofs21
         pushbyte 4
         jump ofs17
         ofs21:
         pushstring "luminosity"
         getlocal 4
         ifstrictne ofs22
         pushbyte 5
         jump ofs17
         ofs22:
         pushstring "saturation"
         getlocal 4
         ifstrictne ofs23
         pushbyte 6
         jump ofs17
         ofs23:
         pushstring "softlight"
         getlocal 4
         ifstrictne ofs24
         pushbyte 7
         jump ofs17
         ofs24:
         jump ofs25
         pushbyte 8
         jump ofs25
         ofs25:
         pushbyte 8
         ofs17:
         kill 4
         lookupswitch ofs15, [ofs7, ofs8, ofs9, ofs10, ofs11, ofs12, ofs13, ofs14, ofs15]
         ofs0:
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         iffalse ofs26
         getlocal0
         callsupervoid QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"commitProperties"), 0
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         ofs26:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"needsDisplayObjectAssignment")
         iffalse ofs27
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#Group"),"needsDisplayObjectAssignment")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"assignDisplayObjects"), 0
         ofs27:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         iffalse ofs28
         getlocal0
         callproperty QName(PrivateNamespace(null,"#Group"),"isValidScaleGrid"), 0
         iffalse ofs28
         getlocal0
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         initproperty QName(PackageNamespace(""),"resizeMode")
         ofs28:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         pushbyte 0
         ifngt ofs29
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal1
         pushbyte 0
         setlocal2
         jump ofs30
         ofs31:
         label
         getlocal0
         getlocal2
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         astypelate
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal3
         getlocal3
         iffalse ofs32
         getlocal3
         callpropvoid QName(Namespace("spark.core:IGraphicElement"),"validateProperties"), 0
         ofs32:
         inclocal_i 2
         ofs30:
         getlocal2
         getlocal1
         iflt ofs31
         ofs29:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function validateSize(param1:Boolean = false) : void
      {
         trait method QName(PackageNamespace(""),"validateSize")
         flag OVERRIDE
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional False()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal2
         pushbyte 0
         setlocal3
         pushnull
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal 4
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         pushbyte 0
         ifngt ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal2
         pushbyte 0
         setlocal3
         jump ofs1
         ofs2:
         label
         getlocal0
         getlocal3
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         astypelate
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         dup
         setlocal 4
         iffalse ofs3
         getlocal 4
         callpropvoid QName(Namespace("spark.core:IGraphicElement"),"validateSize"), 0
         ofs3:
         inclocal_i 3
         ofs1:
         getlocal3
         getlocal2
         iflt ofs2
         ofs0:
         getlocal0
         getlocal1
         callsupervoid QName(PackageNamespace(""),"validateSize"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function setActualSize(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"setActualSize")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal1
         equals
         not
         dup
         iftrue ofs0
         pop
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal2
         equals
         not
         ofs0:
         iffalse ofs1
         getlex QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         convert_b
         dup
         iffalse ofs2
         pop
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"hasMouseListeners")
         convert_b
         ofs2:
         iffalse ofs1
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"redrawRequested")
         getlocal0
         callsupervoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList"), 0
         ofs1:
         getlocal0
         getlocal1
         getlocal2
         callsupervoid QName(PackageNamespace(""),"setActualSize"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function updateDisplayList(param1:Number, param2:Number) : void
      {
         trait method QName(ProtectedNamespace("spark.components:Group"),"updateDisplayList")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 7
         localcount 9
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal 4
         pushbyte 0
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal 6
         pushnull
         coerce QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         setlocal 7
         pushbyte 0
         setlocal 8
         getlocal0
         getlocal1
         getlocal2
         callsupervoid QName(ProtectedNamespace("spark.components.supportClasses:GroupBase"),"updateDisplayList"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"needsDisplayObjectAssignment")
         convert_b
         dup
         iffalse ofs0
         pop
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         convert_b
         ofs0:
         iffalse ofs1
         returnvoid
         ofs1:
         getlocal0
         coerce QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         setlocal3
         getlocal3
         getproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         iffalse ofs2
         getlex QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         findpropstrict QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"drawBackground")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"drawBackground"), 0
         getlocal0
         callproperty QName(PrivateNamespace(null,"#Group"),"isValidScaleGrid"), 0
         convert_b
         dup
         iffalse ofs3
         pop
         getlex QName(PackageNamespace(""),"resizeMode")
         getlex QName(PackageNamespace("spark.components"),"ResizeMode")
         getproperty QName(PackageNamespace(""),"SCALE")
         equals
         ofs3:
         iffalse ofs2
         getlex QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"lineStyle"), 0
         getlex QName(PackageNamespace(""),"graphics")
         pushbyte 0
         dup
         callpropvoid QName(PackageNamespace(""),"beginFill"), 2
         getlex QName(PackageNamespace(""),"graphics")
         pushbyte 0
         dup
         pushbyte 1
         dup
         callpropvoid QName(PackageNamespace(""),"drawRect"), 4
         getlex QName(PackageNamespace(""),"graphics")
         getlex QName(PackageNamespace(""),"measuredWidth")
         decrement
         getlex QName(PackageNamespace(""),"measuredHeight")
         decrement
         pushbyte 1
         dup
         callpropvoid QName(PackageNamespace(""),"drawRect"), 4
         getlex QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"endFill"), 0
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         pushbyte 0
         ifngt ofs4
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal 4
         pushbyte 0
         setlocal 5
         jump ofs5
         ofs6:
         label
         getlocal0
         getlocal 5
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         astypelate
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         dup
         setlocal 6
         iftrue ofs7
         jump ofs8
         ofs7:
         getlocal 6
         getproperty QName(Namespace("mx.core:IVisualElement"),"depth")
         pushbyte 0
         ifne ofs9
         getlocal 6
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         ifeq ofs10
         getlocal3
         iffalse ofs11
         getlocal3
         pushfalse
         setproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         ofs11:
         getlocal 6
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         getlex QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         astypelate
         coerce QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         setlocal3
         ofs10:
         getlocal3
         not
         dup
         iftrue ofs12
         pop
         getlocal3
         getproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         convert_b
         ofs12:
         iffalse ofs13
         getlocal 6
         callpropvoid QName(Namespace("spark.core:IGraphicElement"),"validateDisplayList"), 0
         ofs13:
         jump ofs8
         ofs9:
         getlocal 6
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         getlex QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         astypelate
         coerce QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         dup
         setlocal 7
         not
         dup
         iftrue ofs14
         pop
         getlocal 7
         getproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         convert_b
         ofs14:
         iffalse ofs8
         getlocal 6
         callpropvoid QName(Namespace("spark.core:IGraphicElement"),"validateDisplayList"), 0
         getlocal 7
         iffalse ofs8
         getlocal 7
         pushfalse
         setproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         ofs8:
         inclocal_i 5
         ofs5:
         getlocal 5
         getlocal 4
         iflt ofs6
         ofs4:
         getlocal3
         iffalse ofs15
         getlocal3
         pushfalse
         setproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         ofs15:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         iffalse ofs16
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         getlocal0
         callproperty QName(PrivateNamespace(null,"#Group"),"isValidScaleGrid"), 0
         iffalse ofs17
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         iffalse ofs18
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getproperty QName(PackageNamespace(""),"numDisplayObjects")
         convert_i
         jump ofs19
         ofs18:
         pushbyte 0
         ofs19:
         convert_i
         setlocal 8
         getlex QName(PackageNamespace(""),"numChildren")
         getlocal 8
         subtract
         pushbyte 0
         ifngt ofs20
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "scaleGridGroupError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         ofs20:
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridLeft")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridTop")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridRight")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridLeft")
         subtract
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridBottom")
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleGridTop")
         subtract
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 4
         setsuper QName(PackageNamespace(""),"scale9Grid")
         jump ofs16
         ofs17:
         getlocal0
         pushnull
         setsuper QName(PackageNamespace(""),"scale9Grid")
         ofs16:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function notifyStyleChangeInChildren(param1:String, param2:Boolean) : void
      {
         trait method QName(PackageNamespace(""),"notifyStyleChangeInChildren")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 6
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.styles"),"ISimpleStyleClient")
         setlocal 5
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         convert_b
         dup
         iftrue ofs0
         pop
         getlocal2
         not
         ofs0:
         iffalse ofs1
         returnvoid
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal3
         pushbyte 0
         setlocal 4
         jump ofs2
         ofs3:
         label
         getlocal0
         getlocal 4
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         getlex QName(PackageNamespace("mx.styles"),"ISimpleStyleClient")
         astypelate
         coerce QName(PackageNamespace("mx.styles"),"ISimpleStyleClient")
         dup
         setlocal 5
         iffalse ofs4
         getlocal 5
         getlocal1
         callpropvoid QName(Namespace("mx.styles:ISimpleStyleClient"),"styleChanged"), 1
         getlocal 5
         getlex QName(PackageNamespace("mx.styles"),"IStyleClient")
         istypelate
         iffalse ofs4
         findpropstrict QName(PackageNamespace("mx.styles"),"IStyleClient")
         getlocal 5
         callproperty QName(PackageNamespace("mx.styles"),"IStyleClient"), 1
         getlocal1
         getlocal2
         callpropvoid QName(Namespace("mx.styles:IStyleClient"),"notifyStyleChangeInChildren"), 2
         ofs4:
         inclocal_i 4
         ofs2:
         getlocal 4
         getlocal3
         iflt ofs3
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function regenerateStyleCache(param1:Boolean) : void
      {
         trait method QName(PackageNamespace(""),"regenerateStyleCache")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 5
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 4
         findpropstrict QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"initProtoChain")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"initProtoChain"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal2
         pushbyte 0
         setlocal3
         jump ofs0
         ofs1:
         label
         getlocal0
         getlocal3
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         dup
         setlocal 4
         getlex QName(PackageNamespace("mx.styles"),"IStyleClient")
         istypelate
         iffalse ofs2
         findpropstrict QName(PackageNamespace("mx.styles"),"IStyleClient")
         getlocal 4
         callproperty QName(PackageNamespace("mx.styles"),"IStyleClient"), 1
         getproperty QName(Namespace("mx.styles:IStyleClient"),"inheritingStyles")
         getlex QName(PackageNamespace("mx.styles"),"StyleProtoChain")
         getproperty QName(PackageNamespace(""),"STYLE_UNINITIALIZED")
         ifeq ofs3
         findpropstrict QName(PackageNamespace("mx.styles"),"IStyleClient")
         getlocal 4
         callproperty QName(PackageNamespace("mx.styles"),"IStyleClient"), 1
         getlocal1
         callpropvoid QName(Namespace("mx.styles:IStyleClient"),"regenerateStyleCache"), 1
         ofs3:
         jump ofs4
         ofs2:
         getlocal 4
         getlex QName(PackageNamespace("mx.core"),"IUITextField")
         istypelate
         iffalse ofs4
         findpropstrict QName(PackageNamespace("mx.core"),"IUITextField")
         getlocal 4
         callproperty QName(PackageNamespace("mx.core"),"IUITextField"), 1
         getproperty QName(Namespace("mx.core:IUITextField"),"inheritingStyles")
         iffalse ofs4
         getlex QName(PackageNamespace("mx.styles"),"StyleProtoChain")
         findpropstrict QName(PackageNamespace("mx.core"),"IUITextField")
         getlocal 4
         callproperty QName(PackageNamespace("mx.core"),"IUITextField"), 1
         callpropvoid QName(PackageNamespace(""),"initTextField"), 1
         ofs4:
         inclocal_i 3
         ofs0:
         getlocal3
         getlocal2
         iflt ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function get numElements() : int
      {
         trait getter QName(PackageNamespace(""),"numElements")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         pushnull
         ifne ofs0
         pushbyte 0
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getproperty QName(PackageNamespace(""),"length")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function getElementAt(param1:int) : IVisualElement
      {
         trait method QName(PackageNamespace(""),"getElementAt")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace("mx.core"),"IVisualElement")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callpropvoid QName(PrivateNamespace(null,"#Group"),"checkForRangeError"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function checkForRangeError(param1:int, param2:Boolean = false) : void
      {
         trait method QName(PrivateNamespace(null,"#Group"),"checkForRangeError")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"Boolean")
         optional False()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 4
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         pushnull
         equals
         iffalse ofs0
         pushbyte -1
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getproperty QName(PackageNamespace(""),"length")
         decrement
         convert_i
         ofs1:
         convert_i
         setlocal3
         getlocal2
         iffalse ofs2
         inclocal_i 3
         ofs2:
         getlocal1
         pushbyte 0
         lessthan
         dup
         iftrue ofs3
         pop
         getlocal1
         getlocal3
         greaterthan
         ofs3:
         iffalse ofs4
         findpropstrict QName(PackageNamespace(""),"RangeError")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "indexOutOfRange"
         getlocal1
         newarray 1
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 3
         constructprop QName(PackageNamespace(""),"RangeError"), 1
         throw
         ofs4:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function isAIMBlendMode(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#Group"),"isAIMBlendMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         pushstring "colordodge"
         equals
         dup
         iftrue ofs0
         pop
         getlocal1
         pushstring "colorburn"
         equals
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal1
         pushstring "exclusion"
         equals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal1
         pushstring "softlight"
         equals
         ofs2:
         dup
         iftrue ofs3
         pop
         getlocal1
         pushstring "hue"
         equals
         ofs3:
         dup
         iftrue ofs4
         pop
         getlocal1
         pushstring "saturation"
         equals
         ofs4:
         dup
         iftrue ofs5
         pop
         getlocal1
         pushstring "color"
         equals
         ofs5:
         dup
         iftrue ofs6
         pop
         getlocal1
         pushstring "luminosity"
         equals
         ofs6:
         iffalse ofs7
         pushtrue
         returnvalue
         ofs7:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function addElement(param1:IVisualElement) : IVisualElement
      {
         trait method QName(PackageNamespace(""),"addElement")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         returns QName(PackageNamespace("mx.core"),"IVisualElement")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal2
         getlocal1
         getproperty QName(Namespace("mx.core:IVisualElement"),"parent")
         getlocal0
         ifne ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         decrement
         convert_i
         setlocal2
         ofs0:
         getlocal0
         getlocal1
         getlocal2
         callproperty QName(PackageNamespace(""),"addElementAt"), 2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function addElementAt(param1:IVisualElement, param2:int) : IVisualElement
      {
         trait method QName(PackageNamespace(""),"addElementAt")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace("mx.core"),"IVisualElement")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         ifne ofs0
         findpropstrict QName(PackageNamespace(""),"ArgumentError")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "cannotAddYourselfAsYourChild"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"ArgumentError"), 1
         throw
         ofs0:
         getlocal0
         getlocal2
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#Group"),"checkForRangeError"), 2
         getlocal1
         getproperty QName(Namespace("mx.core:IVisualElement"),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal3
         getlocal3
         getlocal0
         ifne ofs1
         getlocal0
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"setElementIndex"), 2
         getlocal1
         returnvalue
         ofs1:
         getlocal3
         getlex QName(PackageNamespace("mx.core"),"IVisualElementContainer")
         istypelate
         iffalse ofs2
         findpropstrict QName(PackageNamespace("mx.core"),"IVisualElementContainer")
         getlocal3
         callproperty QName(PackageNamespace("mx.core"),"IVisualElementContainer"), 1
         getlocal1
         callpropvoid QName(Namespace("mx.core:IVisualElementContainer"),"removeElement"), 1
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         pushnull
         ifne ofs3
         getlocal0
         newarray 0
         initproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal2
         pushbyte 0
         getlocal1
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"splice"), 3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         iftrue ofs4
         getlocal0
         getlocal1
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementAdded"), 2
         ofs4:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"scaleGridChanged")
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function removeElement(param1:IVisualElement) : IVisualElement
      {
         trait method QName(PackageNamespace(""),"removeElement")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         returns QName(PackageNamespace("mx.core"),"IVisualElement")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getlocal1
         callproperty QName(PackageNamespace(""),"getElementIndex"), 1
         callproperty QName(PackageNamespace(""),"removeElementAt"), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function removeElementAt(param1:int) : IVisualElement
      {
         trait method QName(PackageNamespace(""),"removeElementAt")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace("mx.core"),"IVisualElement")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callpropvoid QName(PrivateNamespace(null,"#Group"),"checkForRangeError"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         iftrue ofs0
         getlocal0
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementRemoved"), 2
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         pushbyte 1
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"splice"), 2
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function removeAllElements() : void
      {
         trait method QName(PackageNamespace(""),"removeAllElements")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         decrement
         convert_i
         setlocal1
         jump ofs0
         ofs1:
         label
         getlocal0
         getlocal1
         callpropvoid QName(PackageNamespace(""),"removeElementAt"), 1
         getlocal1
         decrement_i
         setlocal1
         ofs0:
         getlocal1
         pushbyte 0
         ifge ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function getElementIndex(param1:IVisualElement) : int
      {
         trait method QName(PackageNamespace(""),"getElementIndex")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 5
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"indexOf"), 1
         convert_i
         jump ofs1
         ofs0:
         pushbyte -1
         ofs1:
         convert_i
         setlocal2
         getlocal2
         pushbyte -1
         ifne ofs2
         findpropstrict QName(PackageNamespace(""),"ArgumentError")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "elementNotFoundInGroup"
         getlocal1
         newarray 1
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 3
         callproperty QName(PackageNamespace(""),"ArgumentError"), 1
         throw
         ofs2:
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setElementIndex(param1:IVisualElement, param2:int) : void
      {
         trait method QName(PackageNamespace(""),"setElementIndex")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal2
         callpropvoid QName(PrivateNamespace(null,"#Group"),"checkForRangeError"), 1
         getlocal0
         getlocal1
         callpropvoid QName(PackageNamespace(""),"removeElement"), 1
         getlocal0
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"addElementAt"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function swapElements(param1:IVisualElement, param2:IVisualElement) : void
      {
         trait method QName(PackageNamespace(""),"swapElements")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getlocal1
         callproperty QName(PackageNamespace(""),"getElementIndex"), 1
         getlocal0
         getlocal2
         callproperty QName(PackageNamespace(""),"getElementIndex"), 1
         callpropvoid QName(PackageNamespace(""),"swapElementsAt"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function swapElementsAt(param1:int, param2:int) : void
      {
         trait method QName(PackageNamespace(""),"swapElementsAt")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 6
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal 5
         getlocal0
         getlocal1
         callpropvoid QName(PrivateNamespace(null,"#Group"),"checkForRangeError"), 1
         getlocal0
         getlocal2
         callpropvoid QName(PrivateNamespace(null,"#Group"),"checkForRangeError"), 1
         getlocal1
         getlocal2
         ifngt ofs0
         getlocal2
         convert_i
         setlocal 5
         getlocal1
         convert_i
         setlocal2
         getlocal 5
         convert_i
         setlocal1
         jump ofs1
         ofs0:
         getlocal1
         getlocal2
         ifne ofs1
         returnvoid
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 4
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         iftrue ofs2
         getlocal0
         getlocal3
         getlocal1
         pushfalse
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementRemoved"), 3
         getlocal0
         getlocal 4
         getlocal2
         pushfalse
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementRemoved"), 3
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal2
         pushbyte 1
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"splice"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         pushbyte 1
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"splice"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal1
         pushbyte 0
         getlocal 4
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"splice"), 3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_mxmlContent")
         getlocal2
         pushbyte 0
         getlocal3
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"splice"), 3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"mxmlContentChanged")
         iftrue ofs3
         getlocal0
         getlocal 4
         getlocal1
         pushfalse
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementAdded"), 3
         getlocal0
         getlocal3
         getlocal2
         pushfalse
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementAdded"), 3
         ofs3:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function invalidateLayering() : void
      {
         trait method QName(PackageNamespace(""),"invalidateLayering")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"layeringMode")
         getlex QName(PrivateNamespace(null,"#Group"),"ITEM_ORDERED_LAYERING")
         ifne ofs0
         getlocal0
         getlex QName(PrivateNamespace(null,"#Group"),"SPARSE_LAYERING")
         initproperty QName(PrivateNamespace(null,"#Group"),"layeringMode")
         ofs0:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function elementAdded(param1:IVisualElement, param2:int, param3:Boolean = true) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementAdded")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 7
         localcount 6
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"layout")
         iffalse ofs0
         getlex QName(PackageNamespace(""),"layout")
         getlocal2
         callpropvoid QName(PackageNamespace(""),"elementAdded"), 1
         ofs0:
         getlocal1
         getproperty QName(Namespace("mx.core:IVisualElement"),"depth")
         pushbyte 0
         ifeq ofs1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateLayering"), 0
         ofs1:
         getlocal1
         getlex QName(PackageNamespace("mx.core"),"IFlexModule")
         istypelate
         dup
         iffalse ofs2
         pop
         findpropstrict QName(PackageNamespace("mx.core"),"IFlexModule")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"IFlexModule"), 1
         getproperty QName(Namespace("mx.core:IFlexModule"),"moduleFactory")
         pushnull
         equals
         ofs2:
         iffalse ofs3
         getlex QName(PackageNamespace(""),"moduleFactory")
         pushnull
         ifeq ofs4
         findpropstrict QName(PackageNamespace("mx.core"),"IFlexModule")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"IFlexModule"), 1
         getlex QName(PackageNamespace(""),"moduleFactory")
         setproperty QName(Namespace("mx.core:IFlexModule"),"moduleFactory")
         jump ofs3
         ofs4:
         getlex QName(PackageNamespace(""),"document")
         getlex QName(PackageNamespace("mx.core"),"IFlexModule")
         istypelate
         dup
         iffalse ofs5
         pop
         getlex QName(PackageNamespace(""),"document")
         getproperty Multiname("moduleFactory",[PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         pushnull
         equals
         not
         ofs5:
         iffalse ofs6
         findpropstrict QName(PackageNamespace("mx.core"),"IFlexModule")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"IFlexModule"), 1
         getlex QName(PackageNamespace(""),"document")
         getproperty Multiname("moduleFactory",[PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         setproperty QName(Namespace("mx.core:IFlexModule"),"moduleFactory")
         jump ofs3
         ofs6:
         getlex QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"IFlexModule")
         istypelate
         dup
         iffalse ofs7
         pop
         findpropstrict QName(PackageNamespace("mx.core"),"IFlexModule")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"IFlexModule"), 1
         getproperty QName(Namespace("mx.core:IFlexModule"),"moduleFactory")
         pushnull
         equals
         not
         ofs7:
         iffalse ofs3
         findpropstrict QName(PackageNamespace("mx.core"),"IFlexModule")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"IFlexModule"), 1
         findpropstrict QName(PackageNamespace("mx.core"),"IFlexModule")
         getlex QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IFlexModule"), 1
         getproperty QName(Namespace("mx.core:IFlexModule"),"moduleFactory")
         setproperty QName(Namespace("mx.core:IFlexModule"),"moduleFactory")
         ofs3:
         getlocal1
         getlex QName(PackageNamespace("mx.core"),"IFontContextComponent")
         istypelate
         dup
         iffalse ofs8
         pop
         getlocal1
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         istypelate
         not
         ofs8:
         dup
         iffalse ofs9
         pop
         findpropstrict QName(PackageNamespace("mx.core"),"IFontContextComponent")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"IFontContextComponent"), 1
         getproperty QName(Namespace("mx.core:IFontContextComponent"),"fontContext")
         pushnull
         equals
         ofs9:
         iffalse ofs10
         findpropstrict QName(PackageNamespace("mx.core"),"IFontContextComponent")
         getlocal1
         callproperty QName(PackageNamespace("mx.core"),"IFontContextComponent"), 1
         getlex QName(PackageNamespace(""),"moduleFactory")
         setproperty QName(Namespace("mx.core:IFontContextComponent"),"fontContext")
         ofs10:
         getlocal1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         istypelate
         iffalse ofs11
         getlocal0
         dup
         setlocal 4
         getproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         increment
         setlocal 5
         getlocal 4
         getlocal 5
         setproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         kill 5
         kill 4
         getlocal0
         getlocal1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         astypelate
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"addingGraphicElementChild"), 1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         jump ofs12
         ofs11:
         getlocal0
         callproperty QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         iffalse ofs13
         getlocal0
         findpropstrict QName(PackageNamespace("flash.display"),"DisplayObject")
         getlocal1
         callproperty QName(PackageNamespace("flash.display"),"DisplayObject"), 1
         callpropvoid QName(PrivateNamespace(null,"#Group"),"addDisplayObjectToDisplayList"), 1
         jump ofs12
         ofs13:
         getlocal0
         findpropstrict QName(PackageNamespace("flash.display"),"DisplayObject")
         getlocal1
         callproperty QName(PackageNamespace("flash.display"),"DisplayObject"), 1
         getlocal2
         callpropvoid QName(PrivateNamespace(null,"#Group"),"addDisplayObjectToDisplayList"), 2
         ofs12:
         getlocal3
         iffalse ofs14
         findpropstrict QName(PackageNamespace(""),"hasEventListener")
         getlex QName(PackageNamespace("spark.events"),"ElementExistenceEvent")
         getproperty QName(PackageNamespace(""),"ELEMENT_ADD")
         callproperty QName(PackageNamespace(""),"hasEventListener"), 1
         iffalse ofs15
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("spark.events"),"ElementExistenceEvent")
         getlex QName(PackageNamespace("spark.events"),"ElementExistenceEvent")
         getproperty QName(PackageNamespace(""),"ELEMENT_ADD")
         pushfalse
         pushfalse
         getlocal1
         getlocal2
         constructprop QName(PackageNamespace("spark.events"),"ElementExistenceEvent"), 5
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         ofs15:
         getlocal1
         getlex QName(PackageNamespace("mx.core"),"IUIComponent")
         istypelate
         dup
         iffalse ofs16
         pop
         getlocal1
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"ADD")
         callproperty QName(Namespace("flash.events:IEventDispatcher"),"hasEventListener"), 1
         convert_b
         ofs16:
         iffalse ofs14
         getlocal1
         findpropstrict QName(PackageNamespace("mx.events"),"FlexEvent")
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"ADD")
         constructprop QName(PackageNamespace("mx.events"),"FlexEvent"), 1
         callpropvoid QName(Namespace("flash.events:IEventDispatcher"),"dispatchEvent"), 1
         ofs14:
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function elementRemoved(param1:IVisualElement, param2:int, param3:Boolean = true) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"elementRemoved")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 7
         localcount 7
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"DisplayObject")
         astypelate
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 4
         getlocal3
         iffalse ofs0
         findpropstrict QName(PackageNamespace(""),"hasEventListener")
         getlex QName(PackageNamespace("spark.events"),"ElementExistenceEvent")
         getproperty QName(PackageNamespace(""),"ELEMENT_REMOVE")
         callproperty QName(PackageNamespace(""),"hasEventListener"), 1
         iffalse ofs1
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("spark.events"),"ElementExistenceEvent")
         getlex QName(PackageNamespace("spark.events"),"ElementExistenceEvent")
         getproperty QName(PackageNamespace(""),"ELEMENT_REMOVE")
         pushfalse
         pushfalse
         getlocal1
         getlocal2
         constructprop QName(PackageNamespace("spark.events"),"ElementExistenceEvent"), 5
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         ofs1:
         getlocal1
         getlex QName(PackageNamespace("mx.core"),"IUIComponent")
         istypelate
         dup
         iffalse ofs2
         pop
         getlocal1
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"REMOVE")
         callproperty QName(Namespace("flash.events:IEventDispatcher"),"hasEventListener"), 1
         convert_b
         ofs2:
         iffalse ofs0
         getlocal1
         findpropstrict QName(PackageNamespace("mx.events"),"FlexEvent")
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"REMOVE")
         constructprop QName(PackageNamespace("mx.events"),"FlexEvent"), 1
         callpropvoid QName(Namespace("flash.events:IEventDispatcher"),"dispatchEvent"), 1
         ofs0:
         getlocal1
         convert_b
         dup
         iffalse ofs3
         pop
         getlocal1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         istypelate
         ofs3:
         iffalse ofs4
         getlocal0
         dup
         setlocal 5
         getproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         decrement
         setlocal 6
         getlocal 5
         getlocal 6
         setproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         kill 6
         kill 5
         getlocal0
         getlocal1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         astypelate
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"removingGraphicElementChild"), 1
         jump ofs5
         ofs4:
         getlocal 4
         convert_b
         dup
         iffalse ofs6
         pop
         getlocal 4
         getproperty QName(PackageNamespace(""),"parent")
         getlocal0
         equals
         ofs6:
         iffalse ofs5
         getlocal0
         getlocal 4
         callsupervoid QName(PackageNamespace(""),"removeChild"), 1
         ofs5:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateSize")
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace(""),"invalidateDisplayList")
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         getlex QName(PackageNamespace(""),"layout")
         iffalse ofs7
         getlex QName(PackageNamespace(""),"layout")
         getlocal2
         callpropvoid QName(PackageNamespace(""),"elementRemoved"), 1
         ofs7:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function addingGraphicElementChild(param1:IGraphicElement) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"addingGraphicElementChild")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         ofs0:
         iffalse ofs1
         getlocal0
         getlocal1
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementDisplayList"), 1
         ofs1:
         getlocal1
         getlocal0
         callpropvoid QName(Namespace("spark.core:IGraphicElement"),"parentChanged"), 1
         getlocal1
         getlex QName(PackageNamespace("mx.styles"),"IStyleClient")
         istypelate
         iffalse ofs2
         findpropstrict QName(PackageNamespace("mx.styles"),"IStyleClient")
         getlocal1
         callproperty QName(PackageNamespace("mx.styles"),"IStyleClient"), 1
         pushtrue
         callpropvoid QName(Namespace("mx.styles:IStyleClient"),"regenerateStyleCache"), 1
         ofs2:
         getlocal1
         getlex QName(PackageNamespace("mx.styles"),"ISimpleStyleClient")
         istypelate
         iffalse ofs3
         findpropstrict QName(PackageNamespace("mx.styles"),"ISimpleStyleClient")
         getlocal1
         callproperty QName(PackageNamespace("mx.styles"),"ISimpleStyleClient"), 1
         pushnull
         callpropvoid QName(Namespace("mx.styles:ISimpleStyleClient"),"styleChanged"), 1
         ofs3:
         getlocal1
         getlex QName(PackageNamespace("mx.styles"),"IStyleClient")
         istypelate
         iffalse ofs4
         findpropstrict QName(PackageNamespace("mx.styles"),"IStyleClient")
         getlocal1
         callproperty QName(PackageNamespace("mx.styles"),"IStyleClient"), 1
         pushnull
         pushtrue
         callpropvoid QName(Namespace("mx.styles:IStyleClient"),"notifyStyleChangeInChildren"), 2
         ofs4:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function removingGraphicElementChild(param1:IGraphicElement) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"removingGraphicElementChild")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"discardDisplayObject"), 1
         getlocal1
         pushnull
         callpropvoid QName(Namespace("spark.core:IGraphicElement"),"parentChanged"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function discardDisplayObject(param1:IGraphicElement) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"discardDisplayObject")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal2
         getlocal2
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         dup
         iffalse ofs1
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"parent")
         getlocal0
         equals
         ofs1:
         iffalse ofs2
         getlocal0
         getlocal2
         callsupervoid QName(PackageNamespace(""),"removeChild"), 1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         jump ofs3
         ofs2:
         getlocal2
         getlex QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         istypelate
         iffalse ofs3
         findpropstrict QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         getlocal2
         callproperty QName(PackageNamespace("spark.core"),"ISharedDisplayObject"), 1
         pushtrue
         setproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         getlocal0
         callsupervoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList"), 0
         ofs3:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function get canShareDisplayObject() : Boolean
      {
         trait getter QName(PrivateNamespace(null,"#Group"),"canShareDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"scrollRect")
         iffalse ofs0
         pushfalse
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         pushstring "normal"
         equals
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_blendMode")
         pushstring "auto"
         equals
         dup
         iffalse ofs1
         pop
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 0
         equals
         dup
         iftrue ofs1
         pop
         getlex QName(PackageNamespace(""),"alpha")
         pushbyte 1
         equals
         ofs1:
         dup
         iffalse ofs2
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"layeringMode")
         getlex QName(PrivateNamespace(null,"#Group"),"ITEM_ORDERED_LAYERING")
         equals
         ofs2:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function invalidateDisplayObjectOrdering() : Boolean
      {
         trait method QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"layeringMode")
         getlex QName(PrivateNamespace(null,"#Group"),"SPARSE_LAYERING")
         equals
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"numGraphicElements")
         pushbyte 0
         greaterthan
         ofs0:
         iffalse ofs1
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#Group"),"needsDisplayObjectAssignment")
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         pushtrue
         returnvalue
         ofs1:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function assignDisplayObjects() : void
      {
         trait method QName(PrivateNamespace(null,"#Group"),"assignDisplayObjects")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 10
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushnull
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace("mx.core"),"IVisualElement")>)
         setlocal1
         pushnull
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace("mx.core"),"IVisualElement")>)
         setlocal2
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 8
         pushnan
         setlocal 9
         pushfalse
         setlocal3
         pushbyte 0
         setlocal 4
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"canShareDisplayObject")
         iffalse ofs0
         getlocal0
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 5
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal 6
         pushbyte 0
         setlocal 7
         jump ofs1
         ofs2:
         label
         getlocal0
         getlocal 7
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 8
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"layeringMode")
         getlex QName(PrivateNamespace(null,"#Group"),"ITEM_ORDERED_LAYERING")
         ifeq ofs3
         getlocal 8
         getproperty QName(Namespace("mx.core:IVisualElement"),"depth")
         convert_d
         dup
         setlocal 9
         pushbyte 0
         ifeq ofs3
         getlocal 9
         pushbyte 0
         ifngt ofs4
         getlocal1
         pushnull
         ifne ofs5
         getlex Multiname("Vector",[PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object"),PackageNamespace("__AS3__.vec")])
         getlex QName(PackageNamespace("mx.core"),"IVisualElement")
         applytype 1
         construct 0
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace("mx.core"),"IVisualElement")>)
         setlocal1
         ofs5:
         getlocal1
         getlocal 8
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         jump ofs6
         jump ofs4
         ofs4:
         getlocal2
         pushnull
         ifne ofs7
         getlex Multiname("Vector",[PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object"),PackageNamespace("__AS3__.vec")])
         getlex QName(PackageNamespace("mx.core"),"IVisualElement")
         applytype 1
         construct 0
         coerce TypeName(QName(PackageNamespace("__AS3__.vec"),"Vector")<QName(PackageNamespace("mx.core"),"IVisualElement")>)
         setlocal2
         ofs7:
         getlocal2
         getlocal 8
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         jump ofs6
         ofs3:
         getlocal0
         getlocal 8
         getlocal 5
         getlocal 4
         callproperty QName(PrivateNamespace(null,"#Group"),"assignDisplayObjectTo"), 3
         convert_i
         setlocal 4
         getlocal 8
         coerce QName(PackageNamespace("mx.core"),"IVisualElement")
         setlocal 5
         ofs6:
         inclocal_i 7
         ofs1:
         getlocal 7
         getlocal 6
         iflt ofs2
         getlocal1
         pushnull
         ifeq ofs8
         pushtrue
         setlocal3
         getlex QName(PackageNamespace("spark.components.supportClasses"),"GroupBase")
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"sortOnLayer"), 1
         getlocal1
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         setlocal 6
         pushbyte 0
         setlocal 7
         jump ofs9
         ofs10:
         label
         getlocal0
         getlocal1
         getlocal 7
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         pushnull
         getlocal 4
         callproperty QName(PrivateNamespace(null,"#Group"),"assignDisplayObjectTo"), 3
         convert_i
         setlocal 4
         inclocal_i 7
         ofs9:
         getlocal 7
         getlocal 6
         iflt ofs10
         ofs8:
         getlocal2
         pushnull
         ifeq ofs11
         pushtrue
         setlocal3
         pushbyte 0
         setlocal 4
         getlex QName(PackageNamespace("spark.components.supportClasses"),"GroupBase")
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"sortOnLayer"), 1
         getlocal2
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         setlocal 6
         pushbyte 0
         setlocal 7
         jump ofs12
         ofs13:
         label
         getlocal0
         getlocal2
         getlocal 7
         getproperty MultinameL([PrivateNamespace(null,"#Group"),PackageNamespace(""),PackageNamespace("spark.components"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#Group/1"),PackageInternalNs("spark.components"),ProtectedNamespace("spark.components:Group"),StaticProtectedNs("spark.components:Group"),StaticProtectedNs("spark.components.supportClasses:GroupBase"),StaticProtectedNs("mx.core:UIComponent"),StaticProtectedNs("mx.core:FlexSprite"),StaticProtectedNs("flash.display:Sprite"),StaticProtectedNs("flash.display:DisplayObjectContainer"),StaticProtectedNs("flash.display:InteractiveObject"),StaticProtectedNs("flash.display:DisplayObject"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         pushnull
         getlocal 4
         callproperty QName(PrivateNamespace(null,"#Group"),"assignDisplayObjectTo"), 3
         convert_i
         setlocal 4
         inclocal_i 7
         ofs12:
         getlocal 7
         getlocal 6
         iflt ofs13
         ofs11:
         getlocal3
         pushfalse
         ifne ofs14
         getlocal0
         getlex QName(PrivateNamespace(null,"#Group"),"ITEM_ORDERED_LAYERING")
         initproperty QName(PrivateNamespace(null,"#Group"),"layeringMode")
         ofs14:
         getlocal0
         callsupervoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function assignDisplayObjectTo(param1:IVisualElement, param2:IVisualElement, param3:int) : int
      {
         trait method QName(PrivateNamespace(null,"#Group"),"assignDisplayObjectTo")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         param QName(PackageNamespace("mx.core"),"IVisualElement")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace(""),"int")
         
         body
         maxstack 4
         localcount 10
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal 4
         pushnull
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 6
         pushnull
         coerce_s
         setlocal 7
         pushfalse
         setlocal 8
         pushnull
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 9
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"DisplayObject")
         istypelate
         iffalse ofs0
         getlocal0
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"DisplayObject")
         astypelate
         getlocal3
         dup
         increment_i
         setlocal3
         callsupervoid QName(PackageNamespace(""),"setChildIndex"), 2
         jump ofs1
         ofs0:
         getlocal1
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         istypelate
         iffalse ofs1
         findpropstrict QName(PackageNamespace("spark.core"),"IGraphicElement")
         getlocal1
         callproperty QName(PackageNamespace("spark.core"),"IGraphicElement"), 1
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal 4
         getlocal2
         getlex QName(PackageNamespace("spark.core"),"IGraphicElement")
         astypelate
         coerce QName(PackageNamespace("spark.core"),"IGraphicElement")
         setlocal 5
         getlocal 4
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 6
         getlocal 4
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         coerce_s
         setlocal 7
         getlocal 5
         coerce_a
         dup
         iffalse ofs2
         pop
         getlocal 5
         getlocal 4
         callproperty QName(Namespace("spark.core:IGraphicElement"),"canShareWithNext"), 1
         coerce_a
         ofs2:
         coerce_a
         convert_b
         dup
         iffalse ofs3
         pop
         getlocal 4
         getlocal 5
         callproperty QName(Namespace("spark.core:IGraphicElement"),"canShareWithPrevious"), 1
         coerce_a
         convert_b
         ofs3:
         dup
         iffalse ofs4
         pop
         getlocal 4
         getlocal 5
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         callproperty QName(Namespace("spark.core:IGraphicElement"),"setSharedDisplayObject"), 1
         convert_b
         ofs4:
         iffalse ofs5
         getlocal 5
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs6
         getlocal 5
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_SHARED_OBJECT")
         setproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         ofs6:
         getlocal 4
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         setproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         jump ofs7
         ofs5:
         getlocal2
         getlocal0
         equals
         dup
         iffalse ofs8
         pop
         getlocal 4
         getlocal0
         callproperty QName(Namespace("spark.core:IGraphicElement"),"setSharedDisplayObject"), 1
         convert_b
         ofs8:
         iffalse ofs9
         getlocal 4
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         setproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         jump ofs7
         ofs9:
         getlocal 7
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         setlocal 8
         getlocal 6
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 9
         getlocal 8
         not
         dup
         iftrue ofs10
         pop
         getlocal 9
         not
         ofs10:
         iffalse ofs11
         getlocal 4
         callproperty QName(Namespace("spark.core:IGraphicElement"),"createDisplayObject"), 0
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 9
         ofs11:
         getlocal 9
         iffalse ofs12
         getlocal0
         getlocal 9
         getlocal3
         dup
         increment_i
         setlocal3
         callpropvoid QName(PrivateNamespace(null,"#Group"),"addDisplayObjectToDisplayList"), 2
         ofs12:
         getlocal 4
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         setproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         ofs7:
         getlocal0
         getlocal 4
         getlocal 7
         getlocal 6
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateAfterAssignment"), 3
         ofs1:
         getlocal3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function invalidateAfterAssignment(param1:IGraphicElement, param2:String, param3:DisplayObject) : void
      {
         trait method QName(PrivateNamespace(null,"#Group"),"invalidateAfterAssignment")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 6
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 4
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObjectSharingMode")
         coerce_s
         setlocal 5
         getlocal3
         getlocal 4
         equals
         dup
         iffalse ofs0
         pop
         getlocal 5
         getlocal2
         equals
         ofs0:
         iffalse ofs1
         returnvoid
         ofs1:
         getlocal 4
         getlex QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         istypelate
         iffalse ofs2
         findpropstrict QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         getlocal 4
         callproperty QName(PackageNamespace("spark.core"),"ISharedDisplayObject"), 1
         pushtrue
         setproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         ofs2:
         getlocal3
         getlex QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         istypelate
         iffalse ofs3
         findpropstrict QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         getlocal3
         callproperty QName(PackageNamespace("spark.core"),"ISharedDisplayObject"), 1
         pushtrue
         setproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         ofs3:
         getlocal3
         coerce_a
         dup
         iffalse ofs4
         pop
         getlocal3
         getproperty QName(PackageNamespace(""),"parent")
         getlocal0
         equals
         coerce_a
         ofs4:
         coerce_a
         convert_b
         dup
         iffalse ofs5
         pop
         getlocal3
         getlocal 4
         equals
         not
         coerce_a
         convert_b
         ofs5:
         dup
         iffalse ofs6
         pop
         getlocal2
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         ofs6:
         iffalse ofs7
         getlocal0
         getlocal3
         callsupervoid QName(PackageNamespace(""),"removeChild"), 1
         ofs7:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function addDisplayObjectToDisplayList(param1:DisplayObject, param2:int = -1) : void
      {
         trait method QName(PrivateNamespace(null,"#Group"),"addDisplayObjectToDisplayList")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         param QName(PackageNamespace(""),"int")
         optional Integer(-1)
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         iffalse ofs0
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_overlay")
         getproperty QName(PackageNamespace(""),"numDisplayObjects")
         convert_i
         jump ofs1
         ofs0:
         pushbyte 0
         ofs1:
         convert_i
         setlocal3
         getlocal1
         getproperty QName(PackageNamespace(""),"parent")
         getlocal0
         ifne ofs2
         getlocal0
         getlocal1
         getlocal2
         pushbyte -1
         ifeq ofs3
         getlocal2
         convert_i
         jump ofs4
         ofs3:
         getlocal0
         getsuper QName(PackageNamespace(""),"numChildren")
         decrement
         getlocal3
         subtract
         convert_i
         ofs4:
         callsupervoid QName(PackageNamespace(""),"setChildIndex"), 2
         jump ofs5
         ofs2:
         getlocal0
         getlocal1
         getlocal2
         pushbyte -1
         ifeq ofs6
         getlocal2
         convert_i
         jump ofs7
         ofs6:
         getlocal0
         getsuper QName(PackageNamespace(""),"numChildren")
         getlocal3
         subtract
         convert_i
         ofs7:
         callsupervoid QName(PackageNamespace(""),"addChildAt"), 2
         ofs5:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateGraphicElementDisplayList(param1:IGraphicElement) : void
      {
         trait method QName(PackageNamespace(""),"invalidateGraphicElementDisplayList")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         getlex QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         istypelate
         iffalse ofs0
         findpropstrict QName(PackageNamespace("spark.core"),"ISharedDisplayObject")
         getlocal1
         getproperty QName(Namespace("spark.core:IGraphicElement"),"displayObject")
         callproperty QName(PackageNamespace("spark.core"),"ISharedDisplayObject"), 1
         pushtrue
         setproperty QName(Namespace("spark.core:ISharedDisplayObject"),"redrawRequested")
         ofs0:
         getlocal0
         callsupervoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateGraphicElementProperties(param1:IGraphicElement) : void
      {
         trait method QName(PackageNamespace(""),"invalidateGraphicElementProperties")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"invalidateProperties")
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateGraphicElementSize(param1:IGraphicElement) : void
      {
         trait method QName(PackageNamespace(""),"invalidateGraphicElementSize")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         callsupervoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$invalidateSize"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateGraphicElementSharing(param1:IGraphicElement) : void
      {
         trait method QName(PackageNamespace(""),"invalidateGraphicElementSharing")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#Group"),"invalidateDisplayObjectOrdering"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function addChild(param1:DisplayObject) : DisplayObject
      {
         trait method QName(PackageNamespace(""),"addChild")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "addChildError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function addChildAt(param1:DisplayObject, param2:int) : DisplayObject
      {
         trait method QName(PackageNamespace(""),"addChildAt")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "addChildAtError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function removeChild(param1:DisplayObject) : DisplayObject
      {
         trait method QName(PackageNamespace(""),"removeChild")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "removeChildError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function removeChildAt(param1:int) : DisplayObject
      {
         trait method QName(PackageNamespace(""),"removeChildAt")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "removeChildAtError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function setChildIndex(param1:DisplayObject, param2:int) : void
      {
         trait method QName(PackageNamespace(""),"setChildIndex")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "setChildIndexError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function swapChildren(param1:DisplayObject, param2:DisplayObject) : void
      {
         trait method QName(PackageNamespace(""),"swapChildren")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "swapChildrenError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function swapChildrenAt(param1:int, param2:int) : void
      {
         trait method QName(PackageNamespace(""),"swapChildrenAt")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"int")
         param QName(PackageNamespace(""),"int")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(ProtectedNamespace("mx.core:UIComponent"),"resourceManager")
         pushstring "components"
         pushstring "swapChildrenAtError"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function set mouseEnabledWhereTransparent(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         setsuper QName(PackageNamespace(""),"mouseEnabledWhereTransparent")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"redrawRequested")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get redrawRequested() : Boolean
      {
         trait getter QName(PackageNamespace(""),"redrawRequested")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#Group"),"_redrawRequested")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set redrawRequested(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"redrawRequested")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#Group"),"_redrawRequested")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
