
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 5
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("BasicLayout",[PackageNamespace("spark.layouts")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("mx.utils"),"OnDemandEventDispatcher")
   pushscope
   getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutBase")
   pushscope
   getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutBase")
   newclass #BasicLayout
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("spark.layouts"),"BasicLayout")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package spark.layouts
{
   import mx.core.ILayoutElement;
   import mx.core.IVisualElement;
   import mx.core.mx_internal;
   import mx.resources.ResourceManager;
   import spark.components.supportClasses.GroupBase;
   import spark.layouts.supportClasses.LayoutBase;
   import spark.layouts.supportClasses.LayoutElementHelper;
   
   use namespace mx_internal;
   
   public class BasicLayout extends LayoutBase
   {
      
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.1.0.16076"
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function BasicLayout()
      {
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private static function constraintsDetermineWidth(param1:ILayoutElement) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#BasicLayout"),"constraintsDetermineWidth")
         flag FINAL
         dispid 3
         method
         name null
         param QName(PackageNamespace("mx.core"),"ILayoutElement")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutElement"),"percentWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iftrue ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutElement"),"left")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutElement"),"right")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs0:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private static function constraintsDetermineHeight(param1:ILayoutElement) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#BasicLayout"),"constraintsDetermineHeight")
         flag FINAL
         dispid 4
         method
         name null
         param QName(PackageNamespace("mx.core"),"ILayoutElement")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutElement"),"percentHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iftrue ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutElement"),"top")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutElement"),"bottom")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs0:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private static function maxSizeToFitIn(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number) : Number
      {
         trait method QName(PrivateNamespace(null,"#BasicLayout"),"maxSizeToFitIn")
         flag FINAL
         dispid 5
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 6
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal1
         pushbyte 2
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         callproperty QName(PackageNamespace(""),"abs"), 1
         multiply
         subtract
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal3
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal1
         getlocal3
         subtract
         returnvalue
         ofs1:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 4
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs2
         getlocal1
         getlocal 4
         subtract
         returnvalue
         ofs2:
         getlocal1
         getlocal 5
         subtract
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function checkUseVirtualLayout() : void
      {
         trait method QName(PrivateNamespace(null,"#BasicLayout"),"checkUseVirtualLayout")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"useVirtualLayout")
         iffalse ofs0
         findpropstrict QName(PackageNamespace(""),"Error")
         getlex QName(PackageNamespace("mx.resources"),"ResourceManager")
         callproperty QName(PackageNamespace(""),"getInstance"), 0
         pushstring "layout"
         pushstring "basicLayoutNotVirtualized"
         callproperty QName(Namespace("mx.resources:IResourceManager"),"getString"), 2
         constructprop QName(PackageNamespace(""),"Error"), 1
         throw
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function measure() : void
      {
         trait method QName(PackageNamespace(""),"measure")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 22
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.core"),"ILayoutElement")
         setlocal 8
         pushnan
         setlocal 9
         pushnan
         setlocal 10
         pushnan
         setlocal 11
         pushnan
         setlocal 12
         pushnan
         setlocal 13
         pushnan
         setlocal 14
         pushnan
         setlocal 15
         pushnan
         setlocal 16
         pushnan
         setlocal 17
         pushnan
         setlocal 18
         pushnan
         setlocal 19
         pushnan
         setlocal 20
         pushnan
         setlocal 21
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BasicLayout"),"checkUseVirtualLayout"), 0
         getlocal0
         callsupervoid QName(PackageNamespace(""),"measure"), 0
         getlex QName(PackageNamespace(""),"target")
         coerce QName(PackageNamespace("spark.components.supportClasses"),"GroupBase")
         setlocal1
         getlocal1
         iftrue ofs0
         returnvoid
         ofs0:
         pushbyte 0
         convert_d
         setlocal2
         pushbyte 0
         convert_d
         setlocal3
         pushbyte 0
         convert_d
         setlocal 4
         pushbyte 0
         convert_d
         setlocal 5
         getlocal1
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal 6
         pushbyte 0
         setlocal 7
         jump ofs1
         ofs2:
         label
         getlocal1
         getlocal 7
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         coerce QName(PackageNamespace("mx.core"),"ILayoutElement")
         dup
         setlocal 8
         not
         dup
         iftrue ofs3
         pop
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"includeInLayout")
         not
         ofs3:
         iffalse ofs4
         jump ofs5
         ofs4:
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"horizontalCenter")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 9
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"verticalCenter")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 10
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"baseline")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 11
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"left")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 12
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"right")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 13
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"top")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 14
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"bottom")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 15
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 12
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs6
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 13
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs6:
         iffalse ofs7
         getlocal 12
         getlocal 13
         add
         convert_d
         setlocal 16
         jump ofs8
         ofs7:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 9
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs9
         getlex QName(PackageNamespace(""),"Math")
         getlocal 9
         callproperty QName(PackageNamespace(""),"abs"), 1
         pushbyte 2
         multiply
         convert_d
         setlocal 16
         jump ofs8
         ofs9:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 12
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iftrue ofs10
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 13
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs10:
         iffalse ofs11
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 12
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs12
         pushbyte 0
         convert_d
         jump ofs13
         ofs12:
         getlocal 12
         convert_d
         ofs13:
         convert_d
         dup
         setlocal 16
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 13
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs14
         pushbyte 0
         coerce_a
         jump ofs15
         ofs14:
         getlocal 13
         coerce_a
         ofs15:
         add
         convert_d
         setlocal 16
         jump ofs8
         ofs11:
         getlocal 8
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getBoundsXAtSize"), 2
         convert_d
         setlocal 16
         ofs8:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 14
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs16
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 15
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs16:
         iffalse ofs17
         getlocal 14
         getlocal 15
         add
         convert_d
         setlocal 17
         jump ofs18
         ofs17:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 10
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs19
         getlex QName(PackageNamespace(""),"Math")
         getlocal 10
         callproperty QName(PackageNamespace(""),"abs"), 1
         pushbyte 2
         multiply
         convert_d
         setlocal 17
         jump ofs18
         ofs19:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 11
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs20
         getlex QName(PackageNamespace(""),"Math")
         getlocal 11
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"baselinePosition")
         subtract
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_d
         setlocal 17
         jump ofs18
         ofs20:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 14
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iftrue ofs21
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 15
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs21:
         iffalse ofs22
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 14
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs23
         pushbyte 0
         convert_d
         jump ofs24
         ofs23:
         getlocal 14
         convert_d
         ofs24:
         convert_d
         dup
         setlocal 17
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 15
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs25
         pushbyte 0
         coerce_a
         jump ofs26
         ofs25:
         getlocal 15
         coerce_a
         ofs26:
         add
         convert_d
         setlocal 17
         jump ofs18
         ofs22:
         getlocal 8
         getlex QName(PackageNamespace(""),"NaN")
         getlex QName(PackageNamespace(""),"NaN")
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getBoundsYAtSize"), 2
         convert_d
         setlocal 17
         ofs18:
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getPreferredBoundsWidth"), 0
         convert_d
         setlocal 18
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getPreferredBoundsHeight"), 0
         convert_d
         setlocal 19
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         getlocal 16
         getlocal 18
         add
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal2
         getlex QName(PackageNamespace(""),"Math")
         getlocal3
         getlocal 17
         getlocal 19
         add
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal3
         findpropstrict QName(PrivateNamespace(null,"#BasicLayout"),"constraintsDetermineWidth")
         getlocal 8
         callproperty QName(PrivateNamespace(null,"#BasicLayout"),"constraintsDetermineWidth"), 1
         iffalse ofs27
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMinBoundsWidth"), 0
         convert_d
         jump ofs28
         ofs27:
         getlocal 18
         convert_d
         ofs28:
         convert_d
         setlocal 20
         findpropstrict QName(PrivateNamespace(null,"#BasicLayout"),"constraintsDetermineHeight")
         getlocal 8
         callproperty QName(PrivateNamespace(null,"#BasicLayout"),"constraintsDetermineHeight"), 1
         iffalse ofs29
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMinBoundsHeight"), 0
         convert_d
         jump ofs30
         ofs29:
         getlocal 19
         convert_d
         ofs30:
         convert_d
         setlocal 21
         getlex QName(PackageNamespace(""),"Math")
         getlocal 4
         getlocal 16
         getlocal 20
         add
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal 4
         getlex QName(PackageNamespace(""),"Math")
         getlocal 5
         getlocal 17
         getlocal 21
         add
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal 5
         ofs5:
         inclocal_i 7
         ofs1:
         getlocal 7
         getlocal 6
         iflt ofs2
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         getlocal 4
         callproperty QName(PackageNamespace(""),"max"), 2
         callproperty QName(PackageNamespace(""),"ceil"), 1
         setproperty QName(PackageNamespace(""),"measuredWidth")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getlex QName(PackageNamespace(""),"Math")
         getlocal3
         getlocal 5
         callproperty QName(PackageNamespace(""),"max"), 2
         callproperty QName(PackageNamespace(""),"ceil"), 1
         setproperty QName(PackageNamespace(""),"measuredHeight")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getlocal 4
         callproperty QName(PackageNamespace(""),"ceil"), 1
         setproperty QName(PackageNamespace(""),"measuredMinWidth")
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getlocal 5
         callproperty QName(PackageNamespace(""),"ceil"), 1
         setproperty QName(PackageNamespace(""),"measuredMinHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function updateDisplayList(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"updateDisplayList")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 8
         localcount 28
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.core"),"ILayoutElement")
         setlocal 8
         pushnan
         setlocal 9
         pushnan
         setlocal 10
         pushnan
         setlocal 11
         pushnan
         setlocal 12
         pushnan
         setlocal 13
         pushnan
         setlocal 14
         pushnan
         setlocal 15
         pushnan
         setlocal 16
         pushnan
         setlocal 17
         pushnan
         setlocal 18
         pushnan
         setlocal 19
         pushnan
         setlocal 20
         pushnan
         setlocal 21
         pushnan
         setlocal 22
         pushnan
         setlocal 23
         pushnan
         setlocal 24
         pushnan
         setlocal 25
         pushnan
         setlocal 26
         pushnan
         setlocal 27
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#BasicLayout"),"checkUseVirtualLayout"), 0
         getlocal0
         getlocal1
         getlocal2
         callsupervoid QName(PackageNamespace(""),"updateDisplayList"), 2
         getlex QName(PackageNamespace(""),"target")
         coerce QName(PackageNamespace("spark.components.supportClasses"),"GroupBase")
         setlocal3
         getlocal3
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal3
         getproperty QName(PackageNamespace(""),"numElements")
         convert_i
         setlocal 4
         pushbyte 0
         convert_d
         setlocal 5
         pushbyte 0
         convert_d
         setlocal 6
         pushbyte 0
         setlocal 7
         jump ofs1
         ofs2:
         label
         getlocal3
         getlocal 7
         callproperty QName(PackageNamespace(""),"getElementAt"), 1
         coerce QName(PackageNamespace("mx.core"),"ILayoutElement")
         dup
         setlocal 8
         not
         dup
         iftrue ofs3
         pop
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"includeInLayout")
         not
         ofs3:
         iffalse ofs4
         jump ofs5
         ofs4:
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"horizontalCenter")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 9
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"verticalCenter")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 10
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"baseline")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 11
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"left")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 12
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"right")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 13
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"top")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 14
         getlex QName(PackageNamespace("spark.layouts.supportClasses"),"LayoutElementHelper")
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"bottom")
         callproperty QName(PackageNamespace(""),"parseConstraintValue"), 1
         convert_d
         setlocal 15
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"percentWidth")
         convert_d
         setlocal 16
         getlocal 8
         getproperty QName(Namespace("mx.core:ILayoutElement"),"percentHeight")
         convert_d
         setlocal 17
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal 18
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal 19
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal 20
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal 21
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 16
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs6
         getlocal1
         convert_d
         setlocal 26
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 12
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs7
         getlocal 26
         getlocal 12
         subtract
         convert_d
         setlocal 26
         ofs7:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 13
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs8
         getlocal 26
         getlocal 13
         subtract
         convert_d
         setlocal 26
         ofs8:
         getlex QName(PackageNamespace(""),"Math")
         getlocal 26
         getlex QName(PackageNamespace(""),"Math")
         getlocal 16
         pushdouble 0.01
         multiply
         pushbyte 1
         callproperty QName(PackageNamespace(""),"min"), 2
         multiply
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_d
         setlocal 20
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMaxBoundsWidth"), 0
         findpropstrict QName(PrivateNamespace(null,"#BasicLayout"),"maxSizeToFitIn")
         getlocal1
         getlocal 9
         getlocal 12
         getlocal 13
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getLayoutBoundsX"), 0
         callproperty QName(PrivateNamespace(null,"#BasicLayout"),"maxSizeToFitIn"), 5
         callproperty QName(PackageNamespace(""),"min"), 2
         convert_d
         setlocal 18
         jump ofs9
         ofs6:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 12
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs10
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 13
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs10:
         iffalse ofs9
         getlocal1
         getlocal 13
         subtract
         getlocal 12
         subtract
         convert_d
         setlocal 20
         ofs9:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 17
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs11
         getlocal2
         convert_d
         setlocal 27
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 14
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs12
         getlocal 27
         getlocal 14
         subtract
         convert_d
         setlocal 27
         ofs12:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 15
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs13
         getlocal 27
         getlocal 15
         subtract
         convert_d
         setlocal 27
         ofs13:
         getlex QName(PackageNamespace(""),"Math")
         getlocal 27
         getlex QName(PackageNamespace(""),"Math")
         getlocal 17
         pushdouble 0.01
         multiply
         pushbyte 1
         callproperty QName(PackageNamespace(""),"min"), 2
         multiply
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_d
         setlocal 21
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMaxBoundsHeight"), 0
         findpropstrict QName(PrivateNamespace(null,"#BasicLayout"),"maxSizeToFitIn")
         getlocal2
         getlocal 10
         getlocal 14
         getlocal 15
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getLayoutBoundsY"), 0
         callproperty QName(PrivateNamespace(null,"#BasicLayout"),"maxSizeToFitIn"), 5
         callproperty QName(PackageNamespace(""),"min"), 2
         convert_d
         setlocal 19
         jump ofs14
         ofs11:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 14
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs15
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 15
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs15:
         iffalse ofs14
         getlocal2
         getlocal 15
         subtract
         getlocal 14
         subtract
         convert_d
         setlocal 21
         ofs14:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 20
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs16
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 18
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs17
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMaxBoundsWidth"), 0
         convert_d
         setlocal 18
         ofs17:
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMinBoundsWidth"), 0
         getlex QName(PackageNamespace(""),"Math")
         getlocal 18
         getlocal 20
         callproperty QName(PackageNamespace(""),"min"), 2
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal 20
         ofs16:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 21
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs18
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 19
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs19
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMaxBoundsHeight"), 0
         convert_d
         setlocal 19
         ofs19:
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getMinBoundsHeight"), 0
         getlex QName(PackageNamespace(""),"Math")
         getlocal 19
         getlocal 21
         callproperty QName(PackageNamespace(""),"min"), 2
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal 21
         ofs18:
         getlocal 8
         getlocal 20
         getlocal 21
         callpropvoid QName(Namespace("mx.core:ILayoutElement"),"setLayoutBoundsSize"), 2
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getLayoutBoundsWidth"), 0
         convert_d
         setlocal 22
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getLayoutBoundsHeight"), 0
         convert_d
         setlocal 23
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal 24
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal 25
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 9
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs20
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         getlocal 22
         subtract
         pushbyte 2
         divide
         getlocal 9
         add
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_d
         setlocal 24
         jump ofs21
         ofs20:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 12
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs22
         getlocal 12
         convert_d
         setlocal 24
         jump ofs21
         ofs22:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 13
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs23
         getlocal1
         getlocal 22
         subtract
         getlocal 13
         subtract
         convert_d
         setlocal 24
         jump ofs21
         ofs23:
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getLayoutBoundsX"), 0
         convert_d
         setlocal 24
         ofs21:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 10
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs24
         getlex QName(PackageNamespace(""),"Math")
         getlocal2
         getlocal 23
         subtract
         pushbyte 2
         divide
         getlocal 10
         add
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_d
         setlocal 25
         jump ofs25
         ofs24:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 11
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs26
         getlex QName(PackageNamespace(""),"Math")
         getlocal 11
         findpropstrict QName(PackageNamespace("mx.core"),"IVisualElement")
         getlocal 8
         callproperty QName(PackageNamespace("mx.core"),"IVisualElement"), 1
         getproperty QName(Namespace("mx.core:ILayoutElement"),"baselinePosition")
         subtract
         callproperty QName(PackageNamespace(""),"round"), 1
         convert_d
         setlocal 25
         jump ofs25
         ofs26:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 14
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs27
         getlocal 14
         convert_d
         setlocal 25
         jump ofs25
         ofs27:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal 15
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs28
         getlocal2
         getlocal 23
         subtract
         getlocal 15
         subtract
         convert_d
         setlocal 25
         jump ofs25
         ofs28:
         getlocal 8
         callproperty QName(Namespace("mx.core:ILayoutElement"),"getLayoutBoundsY"), 0
         convert_d
         setlocal 25
         ofs25:
         getlocal 8
         getlocal 24
         getlocal 25
         callpropvoid QName(Namespace("mx.core:ILayoutElement"),"setLayoutBoundsPosition"), 2
         getlex QName(PackageNamespace(""),"Math")
         getlocal 5
         getlocal 24
         getlocal 22
         add
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal 5
         getlex QName(PackageNamespace(""),"Math")
         getlocal 6
         getlocal 25
         getlocal 23
         add
         callproperty QName(PackageNamespace(""),"max"), 2
         convert_d
         setlocal 6
         ofs5:
         inclocal_i 7
         ofs1:
         getlocal 7
         getlocal 4
         iflt ofs2
         getlocal3
         getlex QName(PackageNamespace(""),"Math")
         getlocal 5
         callproperty QName(PackageNamespace(""),"ceil"), 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal 6
         callproperty QName(PackageNamespace(""),"ceil"), 1
         callpropvoid QName(PackageNamespace(""),"setContentSize"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
