
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 3
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("FlxU",[PackageNamespace("org.flixel")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace(""),"Object")
   newclass #FlxU
   popscope
   initproperty QName(PackageNamespace("org.flixel"),"FlxU")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package org.flixel
{
   import flash.net.URLRequest;
   import flash.net.navigateToURL;
   import flash.utils.getDefinitionByName;
   import flash.utils.getQualifiedClassName;
   import flash.utils.getTimer;
   
   public class FlxU
   {
      
      static var roundingError:Number = 1.0E-7;
      
      public static var quadTree:FlxQuadTree;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findproperty QName(PackageInternalNs("org.flixel"),"roundingError")
         pushdouble 1.0E-7
         setproperty QName(PackageInternalNs("org.flixel"),"roundingError")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function FlxU()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public static function openURL(param1:String) : void
      {
         trait method QName(PackageNamespace(""),"openURL")
         flag FINAL
         dispid 3
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.net"),"navigateToURL")
         findpropstrict QName(PackageNamespace("flash.net"),"URLRequest")
         getlocal1
         constructprop QName(PackageNamespace("flash.net"),"URLRequest"), 1
         pushstring "_blank"
         callpropvoid QName(PackageNamespace("flash.net"),"navigateToURL"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public static function abs(param1:Number) : Number
      {
         trait method QName(PackageNamespace(""),"abs")
         flag FINAL
         dispid 4
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal1
         pushbyte 0
         ifngt ofs0
         getlocal1
         convert_d
         jump ofs1
         ofs0:
         getlocal1
         negate
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function floor(param1:Number) : Number
      {
         trait method QName(PackageNamespace(""),"floor")
         flag FINAL
         dispid 5
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"int")
         getlocal1
         callproperty QName(PackageNamespace(""),"int"), 1
         convert_d
         setlocal2
         getlocal1
         pushbyte 0
         ifngt ofs0
         getlocal2
         convert_d
         jump ofs1
         ofs0:
         getlocal2
         getlocal1
         ifeq ofs2
         getlocal2
         decrement
         convert_d
         jump ofs1
         ofs2:
         getlocal2
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function ceil(param1:Number) : Number
      {
         trait method QName(PackageNamespace(""),"ceil")
         flag FINAL
         dispid 6
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"int")
         getlocal1
         callproperty QName(PackageNamespace(""),"int"), 1
         convert_d
         setlocal2
         getlocal1
         pushbyte 0
         ifngt ofs0
         getlocal2
         getlocal1
         ifeq ofs1
         getlocal2
         pushbyte 1
         add
         convert_d
         jump ofs2
         ofs1:
         getlocal2
         convert_d
         ofs2:
         jump ofs3
         ofs0:
         getlocal2
         convert_d
         ofs3:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function min(param1:Number, param2:Number) : Number
      {
         trait method QName(PackageNamespace(""),"min")
         flag FINAL
         dispid 7
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal2
         ifnle ofs0
         getlocal1
         convert_d
         jump ofs1
         ofs0:
         getlocal2
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function max(param1:Number, param2:Number) : Number
      {
         trait method QName(PackageNamespace(""),"max")
         flag FINAL
         dispid 8
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal2
         ifnge ofs0
         getlocal1
         convert_d
         jump ofs1
         ofs0:
         getlocal2
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function random(param1:Number = NaN) : Number
      {
         trait method QName(PackageNamespace(""),"random")
         flag FINAL
         dispid 9
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         optional Double(NaN)
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs0
         getlex QName(PackageNamespace(""),"Math")
         callproperty QName(PackageNamespace(""),"random"), 0
         returnvalue
         ofs0:
         getlocal1
         pushbyte 0
         ifne ofs1
         getlex QName(PackageNamespace(""),"Number")
         getproperty QName(PackageNamespace(""),"MIN_VALUE")
         convert_d
         setlocal1
         ofs1:
         getlocal1
         pushbyte 1
         ifnge ofs2
         getlocal1
         pushbyte 1
         modulo
         pushbyte 0
         ifne ofs3
         getlocal1
         getlex QName(PackageNamespace(""),"Math")
         getproperty QName(PackageNamespace(""),"PI")
         divide
         convert_d
         setlocal1
         ofs3:
         getlocal1
         pushbyte 1
         modulo
         convert_d
         setlocal1
         jump ofs4
         ofs2:
         getlocal1
         pushbyte 0
         ifnlt ofs4
         getlocal1
         pushbyte 1
         modulo
         pushbyte 1
         add
         convert_d
         setlocal1
         ofs4:
         pushint 69621
         findpropstrict QName(PackageNamespace(""),"int")
         getlocal1
         pushint 2147483647
         multiply
         callproperty QName(PackageNamespace(""),"int"), 1
         multiply
         pushint 2147483647
         modulo
         pushint 2147483647
         divide
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function startProfile() : uint
      {
         trait method QName(PackageNamespace(""),"startProfile")
         flag FINAL
         dispid 10
         method
         name null
         returns QName(PackageNamespace(""),"uint")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.utils"),"getTimer")
         callproperty QName(PackageNamespace("flash.utils"),"getTimer"), 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function endProfile(param1:uint, param2:String = "Profiler", param3:Boolean = true) : uint
      {
         trait method QName(PackageNamespace(""),"endProfile")
         flag FINAL
         dispid 11
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         optional Utf8("Profiler")
         optional True()
         returns QName(PackageNamespace(""),"uint")
         
         body
         maxstack 4
         localcount 5
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.utils"),"getTimer")
         callproperty QName(PackageNamespace("flash.utils"),"getTimer"), 0
         convert_u
         setlocal 4
         getlocal3
         iffalse ofs0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getlocal2
         pushstring ": "
         add
         getlocal 4
         getlocal1
         subtract
         pushshort 1000
         divide
         add
         pushstring "s"
         add
         callpropvoid QName(PackageNamespace(""),"log"), 1
         ofs0:
         getlocal 4
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function rotatePoint(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:FlxPoint = null) : FlxPoint
      {
         trait method QName(PackageNamespace(""),"rotatePoint")
         flag FINAL
         dispid 12
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace("org.flixel"),"FlxPoint")
         optional Null()
         returns QName(PackageNamespace("org.flixel"),"FlxPoint")
         
         body
         maxstack 4
         localcount 12
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         pushbyte 0
         convert_d
         setlocal 7
         pushbyte 0
         convert_d
         setlocal 8
         getlocal 5
         pushdouble -0.017453293
         multiply
         convert_d
         setlocal 9
         jump ofs0
         ofs1:
         label
         getlocal 9
         pushdouble 6.28318531
         add
         convert_d
         setlocal 9
         ofs0:
         getlocal 9
         pushdouble -3.14159265
         iflt ofs1
         jump ofs2
         ofs3:
         label
         getlocal 9
         pushdouble 6.28318531
         subtract
         convert_d
         setlocal 9
         ofs2:
         getlocal 9
         pushdouble 3.14159265
         ifgt ofs3
         getlocal 9
         pushbyte 0
         ifnlt ofs4
         pushdouble 1.27323954
         getlocal 9
         multiply
         pushdouble 0.405284735
         getlocal 9
         multiply
         getlocal 9
         multiply
         add
         convert_d
         dup
         setlocal 7
         pushbyte 0
         ifnlt ofs5
         pushdouble 0.225
         getlocal 7
         getlocal 7
         negate
         multiply
         getlocal 7
         subtract
         multiply
         getlocal 7
         add
         convert_d
         setlocal 7
         jump ofs6
         ofs5:
         pushdouble 0.225
         getlocal 7
         getlocal 7
         multiply
         getlocal 7
         subtract
         multiply
         getlocal 7
         add
         convert_d
         setlocal 7
         ofs6:
         jump ofs7
         ofs4:
         pushdouble 1.27323954
         getlocal 9
         multiply
         pushdouble 0.405284735
         getlocal 9
         multiply
         getlocal 9
         multiply
         subtract
         convert_d
         dup
         setlocal 7
         pushbyte 0
         ifnlt ofs8
         pushdouble 0.225
         getlocal 7
         getlocal 7
         negate
         multiply
         getlocal 7
         subtract
         multiply
         getlocal 7
         add
         convert_d
         setlocal 7
         jump ofs7
         ofs8:
         pushdouble 0.225
         getlocal 7
         getlocal 7
         multiply
         getlocal 7
         subtract
         multiply
         getlocal 7
         add
         convert_d
         setlocal 7
         ofs7:
         getlocal 9
         pushdouble 1.57079632
         add
         convert_d
         dup
         setlocal 9
         pushdouble 3.14159265
         ifngt ofs9
         getlocal 9
         pushdouble 6.28318531
         subtract
         convert_d
         setlocal 9
         ofs9:
         getlocal 9
         pushbyte 0
         ifnlt ofs10
         pushdouble 1.27323954
         getlocal 9
         multiply
         pushdouble 0.405284735
         getlocal 9
         multiply
         getlocal 9
         multiply
         add
         convert_d
         dup
         setlocal 8
         pushbyte 0
         ifnlt ofs11
         pushdouble 0.225
         getlocal 8
         getlocal 8
         negate
         multiply
         getlocal 8
         subtract
         multiply
         getlocal 8
         add
         convert_d
         setlocal 8
         jump ofs12
         ofs11:
         pushdouble 0.225
         getlocal 8
         getlocal 8
         multiply
         getlocal 8
         subtract
         multiply
         getlocal 8
         add
         convert_d
         setlocal 8
         ofs12:
         jump ofs13
         ofs10:
         pushdouble 1.27323954
         getlocal 9
         multiply
         pushdouble 0.405284735
         getlocal 9
         multiply
         getlocal 9
         multiply
         subtract
         convert_d
         dup
         setlocal 8
         pushbyte 0
         ifnlt ofs14
         pushdouble 0.225
         getlocal 8
         getlocal 8
         negate
         multiply
         getlocal 8
         subtract
         multiply
         getlocal 8
         add
         convert_d
         setlocal 8
         jump ofs13
         ofs14:
         pushdouble 0.225
         getlocal 8
         getlocal 8
         multiply
         getlocal 8
         subtract
         multiply
         getlocal 8
         add
         convert_d
         setlocal 8
         ofs13:
         getlocal1
         getlocal3
         subtract
         convert_d
         setlocal 10
         getlocal 4
         getlocal2
         subtract
         convert_d
         setlocal 11
         getlocal 6
         pushnull
         ifne ofs15
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         coerce QName(PackageNamespace("org.flixel"),"FlxPoint")
         setlocal 6
         ofs15:
         getlocal 6
         getlocal3
         getlocal 8
         getlocal 10
         multiply
         add
         getlocal 7
         getlocal 11
         multiply
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 6
         getlocal 4
         getlocal 7
         getlocal 10
         multiply
         subtract
         getlocal 8
         getlocal 11
         multiply
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 6
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getAngle(param1:Number, param2:Number) : Number
      {
         trait method QName(PackageNamespace(""),"getAngle")
         flag FINAL
         dispid 13
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 7
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         pushdouble 3.14159265
         pushbyte 4
         divide
         convert_d
         setlocal3
         pushbyte 3
         getlocal3
         multiply
         convert_d
         setlocal 4
         getlocal2
         pushbyte 0
         ifnlt ofs0
         getlocal2
         negate
         convert_d
         jump ofs1
         ofs0:
         getlocal2
         convert_d
         ofs1:
         convert_d
         setlocal 5
         pushbyte 0
         convert_d
         setlocal 6
         getlocal1
         pushbyte 0
         ifnge ofs2
         getlocal3
         getlocal3
         getlocal1
         getlocal 5
         subtract
         getlocal1
         getlocal 5
         add
         divide
         multiply
         subtract
         convert_d
         setlocal 6
         jump ofs3
         ofs2:
         getlocal 4
         getlocal3
         getlocal1
         getlocal 5
         add
         getlocal 5
         getlocal1
         subtract
         divide
         multiply
         subtract
         convert_d
         setlocal 6
         ofs3:
         getlocal2
         pushbyte 0
         ifnlt ofs4
         getlocal 6
         negate
         coerce_a
         jump ofs5
         ofs4:
         getlocal 6
         coerce_a
         ofs5:
         pushdouble 57.2957796
         multiply
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getColor(param1:uint, param2:uint, param3:uint, param4:Number = 1.0) : uint
      {
         trait method QName(PackageNamespace(""),"getColor")
         flag FINAL
         dispid 14
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Number")
         optional Double(1.0)
         returns QName(PackageNamespace(""),"uint")
         
         body
         maxstack 3
         localcount 5
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal 4
         pushbyte 1
         ifngt ofs0
         getlocal 4
         coerce_a
         jump ofs1
         ofs0:
         getlocal 4
         pushshort 255
         multiply
         coerce_a
         ofs1:
         pushshort 255
         bitand
         pushbyte 24
         lshift
         getlocal1
         pushshort 255
         bitand
         pushbyte 16
         lshift
         bitor
         getlocal2
         pushshort 255
         bitand
         pushbyte 8
         lshift
         bitor
         getlocal3
         pushshort 255
         bitand
         bitor
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getColorHSB(param1:Number, param2:Number, param3:Number, param4:Number = 1.0) : uint
      {
         trait method QName(PackageNamespace(""),"getColorHSB")
         flag FINAL
         dispid 15
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         optional Double(1.0)
         returns QName(PackageNamespace(""),"uint")
         
         body
         maxstack 5
         localcount 14
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal 5
         pushnan
         setlocal 6
         pushnan
         setlocal 7
         pushbyte 0
         setlocal 8
         pushnan
         setlocal 9
         pushnan
         setlocal 10
         pushnan
         setlocal 11
         pushnan
         setlocal 12
         getlocal2
         pushdouble 0.0
         ifne ofs0
         getlocal3
         convert_d
         setlocal 5
         getlocal3
         convert_d
         setlocal 6
         getlocal3
         convert_d
         setlocal 7
         jump ofs1
         ofs0:
         getlocal1
         pushshort 360
         ifne ofs2
         pushbyte 0
         convert_d
         setlocal1
         ofs2:
         getlocal1
         pushbyte 60
         divide
         convert_i
         setlocal 8
         getlocal1
         pushbyte 60
         divide
         getlocal 8
         subtract
         convert_d
         setlocal 9
         getlocal3
         pushbyte 1
         getlocal2
         subtract
         multiply
         convert_d
         setlocal 10
         getlocal3
         pushbyte 1
         getlocal2
         getlocal 9
         multiply
         subtract
         multiply
         convert_d
         setlocal 11
         getlocal3
         pushbyte 1
         getlocal2
         pushbyte 1
         getlocal 9
         subtract
         multiply
         subtract
         multiply
         convert_d
         setlocal 12
         jump ofs3
         ofs4:
         label
         getlocal3
         convert_d
         setlocal 5
         getlocal 12
         convert_d
         setlocal 6
         getlocal 10
         convert_d
         setlocal 7
         jump ofs1
         ofs5:
         label
         getlocal 11
         convert_d
         setlocal 5
         getlocal3
         convert_d
         setlocal 6
         getlocal 10
         convert_d
         setlocal 7
         jump ofs1
         ofs6:
         label
         getlocal 10
         convert_d
         setlocal 5
         getlocal3
         convert_d
         setlocal 6
         getlocal 12
         convert_d
         setlocal 7
         jump ofs1
         ofs7:
         label
         getlocal 10
         convert_d
         setlocal 5
         getlocal 11
         convert_d
         setlocal 6
         getlocal3
         convert_d
         setlocal 7
         jump ofs1
         ofs8:
         label
         getlocal 12
         convert_d
         setlocal 5
         getlocal 10
         convert_d
         setlocal 6
         getlocal3
         convert_d
         setlocal 7
         jump ofs1
         ofs9:
         label
         getlocal3
         convert_d
         setlocal 5
         getlocal 10
         convert_d
         setlocal 6
         getlocal 11
         convert_d
         setlocal 7
         jump ofs1
         ofs10:
         label
         pushbyte 0
         convert_d
         setlocal 5
         pushbyte 0
         convert_d
         setlocal 6
         pushbyte 0
         convert_d
         setlocal 7
         jump ofs1
         jump ofs3
         ofs3:
         getlocal 8
         setlocal 13
         pushbyte 0
         getlocal 13
         ifstrictne ofs11
         pushbyte 0
         jump ofs12
         ofs11:
         pushbyte 1
         getlocal 13
         ifstrictne ofs13
         pushbyte 1
         jump ofs12
         ofs13:
         pushbyte 2
         getlocal 13
         ifstrictne ofs14
         pushbyte 2
         jump ofs12
         ofs14:
         pushbyte 3
         getlocal 13
         ifstrictne ofs15
         pushbyte 3
         jump ofs12
         ofs15:
         pushbyte 4
         getlocal 13
         ifstrictne ofs16
         pushbyte 4
         jump ofs12
         ofs16:
         pushbyte 5
         getlocal 13
         ifstrictne ofs17
         pushbyte 5
         jump ofs12
         ofs17:
         jump ofs18
         pushbyte 6
         jump ofs18
         ofs18:
         pushbyte 6
         ofs12:
         kill 13
         lookupswitch ofs10, [ofs4, ofs5, ofs6, ofs7, ofs8, ofs9, ofs10]
         ofs1:
         getlocal 4
         pushbyte 1
         ifngt ofs19
         getlocal 4
         coerce_a
         jump ofs20
         ofs19:
         getlocal 4
         pushshort 255
         multiply
         coerce_a
         ofs20:
         pushshort 255
         bitand
         pushbyte 24
         lshift
         findpropstrict QName(PackageNamespace(""),"uint")
         getlocal 5
         pushshort 255
         multiply
         callproperty QName(PackageNamespace(""),"uint"), 1
         pushbyte 16
         lshift
         bitor
         findpropstrict QName(PackageNamespace(""),"uint")
         getlocal 6
         pushshort 255
         multiply
         callproperty QName(PackageNamespace(""),"uint"), 1
         pushbyte 8
         lshift
         bitor
         findpropstrict QName(PackageNamespace(""),"uint")
         getlocal 7
         pushshort 255
         multiply
         callproperty QName(PackageNamespace(""),"uint"), 1
         bitor
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getRGBA(param1:uint, param2:Array = null) : Array
      {
         trait method QName(PackageNamespace(""),"getRGBA")
         flag FINAL
         dispid 16
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Array")
         optional Null()
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 5
         localcount 3
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal2
         pushnull
         ifne ofs0
         findpropstrict QName(PackageNamespace(""),"Array")
         constructprop QName(PackageNamespace(""),"Array"), 0
         coerce QName(PackageNamespace(""),"Array")
         setlocal2
         ofs0:
         getlocal2
         pushbyte 0
         getlocal1
         pushbyte 16
         rshift
         pushshort 255
         bitand
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         pushbyte 1
         getlocal1
         pushbyte 8
         rshift
         pushshort 255
         bitand
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         pushbyte 2
         getlocal1
         pushshort 255
         bitand
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         pushbyte 3
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         pushbyte 24
         rshift
         pushshort 255
         bitand
         callproperty QName(PackageNamespace(""),"Number"), 1
         pushshort 255
         divide
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getHSB(param1:uint, param2:Array = null) : Array
      {
         trait method QName(PackageNamespace(""),"getHSB")
         flag FINAL
         dispid 17
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Array")
         optional Null()
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 5
         localcount 10
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal2
         pushnull
         ifne ofs0
         findpropstrict QName(PackageNamespace(""),"Array")
         constructprop QName(PackageNamespace(""),"Array"), 0
         coerce QName(PackageNamespace(""),"Array")
         setlocal2
         ofs0:
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         pushbyte 16
         rshift
         pushshort 255
         bitand
         callproperty QName(PackageNamespace(""),"Number"), 1
         pushshort 255
         divide
         convert_d
         setlocal3
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         pushbyte 8
         rshift
         pushshort 255
         bitand
         callproperty QName(PackageNamespace(""),"Number"), 1
         pushshort 255
         divide
         convert_d
         setlocal 4
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         pushshort 255
         bitand
         callproperty QName(PackageNamespace(""),"Number"), 1
         pushshort 255
         divide
         convert_d
         setlocal 5
         getlocal3
         getlocal 4
         ifngt ofs1
         getlocal3
         convert_d
         jump ofs2
         ofs1:
         getlocal 4
         convert_d
         ofs2:
         convert_d
         dup
         setlocal 6
         getlocal 5
         ifngt ofs3
         getlocal 6
         convert_d
         jump ofs4
         ofs3:
         getlocal 5
         convert_d
         ofs4:
         convert_d
         setlocal 7
         getlocal3
         getlocal 4
         ifngt ofs5
         getlocal 4
         convert_d
         jump ofs6
         ofs5:
         getlocal3
         convert_d
         ofs6:
         convert_d
         dup
         setlocal 6
         getlocal 5
         ifngt ofs7
         getlocal 5
         convert_d
         jump ofs8
         ofs7:
         getlocal 6
         convert_d
         ofs8:
         convert_d
         setlocal 8
         getlocal 7
         getlocal 8
         subtract
         convert_d
         setlocal 9
         getlocal2
         pushbyte 2
         getlocal 7
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         pushbyte 1
         pushbyte 0
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         pushbyte 0
         dup
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal 7
         pushbyte 0
         ifeq ofs9
         getlocal2
         pushbyte 1
         getlocal 9
         getlocal 7
         divide
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         ofs9:
         getlocal2
         pushbyte 1
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         pushbyte 0
         ifeq ofs10
         getlocal3
         getlocal 7
         ifne ofs11
         getlocal2
         pushbyte 0
         getlocal 4
         getlocal 5
         subtract
         getlocal 9
         divide
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         jump ofs12
         ofs11:
         getlocal 4
         getlocal 7
         ifne ofs13
         getlocal2
         pushbyte 0
         pushbyte 2
         getlocal 5
         getlocal3
         subtract
         getlocal 9
         divide
         add
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         jump ofs12
         ofs13:
         getlocal 5
         getlocal 7
         ifne ofs12
         getlocal2
         pushbyte 0
         pushbyte 4
         getlocal3
         getlocal 4
         subtract
         getlocal 9
         divide
         add
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         ofs12:
         getlocal2
         pushbyte 0
         getlocal2
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         pushbyte 60
         multiply
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         pushbyte 0
         ifnlt ofs10
         getlocal2
         pushbyte 0
         getlocal2
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         pushshort 360
         add
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         ofs10:
         getlocal2
         pushbyte 3
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         pushbyte 24
         rshift
         pushshort 255
         bitand
         callproperty QName(PackageNamespace(""),"Number"), 1
         pushshort 255
         divide
         setproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getClassName(param1:Object, param2:Boolean = false) : String
      {
         trait method QName(PackageNamespace(""),"getClassName")
         flag FINAL
         dispid 18
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Object")
         param QName(PackageNamespace(""),"Boolean")
         optional False()
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.utils"),"getQualifiedClassName")
         getlocal1
         callproperty QName(PackageNamespace("flash.utils"),"getQualifiedClassName"), 1
         coerce_s
         setlocal3
         getlocal3
         pushstring "::"
         pushstring "."
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"replace"), 2
         coerce_s
         setlocal3
         getlocal2
         iffalse ofs0
         getlocal3
         getlocal3
         pushstring "."
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"lastIndexOf"), 1
         pushbyte 1
         add
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"substr"), 1
         coerce_s
         setlocal3
         ofs0:
         getlocal3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function getClass(param1:String) : Class
      {
         trait method QName(PackageNamespace(""),"getClass")
         flag FINAL
         dispid 19
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Class")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.utils"),"getDefinitionByName")
         getlocal1
         callproperty QName(PackageNamespace("flash.utils"),"getDefinitionByName"), 1
         getlex QName(PackageNamespace(""),"Class")
         astypelate
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function computeVelocity(param1:Number, param2:Number = 0, param3:Number = 0, param4:Number = 10000) : Number
      {
         trait method QName(PackageNamespace(""),"computeVelocity")
         flag FINAL
         dispid 20
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         optional Integer(0)
         optional Integer(0)
         optional Integer(10000)
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 3
         localcount 6
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal 5
         getlocal2
         pushbyte 0
         ifeq ofs0
         getlocal1
         getlocal2
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         multiply
         add
         convert_d
         setlocal1
         jump ofs1
         ofs0:
         getlocal3
         pushbyte 0
         ifeq ofs1
         getlocal3
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         multiply
         convert_d
         setlocal 5
         getlocal1
         getlocal 5
         subtract
         pushbyte 0
         ifngt ofs2
         getlocal1
         getlocal 5
         subtract
         convert_d
         setlocal1
         jump ofs1
         ofs2:
         getlocal1
         getlocal 5
         add
         pushbyte 0
         ifnlt ofs3
         getlocal1
         getlocal 5
         add
         convert_d
         setlocal1
         jump ofs1
         ofs3:
         pushbyte 0
         convert_d
         setlocal1
         ofs1:
         getlocal1
         pushbyte 0
         equals
         not
         dup
         iffalse ofs4
         pop
         getlocal 4
         pushshort 10000
         equals
         not
         ofs4:
         iffalse ofs5
         getlocal1
         getlocal 4
         ifngt ofs6
         getlocal 4
         convert_d
         setlocal1
         jump ofs5
         ofs6:
         getlocal1
         getlocal 4
         negate
         ifnlt ofs5
         getlocal 4
         negate
         convert_d
         setlocal1
         ofs5:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function setWorldBounds(param1:Number = 0, param2:Number = 0, param3:Number = 0, param4:Number = 0, param5:uint = 3) : void
      {
         trait method QName(PackageNamespace(""),"setWorldBounds")
         flag FINAL
         dispid 21
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"uint")
         optional Integer(0)
         optional Integer(0)
         optional Integer(0)
         optional Integer(0)
         optional Integer(3)
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 6
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         pushnull
         ifne ofs0
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxRect")
         constructprop QName(PackageNamespace("org.flixel"),"FlxRect"), 0
         setproperty QName(PackageNamespace(""),"bounds")
         ofs0:
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getlocal1
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getlocal2
         setproperty QName(PackageNamespace(""),"y")
         getlocal3
         pushbyte 0
         ifngt ofs1
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getlocal3
         setproperty QName(PackageNamespace(""),"width")
         ofs1:
         getlocal 4
         pushbyte 0
         ifngt ofs2
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getlocal 4
         setproperty QName(PackageNamespace(""),"height")
         ofs2:
         getlocal 5
         pushbyte 0
         ifngt ofs3
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getlocal 5
         setproperty QName(PackageNamespace(""),"divisions")
         ofs3:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public static function overlap(param1:FlxObject, param2:FlxObject, param3:Function = null) : Boolean
      {
         trait method QName(PackageNamespace(""),"overlap")
         flag FINAL
         dispid 22
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace(""),"Function")
         optional Null()
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 6
         localcount 4
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal1
         pushnull
         equals
         dup
         iftrue ofs0
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"exists")
         not
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal2
         pushnull
         equals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"exists")
         not
         ofs2:
         iffalse ofs3
         pushfalse
         returnvalue
         ofs3:
         findproperty QName(PackageNamespace(""),"quadTree")
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"height")
         constructprop QName(PackageNamespace("org.flixel"),"FlxQuadTree"), 4
         setproperty QName(PackageNamespace(""),"quadTree")
         getlex QName(PackageNamespace(""),"quadTree")
         getlocal1
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"A_LIST")
         callpropvoid QName(PackageNamespace(""),"add"), 2
         getlocal1
         getlocal2
         ifstrictne ofs4
         getlex QName(PackageNamespace(""),"quadTree")
         pushfalse
         getlocal3
         callproperty QName(PackageNamespace(""),"overlap"), 2
         returnvalue
         ofs4:
         getlex QName(PackageNamespace(""),"quadTree")
         getlocal2
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"B_LIST")
         callpropvoid QName(PackageNamespace(""),"add"), 2
         getlex QName(PackageNamespace(""),"quadTree")
         pushtrue
         getlocal3
         callproperty QName(PackageNamespace(""),"overlap"), 2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function collide(param1:FlxObject, param2:FlxObject) : Boolean
      {
         trait method QName(PackageNamespace(""),"collide")
         flag FINAL
         dispid 23
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 6
         localcount 6
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         getlocal1
         pushnull
         equals
         dup
         iftrue ofs0
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"exists")
         not
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal2
         pushnull
         equals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"exists")
         not
         ofs2:
         iffalse ofs3
         pushfalse
         returnvalue
         ofs3:
         findproperty QName(PackageNamespace(""),"quadTree")
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"width")
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"bounds")
         getproperty QName(PackageNamespace(""),"height")
         constructprop QName(PackageNamespace("org.flixel"),"FlxQuadTree"), 4
         setproperty QName(PackageNamespace(""),"quadTree")
         getlex QName(PackageNamespace(""),"quadTree")
         getlocal1
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"A_LIST")
         callpropvoid QName(PackageNamespace(""),"add"), 2
         getlocal1
         getlocal2
         strictequals
         setlocal3
         getlocal3
         iftrue ofs4
         getlex QName(PackageNamespace(""),"quadTree")
         getlocal2
         getlex QName(PackageNamespace("org.flixel"),"FlxQuadTree")
         getproperty QName(PackageNamespace(""),"B_LIST")
         callpropvoid QName(PackageNamespace(""),"add"), 2
         ofs4:
         getlex QName(PackageNamespace(""),"quadTree")
         getlocal3
         not
         getlex QName(PackageNamespace(""),"solveXCollision")
         callproperty QName(PackageNamespace(""),"overlap"), 2
         convert_b
         setlocal 4
         getlex QName(PackageNamespace(""),"quadTree")
         getlocal3
         not
         getlex QName(PackageNamespace(""),"solveYCollision")
         callproperty QName(PackageNamespace(""),"overlap"), 2
         convert_b
         setlocal 5
         getlocal 4
         convert_b
         dup
         iftrue ofs5
         pop
         getlocal 5
         convert_b
         ofs5:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function solveXCollision(param1:FlxObject, param2:FlxObject) : Boolean
      {
         trait method QName(PackageNamespace(""),"solveXCollision")
         flag FINAL
         dispid 24
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 32
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal 5
         pushfalse
         setlocal 6
         pushnan
         setlocal 7
         pushfalse
         setlocal 9
         pushbyte 0
         convert_u
         setlocal 16
         pushbyte 0
         convert_u
         setlocal 17
         pushnull
         coerce QName(PackageNamespace("org.flixel"),"FlxRect")
         setlocal 18
         pushnan
         setlocal 24
         pushnan
         setlocal 25
         pushnan
         setlocal 26
         pushnan
         setlocal 27
         pushnan
         setlocal 28
         pushnan
         setlocal 29
         pushnan
         setlocal 30
         pushnan
         setlocal 31
         getlocal1
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal3
         getlocal2
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 4
         getlocal3
         getlocal 4
         ifne ofs0
         pushfalse
         returnvalue
         ofs0:
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"preCollide"), 1
         getlocal2
         getlocal1
         callpropvoid QName(PackageNamespace(""),"preCollide"), 1
         pushfalse
         setlocal 8
         getlocal3
         pushbyte 0
         equals
         setlocal 10
         getlocal3
         pushbyte 0
         lessthan
         setlocal 11
         getlocal3
         pushbyte 0
         greaterthan
         setlocal 12
         getlocal 4
         pushbyte 0
         equals
         setlocal 13
         getlocal 4
         pushbyte 0
         lessthan
         setlocal 14
         getlocal 4
         pushbyte 0
         greaterthan
         setlocal 15
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullX")
         coerce QName(PackageNamespace("org.flixel"),"FlxRect")
         setlocal 18
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullX")
         coerce QName(PackageNamespace("org.flixel"),"FlxRect")
         setlocal 19
         getlocal1
         getproperty QName(PackageNamespace(""),"colOffsets")
         coerce QName(PackageNamespace(""),"Array")
         setlocal 20
         getlocal2
         getproperty QName(PackageNamespace(""),"colOffsets")
         coerce QName(PackageNamespace(""),"Array")
         setlocal 21
         getlocal 20
         getproperty QName(PackageNamespace(""),"length")
         convert_u
         setlocal 22
         getlocal 21
         getproperty QName(PackageNamespace(""),"length")
         convert_u
         setlocal 23
         getlocal 10
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal 14
         convert_b
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal 12
         convert_b
         dup
         iffalse ofs2
         pop
         getlocal 13
         convert_b
         ofs2:
         dup
         iftrue ofs3
         pop
         getlocal 12
         convert_b
         dup
         iffalse ofs3
         pop
         getlocal 14
         convert_b
         ofs3:
         dup
         iftrue ofs4
         pop
         getlocal 11
         convert_b
         dup
         iffalse ofs5
         pop
         getlocal 14
         convert_b
         ofs5:
         dup
         iffalse ofs4
         pop
         getlocal3
         pushbyte 0
         ifngt ofs6
         getlocal3
         coerce_a
         jump ofs7
         ofs6:
         getlocal3
         negate
         coerce_a
         ofs7:
         getlocal 4
         pushbyte 0
         ifngt ofs8
         getlocal 4
         coerce_a
         jump ofs9
         ofs8:
         getlocal 4
         negate
         coerce_a
         ofs9:
         lessthan
         ofs4:
         dup
         iftrue ofs10
         pop
         getlocal 12
         convert_b
         dup
         iffalse ofs11
         pop
         getlocal 15
         convert_b
         ofs11:
         dup
         iffalse ofs10
         pop
         getlocal3
         pushbyte 0
         ifngt ofs12
         getlocal3
         coerce_a
         jump ofs13
         ofs12:
         getlocal3
         negate
         coerce_a
         ofs13:
         getlocal 4
         pushbyte 0
         ifngt ofs14
         getlocal 4
         coerce_a
         jump ofs15
         ofs14:
         getlocal 4
         negate
         coerce_a
         ofs15:
         greaterthan
         ofs10:
         convert_b
         dup
         setlocal 9
         iffalse ofs16
         getlocal1
         getproperty QName(PackageNamespace(""),"collideRight")
         not
         dup
         iftrue ofs17
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"collideLeft")
         not
         ofs17:
         jump ofs18
         ofs16:
         getlocal1
         getproperty QName(PackageNamespace(""),"collideLeft")
         not
         dup
         iftrue ofs18
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"collideRight")
         not
         ofs18:
         iffalse ofs19
         pushfalse
         returnvalue
         ofs19:
         pushbyte 0
         convert_u
         setlocal 16
         jump ofs20
         ofs21:
         label
         getlocal 20
         getlocal 16
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("x",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 24
         getlocal 20
         getlocal 16
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("y",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 25
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 24
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 25
         add
         setproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         convert_u
         setlocal 17
         jump ofs22
         ofs23:
         label
         getlocal 21
         getlocal 17
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("x",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 26
         getlocal 21
         getlocal 17
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("y",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 27
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getproperty QName(PackageNamespace(""),"width")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         lessthan
         dup
         iftrue ofs24
         pop
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getproperty QName(PackageNamespace(""),"width")
         add
         greaterthan
         ofs24:
         dup
         iftrue ofs25
         pop
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 18
         getproperty QName(PackageNamespace(""),"height")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         lessthan
         ofs25:
         dup
         iftrue ofs26
         pop
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 19
         getproperty QName(PackageNamespace(""),"height")
         add
         greaterthan
         ofs26:
         iffalse ofs27
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 17
         increment
         convert_u
         setlocal 17
         jump ofs22
         ofs27:
         getlocal 9
         iffalse ofs28
         getlocal 11
         iffalse ofs29
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"width")
         add
         convert_d
         setlocal 28
         jump ofs30
         ofs29:
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getproperty QName(PackageNamespace(""),"width")
         add
         convert_d
         setlocal 28
         ofs30:
         getlocal 14
         iffalse ofs31
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 29
         jump ofs32
         ofs31:
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getproperty QName(PackageNamespace(""),"width")
         add
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal 29
         ofs32:
         jump ofs33
         ofs28:
         getlocal 14
         iffalse ofs34
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         negate
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal 28
         jump ofs35
         ofs34:
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         negate
         getlocal 19
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal 28
         ofs35:
         getlocal 11
         iffalse ofs36
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         negate
         convert_d
         setlocal 29
         jump ofs33
         ofs36:
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         negate
         getlocal 18
         getproperty QName(PackageNamespace(""),"width")
         subtract
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"width")
         add
         convert_d
         setlocal 29
         ofs33:
         getlocal 28
         getlocal 29
         subtract
         convert_d
         setlocal 7
         getlocal1
         getproperty QName(PackageNamespace(""),"fixed")
         convert_b
         setlocal 5
         getlocal2
         getproperty QName(PackageNamespace(""),"fixed")
         convert_b
         setlocal 6
         getlocal 5
         convert_b
         dup
         iffalse ofs37
         pop
         getlocal 6
         convert_b
         ofs37:
         iffalse ofs38
         getlocal 5
         convert_b
         dup
         iffalse ofs39
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         equals
         dup
         iffalse ofs39
         pop
         getlocal3
         pushbyte 0
         equals
         ofs39:
         convert_b
         setlocal 5
         getlocal 6
         convert_b
         dup
         iffalse ofs40
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         equals
         dup
         iffalse ofs40
         pop
         getlocal 4
         pushbyte 0
         equals
         ofs40:
         convert_b
         setlocal 6
         ofs38:
         getlocal 7
         pushbyte 0
         equals
         dup
         iftrue ofs41
         pop
         getlocal 5
         not
         dup
         iffalse ofs41
         pop
         getlocal 7
         pushbyte 0
         ifngt ofs42
         getlocal 7
         coerce_a
         jump ofs43
         ofs42:
         getlocal 7
         negate
         coerce_a
         ofs43:
         getlocal 18
         getproperty QName(PackageNamespace(""),"width")
         pushdouble 0.8
         multiply
         greaterthan
         ofs41:
         dup
         iftrue ofs44
         pop
         getlocal 6
         not
         dup
         iffalse ofs44
         pop
         getlocal 7
         pushbyte 0
         ifngt ofs45
         getlocal 7
         coerce_a
         jump ofs46
         ofs45:
         getlocal 7
         negate
         coerce_a
         ofs46:
         getlocal 19
         getproperty QName(PackageNamespace(""),"width")
         pushdouble 0.8
         multiply
         greaterthan
         ofs44:
         iffalse ofs47
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 17
         increment
         convert_u
         setlocal 17
         jump ofs22
         ofs47:
         pushtrue
         setlocal 8
         getlocal2
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 30
         getlocal1
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 31
         getlocal 5
         not
         dup
         iffalse ofs48
         pop
         getlocal 6
         convert_b
         ofs48:
         iffalse ofs49
         getlocal1
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs50
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         subtract
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs51
         ofs50:
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"x")
         ofs51:
         jump ofs52
         ofs49:
         getlocal 5
         convert_b
         dup
         iffalse ofs53
         pop
         getlocal 6
         not
         ofs53:
         iffalse ofs54
         getlocal2
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs55
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         add
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs56
         ofs55:
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"x")
         ofs56:
         jump ofs52
         ofs54:
         getlocal 5
         not
         dup
         iffalse ofs57
         pop
         getlocal 6
         not
         ofs57:
         iffalse ofs52
         getlocal 7
         pushbyte 2
         divide
         convert_d
         setlocal 7
         getlocal1
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs58
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         subtract
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs59
         ofs58:
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"x")
         ofs59:
         getlocal2
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs60
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         add
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs61
         ofs60:
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"x")
         ofs61:
         getlocal 30
         pushdouble 0.5
         multiply
         convert_d
         setlocal 30
         getlocal 31
         pushdouble 0.5
         multiply
         convert_d
         setlocal 31
         ofs52:
         getlocal 9
         iffalse ofs62
         getlocal1
         getlocal2
         getlocal 30
         callpropvoid QName(PackageNamespace(""),"hitRight"), 2
         getlocal2
         getlocal1
         getlocal 31
         callpropvoid QName(PackageNamespace(""),"hitLeft"), 2
         jump ofs63
         ofs62:
         getlocal1
         getlocal2
         getlocal 30
         callpropvoid QName(PackageNamespace(""),"hitLeft"), 2
         getlocal2
         getlocal1
         getlocal 31
         callpropvoid QName(PackageNamespace(""),"hitRight"), 2
         ofs63:
         getlocal 5
         not
         dup
         iffalse ofs64
         pop
         getlocal 7
         pushbyte 0
         equals
         not
         ofs64:
         iffalse ofs65
         getlocal 9
         iffalse ofs66
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"width")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"width")
         jump ofs67
         ofs66:
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"width")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"width")
         ofs67:
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullY")
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"x")
         ofs65:
         getlocal 6
         not
         dup
         iffalse ofs68
         pop
         getlocal 7
         pushbyte 0
         equals
         not
         ofs68:
         iffalse ofs69
         getlocal 9
         iffalse ofs70
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"width")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"width")
         jump ofs71
         ofs70:
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"width")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"width")
         ofs71:
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullY")
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"x")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"x")
         ofs69:
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 17
         increment
         convert_u
         setlocal 17
         ofs22:
         getlocal 17
         getlocal 23
         iflt ofs23
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 24
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 25
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 16
         increment
         convert_u
         setlocal 16
         ofs20:
         getlocal 16
         getlocal 22
         iflt ofs21
         getlocal 8
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public static function solveYCollision(param1:FlxObject, param2:FlxObject) : Boolean
      {
         trait method QName(PackageNamespace(""),"solveYCollision")
         flag FINAL
         dispid 25
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 4
         localcount 32
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal 5
         pushfalse
         setlocal 6
         pushnan
         setlocal 7
         pushfalse
         setlocal 9
         pushbyte 0
         convert_u
         setlocal 16
         pushbyte 0
         convert_u
         setlocal 17
         pushnan
         setlocal 24
         pushnan
         setlocal 25
         pushnan
         setlocal 26
         pushnan
         setlocal 27
         pushnan
         setlocal 28
         pushnan
         setlocal 29
         pushnan
         setlocal 30
         pushnan
         setlocal 31
         getlocal1
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal3
         getlocal2
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal 4
         getlocal3
         getlocal 4
         ifne ofs0
         pushfalse
         returnvalue
         ofs0:
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"preCollide"), 1
         getlocal2
         getlocal1
         callpropvoid QName(PackageNamespace(""),"preCollide"), 1
         pushfalse
         setlocal 8
         getlocal3
         pushbyte 0
         equals
         setlocal 10
         getlocal3
         pushbyte 0
         lessthan
         setlocal 11
         getlocal3
         pushbyte 0
         greaterthan
         setlocal 12
         getlocal 4
         pushbyte 0
         equals
         setlocal 13
         getlocal 4
         pushbyte 0
         lessthan
         setlocal 14
         getlocal 4
         pushbyte 0
         greaterthan
         setlocal 15
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullY")
         coerce QName(PackageNamespace("org.flixel"),"FlxRect")
         setlocal 18
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullY")
         coerce QName(PackageNamespace("org.flixel"),"FlxRect")
         setlocal 19
         getlocal1
         getproperty QName(PackageNamespace(""),"colOffsets")
         coerce QName(PackageNamespace(""),"Array")
         setlocal 20
         getlocal2
         getproperty QName(PackageNamespace(""),"colOffsets")
         coerce QName(PackageNamespace(""),"Array")
         setlocal 21
         getlocal 20
         getproperty QName(PackageNamespace(""),"length")
         convert_u
         setlocal 22
         getlocal 21
         getproperty QName(PackageNamespace(""),"length")
         convert_u
         setlocal 23
         getlocal 10
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal 14
         convert_b
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal 12
         convert_b
         dup
         iffalse ofs2
         pop
         getlocal 13
         convert_b
         ofs2:
         dup
         iftrue ofs3
         pop
         getlocal 12
         convert_b
         dup
         iffalse ofs3
         pop
         getlocal 14
         convert_b
         ofs3:
         dup
         iftrue ofs4
         pop
         getlocal 11
         convert_b
         dup
         iffalse ofs5
         pop
         getlocal 14
         convert_b
         ofs5:
         dup
         iffalse ofs4
         pop
         getlocal3
         pushbyte 0
         ifngt ofs6
         getlocal3
         coerce_a
         jump ofs7
         ofs6:
         getlocal3
         negate
         coerce_a
         ofs7:
         getlocal 4
         pushbyte 0
         ifngt ofs8
         getlocal 4
         coerce_a
         jump ofs9
         ofs8:
         getlocal 4
         negate
         coerce_a
         ofs9:
         lessthan
         ofs4:
         dup
         iftrue ofs10
         pop
         getlocal 12
         convert_b
         dup
         iffalse ofs11
         pop
         getlocal 15
         convert_b
         ofs11:
         dup
         iffalse ofs10
         pop
         getlocal3
         pushbyte 0
         ifngt ofs12
         getlocal3
         coerce_a
         jump ofs13
         ofs12:
         getlocal3
         negate
         coerce_a
         ofs13:
         getlocal 4
         pushbyte 0
         ifngt ofs14
         getlocal 4
         coerce_a
         jump ofs15
         ofs14:
         getlocal 4
         negate
         coerce_a
         ofs15:
         greaterthan
         ofs10:
         convert_b
         dup
         setlocal 9
         iffalse ofs16
         getlocal1
         getproperty QName(PackageNamespace(""),"collideBottom")
         not
         dup
         iftrue ofs17
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"collideTop")
         not
         ofs17:
         jump ofs18
         ofs16:
         getlocal1
         getproperty QName(PackageNamespace(""),"collideTop")
         not
         dup
         iftrue ofs18
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"collideBottom")
         not
         ofs18:
         iffalse ofs19
         pushfalse
         returnvalue
         ofs19:
         pushbyte 0
         convert_u
         setlocal 16
         jump ofs20
         ofs21:
         label
         getlocal 20
         getlocal 16
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("x",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 24
         getlocal 20
         getlocal 16
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("y",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 25
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 24
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 25
         add
         setproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         convert_u
         setlocal 17
         jump ofs22
         ofs23:
         label
         getlocal 21
         getlocal 17
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("x",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 26
         getlocal 21
         getlocal 17
         getproperty MultinameL([PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         getproperty Multiname("y",[PrivateNamespace(null,"#FlxU/1"),PackageInternalNs("org.flixel"),PackageNamespace(""),PackageNamespace("org.flixel"),PrivateNamespace(null,"#FlxU/2"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.flixel:FlxU"),StaticProtectedNs("org.flixel:FlxU"),StaticProtectedNs("Object")])
         convert_d
         setlocal 27
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getproperty QName(PackageNamespace(""),"width")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         lessthan
         dup
         iftrue ofs24
         pop
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getproperty QName(PackageNamespace(""),"width")
         add
         greaterthan
         ofs24:
         dup
         iftrue ofs25
         pop
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 18
         getproperty QName(PackageNamespace(""),"height")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         lessthan
         ofs25:
         dup
         iftrue ofs26
         pop
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 19
         getproperty QName(PackageNamespace(""),"height")
         add
         greaterthan
         ofs26:
         iffalse ofs27
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 17
         increment
         convert_u
         setlocal 17
         jump ofs22
         ofs27:
         getlocal 9
         iffalse ofs28
         getlocal 11
         iffalse ofs29
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"height")
         add
         convert_d
         setlocal 28
         jump ofs30
         ofs29:
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 18
         getproperty QName(PackageNamespace(""),"height")
         add
         convert_d
         setlocal 28
         ofs30:
         getlocal 14
         iffalse ofs31
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal 29
         jump ofs32
         ofs31:
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 19
         getproperty QName(PackageNamespace(""),"height")
         add
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal 29
         ofs32:
         jump ofs33
         ofs28:
         getlocal 14
         iffalse ofs34
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         negate
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal 28
         jump ofs35
         ofs34:
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         negate
         getlocal 19
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal 28
         ofs35:
         getlocal 11
         iffalse ofs36
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         negate
         convert_d
         setlocal 29
         jump ofs33
         ofs36:
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         negate
         getlocal 18
         getproperty QName(PackageNamespace(""),"height")
         subtract
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"height")
         add
         convert_d
         setlocal 29
         ofs33:
         getlocal 28
         getlocal 29
         subtract
         convert_d
         setlocal 7
         getlocal1
         getproperty QName(PackageNamespace(""),"fixed")
         convert_b
         setlocal 5
         getlocal2
         getproperty QName(PackageNamespace(""),"fixed")
         convert_b
         setlocal 6
         getlocal 5
         convert_b
         dup
         iffalse ofs37
         pop
         getlocal 6
         convert_b
         ofs37:
         iffalse ofs38
         getlocal 5
         convert_b
         dup
         iffalse ofs39
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         equals
         dup
         iffalse ofs39
         pop
         getlocal3
         pushbyte 0
         equals
         ofs39:
         convert_b
         setlocal 5
         getlocal 6
         convert_b
         dup
         iffalse ofs40
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         equals
         dup
         iffalse ofs40
         pop
         getlocal 4
         pushbyte 0
         equals
         ofs40:
         convert_b
         setlocal 6
         ofs38:
         getlocal 7
         pushbyte 0
         equals
         dup
         iftrue ofs41
         pop
         getlocal 5
         not
         dup
         iffalse ofs41
         pop
         getlocal 7
         pushbyte 0
         ifngt ofs42
         getlocal 7
         coerce_a
         jump ofs43
         ofs42:
         getlocal 7
         negate
         coerce_a
         ofs43:
         getlocal 18
         getproperty QName(PackageNamespace(""),"height")
         pushdouble 0.8
         multiply
         greaterthan
         ofs41:
         dup
         iftrue ofs44
         pop
         getlocal 6
         not
         dup
         iffalse ofs44
         pop
         getlocal 7
         pushbyte 0
         ifngt ofs45
         getlocal 7
         coerce_a
         jump ofs46
         ofs45:
         getlocal 7
         negate
         coerce_a
         ofs46:
         getlocal 19
         getproperty QName(PackageNamespace(""),"height")
         pushdouble 0.8
         multiply
         greaterthan
         ofs44:
         iffalse ofs47
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 17
         increment
         convert_u
         setlocal 17
         jump ofs22
         ofs47:
         pushtrue
         setlocal 8
         getlocal2
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal 30
         getlocal1
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal 31
         getlocal 5
         not
         dup
         iffalse ofs48
         pop
         getlocal 6
         convert_b
         ofs48:
         iffalse ofs49
         getlocal1
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs50
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         subtract
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs51
         ofs50:
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"y")
         ofs51:
         jump ofs52
         ofs49:
         getlocal 5
         convert_b
         dup
         iffalse ofs53
         pop
         getlocal 6
         not
         ofs53:
         iffalse ofs54
         getlocal2
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs55
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         add
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs56
         ofs55:
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"y")
         ofs56:
         jump ofs52
         ofs54:
         getlocal 5
         not
         dup
         iffalse ofs57
         pop
         getlocal 6
         not
         ofs57:
         iffalse ofs52
         getlocal 7
         pushbyte 2
         divide
         convert_d
         setlocal 7
         getlocal1
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs58
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         subtract
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs59
         ofs58:
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"y")
         ofs59:
         getlocal2
         getproperty QName(PackageInternalNs("org.flixel"),"_group")
         iffalse ofs60
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         add
         callpropvoid QName(PackageNamespace(""),"reset"), 2
         jump ofs61
         ofs60:
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"y")
         ofs61:
         getlocal 30
         pushdouble 0.5
         multiply
         convert_d
         setlocal 30
         getlocal 31
         pushdouble 0.5
         multiply
         convert_d
         setlocal 31
         ofs52:
         getlocal 9
         iffalse ofs62
         getlocal1
         getlocal2
         getlocal 30
         callpropvoid QName(PackageNamespace(""),"hitBottom"), 2
         getlocal2
         getlocal1
         getlocal 31
         callpropvoid QName(PackageNamespace(""),"hitTop"), 2
         jump ofs63
         ofs62:
         getlocal1
         getlocal2
         getlocal 30
         callpropvoid QName(PackageNamespace(""),"hitTop"), 2
         getlocal2
         getlocal1
         getlocal 31
         callpropvoid QName(PackageNamespace(""),"hitBottom"), 2
         ofs63:
         getlocal 5
         not
         dup
         iffalse ofs64
         pop
         getlocal 7
         pushbyte 0
         equals
         not
         ofs64:
         iffalse ofs65
         getlocal 9
         iffalse ofs66
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 6
         convert_b
         dup
         iffalse ofs67
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"moves")
         convert_b
         ofs67:
         iffalse ofs68
         getlocal2
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 30
         getlocal1
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         getlocal 30
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 30
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullX")
         getlocal1
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"x")
         getlocal 30
         add
         setproperty QName(PackageNamespace(""),"x")
         ofs68:
         jump ofs65
         ofs66:
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"height")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"height")
         ofs65:
         getlocal 6
         not
         dup
         iffalse ofs69
         pop
         getlocal 7
         pushbyte 0
         equals
         not
         ofs69:
         iffalse ofs70
         getlocal 9
         iffalse ofs71
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"height")
         getlocal 7
         subtract
         setproperty QName(PackageNamespace(""),"height")
         jump ofs70
         ofs71:
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"height")
         getlocal 7
         add
         setproperty QName(PackageNamespace(""),"height")
         getlocal 5
         convert_b
         dup
         iffalse ofs72
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"moves")
         convert_b
         ofs72:
         iffalse ofs70
         getlocal1
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 31
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal 31
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 31
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullX")
         getlocal2
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"x")
         getlocal 31
         add
         setproperty QName(PackageNamespace(""),"x")
         ofs70:
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"x")
         getlocal 26
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 19
         getlocal 19
         getproperty QName(PackageNamespace(""),"y")
         getlocal 27
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 17
         increment
         convert_u
         setlocal 17
         ofs22:
         getlocal 17
         getlocal 23
         iflt ofs23
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"x")
         getlocal 24
         subtract
         setproperty QName(PackageNamespace(""),"x")
         getlocal 18
         getlocal 18
         getproperty QName(PackageNamespace(""),"y")
         getlocal 25
         subtract
         setproperty QName(PackageNamespace(""),"y")
         getlocal 16
         increment
         convert_u
         setlocal 16
         ofs20:
         getlocal 16
         getlocal 22
         iflt ofs21
         getlocal 8
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
