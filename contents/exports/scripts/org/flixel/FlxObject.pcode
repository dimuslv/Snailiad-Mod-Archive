
{
   method
   name null
   returns null
   
   body
   maxstack 2
   localcount 1
   initscopedepth 1
   maxscopedepth 5
   
   code
   getlocal0
   pushscope
   findpropstrict Multiname("FlxObject",[PackageNamespace("org.flixel")])
   getlex QName(PackageNamespace(""),"Object")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxPoint")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxRect")
   pushscope
   getlex QName(PackageNamespace("org.flixel"),"FlxRect")
   newclass #FlxObject
   popscope
   popscope
   popscope
   initproperty QName(PackageNamespace("org.flixel"),"FlxObject")
   returnvoid
   end ; code
   end ; body
   end ; method
}

package org.flixel
{
   import flash.geom.Point;
   
   public class FlxObject extends FlxRect
   {
      
      protected static const _pZero:FlxPoint;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findproperty QName(StaticProtectedNs("org.flixel:FlxObject"),"_pZero")
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         initproperty QName(StaticProtectedNs("org.flixel:FlxObject"),"_pZero")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var exists:Boolean;
      
      public var active:Boolean;
      
      public var visible:Boolean;
      
      protected var _solid:Boolean;
      
      protected var _fixed:Boolean;
      
      public var velocity:FlxPoint;
      
      public var acceleration:FlxPoint;
      
      public var drag:FlxPoint;
      
      public var maxVelocity:FlxPoint;
      
      public var angle:Number;
      
      public var angularVelocity:Number;
      
      public var angularAcceleration:Number;
      
      public var angularDrag:Number;
      
      public var maxAngular:Number;
      
      public var origin:FlxPoint;
      
      public var thrust:Number;
      
      public var maxThrust:Number;
      
      public var scrollFactor:FlxPoint;
      
      protected var _flicker:Boolean;
      
      protected var _flickerTimer:Number;
      
      public var health:Number;
      
      public var dead:Boolean;
      
      protected var _point:FlxPoint;
      
      protected var _rect:FlxRect;
      
      protected var _flashPoint:Point;
      
      public var moves:Boolean;
      
      public var colHullX:FlxRect;
      
      public var colHullY:FlxRect;
      
      public var colVector:FlxPoint;
      
      public var colOffsets:Array;
      
      var _group:Boolean;
      
      public var onFloor:Boolean;
      
      public var collideLeft:Boolean;
      
      public var collideRight:Boolean;
      
      public var collideTop:Boolean;
      
      public var collideBottom:Boolean;
      
      public function FlxObject(param1:Number = 0, param2:Number = 0, param3:Number = 0, param4:Number = 0)
      {
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         optional Integer(0)
         optional Integer(0)
         optional Integer(0)
         optional Integer(0)
         returns null
         
         body
         maxstack 5
         localcount 5
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         getlocal 4
         constructsuper 4
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"exists")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"active")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"visible")
         getlocal0
         pushtrue
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_solid")
         getlocal0
         pushfalse
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_fixed")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"moves")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"collideLeft")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"collideRight")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"collideTop")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"collideBottom")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         initproperty QName(PackageNamespace(""),"origin")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         initproperty QName(PackageNamespace(""),"velocity")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         initproperty QName(PackageNamespace(""),"acceleration")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         initproperty QName(PackageNamespace(""),"drag")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         pushshort 10000
         pushshort 10000
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 2
         initproperty QName(PackageNamespace(""),"maxVelocity")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"angle")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"angularVelocity")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"angularAcceleration")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"angularDrag")
         getlocal0
         pushshort 10000
         initproperty QName(PackageNamespace(""),"maxAngular")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"thrust")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         pushbyte 1
         dup
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 2
         initproperty QName(PackageNamespace(""),"scrollFactor")
         getlocal0
         pushfalse
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flicker")
         getlocal0
         pushbyte -1
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         getlocal0
         pushbyte 1
         initproperty QName(PackageNamespace(""),"health")
         getlocal0
         pushfalse
         initproperty QName(PackageNamespace(""),"dead")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxRect")
         constructprop QName(PackageNamespace("org.flixel"),"FlxRect"), 0
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_rect")
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 0
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flashPoint")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxRect")
         constructprop QName(PackageNamespace("org.flixel"),"FlxRect"), 0
         initproperty QName(PackageNamespace(""),"colHullX")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxRect")
         constructprop QName(PackageNamespace("org.flixel"),"FlxRect"), 0
         initproperty QName(PackageNamespace(""),"colHullY")
         getlocal0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         initproperty QName(PackageNamespace(""),"colVector")
         getlocal0
         findpropstrict QName(PackageNamespace(""),"Array")
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         constructprop QName(PackageNamespace(""),"Array"), 1
         initproperty QName(PackageNamespace(""),"colOffsets")
         getlocal0
         pushfalse
         initproperty QName(PackageInternalNs("org.flixel"),"_group")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function destroy() : void
      {
         trait method QName(PackageNamespace(""),"destroy")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"velocity")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"acceleration")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"drag")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"maxVelocity")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"origin")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"scrollFactor")
         getlocal0
         pushnull
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getlocal0
         pushnull
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_rect")
         getlocal0
         pushnull
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flashPoint")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"colHullX")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"colHullY")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"colVector")
         getlocal0
         getproperty QName(PackageNamespace(""),"colOffsets")
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         setlocal1
         pushbyte 0
         setlocal2
         jump ofs0
         ofs1:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"colOffsets")
         getlocal2
         pushnull
         setproperty MultinameL([PrivateNamespace(null,"#FlxObject/1"),StaticProtectedNs("org.flixel:FlxObject"),PackageNamespace("org.flixel"),PackageNamespace(""),ProtectedNamespace("org.flixel:FlxObject"),PackageInternalNs("org.flixel"),PrivateNamespace(null,"#FlxObject/2"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("org.flixel:FlxRect"),StaticProtectedNs("org.flixel:FlxPoint"),StaticProtectedNs("Object")])
         inclocal_i 2
         ofs0:
         getlocal2
         getlocal1
         iflt ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"colOffsets")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"length")
         getlocal0
         pushnull
         initproperty QName(PackageNamespace(""),"colOffsets")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get solid() : Boolean
      {
         trait getter QName(PackageNamespace(""),"solid")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_solid")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set solid(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"solid")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_solid")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get fixed() : Boolean
      {
         trait getter QName(PackageNamespace(""),"fixed")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_fixed")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set fixed(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"fixed")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_fixed")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function refreshHulls() : void
      {
         trait method QName(PackageNamespace(""),"refreshHulls")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getlex QName(PackageNamespace(""),"x")
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getlex QName(PackageNamespace(""),"y")
         setproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getlex QName(PackageNamespace(""),"width")
         setproperty QName(PackageNamespace(""),"width")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getlex QName(PackageNamespace(""),"height")
         setproperty QName(PackageNamespace(""),"height")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getlex QName(PackageNamespace(""),"x")
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getlex QName(PackageNamespace(""),"y")
         setproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getlex QName(PackageNamespace(""),"width")
         setproperty QName(PackageNamespace(""),"width")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getlex QName(PackageNamespace(""),"height")
         setproperty QName(PackageNamespace(""),"height")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function updateMotion() : void
      {
         trait method QName(ProtectedNamespace("org.flixel:FlxObject"),"updateMotion")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 8
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal1
         pushnull
         coerce QName(PackageNamespace("org.flixel"),"FlxPoint")
         setlocal2
         pushnull
         coerce QName(PackageNamespace("org.flixel"),"FlxPoint")
         setlocal 5
         pushnan
         setlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"moves")
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_solid")
         iffalse ofs1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"refreshHulls"), 0
         ofs1:
         getlocal0
         pushfalse
         initproperty QName(PackageNamespace(""),"onFloor")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlocal0
         getproperty QName(PackageNamespace(""),"angularVelocity")
         getlocal0
         getproperty QName(PackageNamespace(""),"angularAcceleration")
         getlocal0
         getproperty QName(PackageNamespace(""),"angularDrag")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxAngular")
         callproperty QName(PackageNamespace(""),"computeVelocity"), 4
         getlocal0
         getproperty QName(PackageNamespace(""),"angularVelocity")
         subtract
         pushbyte 2
         divide
         convert_d
         setlocal1
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"angularVelocity")
         getlocal1
         add
         initproperty QName(PackageNamespace(""),"angularVelocity")
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"angle")
         getlocal0
         getproperty QName(PackageNamespace(""),"angularVelocity")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         multiply
         add
         initproperty QName(PackageNamespace(""),"angle")
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"angularVelocity")
         getlocal1
         add
         initproperty QName(PackageNamespace(""),"angularVelocity")
         getlocal0
         getproperty QName(PackageNamespace(""),"thrust")
         pushbyte 0
         ifeq ofs2
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlocal0
         getproperty QName(PackageNamespace(""),"thrust")
         negate
         pushbyte 0
         dup
         dup
         getlocal0
         getproperty QName(PackageNamespace(""),"angle")
         callproperty QName(PackageNamespace(""),"rotatePoint"), 5
         coerce QName(PackageNamespace("org.flixel"),"FlxPoint")
         setlocal2
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxThrust")
         negate
         pushbyte 0
         dup
         dup
         getlocal0
         getproperty QName(PackageNamespace(""),"angle")
         callproperty QName(PackageNamespace(""),"rotatePoint"), 5
         coerce QName(PackageNamespace("org.flixel"),"FlxPoint")
         dup
         setlocal 5
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         ifngt ofs3
         getlocal 5
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         jump ofs4
         ofs3:
         getlocal 5
         getproperty QName(PackageNamespace(""),"x")
         negate
         convert_d
         ofs4:
         convert_d
         dup
         setlocal 6
         getlocal 5
         getproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         ifngt ofs5
         getlocal 5
         getproperty QName(PackageNamespace(""),"y")
         coerce_a
         jump ofs6
         ofs5:
         getlocal 5
         getproperty QName(PackageNamespace(""),"y")
         negate
         coerce_a
         ofs6:
         ifngt ofs7
         getlocal 5
         getlocal 6
         setproperty QName(PackageNamespace(""),"y")
         jump ofs8
         ofs7:
         getlocal 5
         getproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         ifngt ofs9
         getlocal 5
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         jump ofs10
         ofs9:
         getlocal 5
         getproperty QName(PackageNamespace(""),"y")
         negate
         convert_d
         ofs10:
         convert_d
         setlocal 6
         ofs8:
         getlocal0
         getproperty QName(PackageNamespace(""),"maxVelocity")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxVelocity")
         getlocal 6
         pushbyte 0
         ifngt ofs11
         getlocal 6
         convert_d
         jump ofs12
         ofs11:
         getlocal 6
         negate
         convert_d
         ofs12:
         dup
         setlocal 7
         setproperty QName(PackageNamespace(""),"y")
         getlocal 7
         kill 7
         setproperty QName(PackageNamespace(""),"x")
         jump ofs13
         ofs2:
         getlex QName(StaticProtectedNs("org.flixel:FlxObject"),"_pZero")
         coerce QName(PackageNamespace("org.flixel"),"FlxPoint")
         setlocal2
         ofs13:
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"acceleration")
         getproperty QName(PackageNamespace(""),"x")
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"drag")
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxVelocity")
         getproperty QName(PackageNamespace(""),"x")
         callproperty QName(PackageNamespace(""),"computeVelocity"), 4
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         subtract
         pushbyte 2
         divide
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         getlocal1
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         multiply
         convert_d
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         getlocal1
         add
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"acceleration")
         getproperty QName(PackageNamespace(""),"y")
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"drag")
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxVelocity")
         getproperty QName(PackageNamespace(""),"y")
         callproperty QName(PackageNamespace(""),"computeVelocity"), 4
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         subtract
         pushbyte 2
         divide
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         getlocal1
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         multiply
         convert_d
         setlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         getlocal1
         add
         setproperty QName(PackageNamespace(""),"y")
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"x")
         getlocal3
         add
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"y")
         getlocal 4
         add
         initproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_solid")
         iftrue ofs14
         returnvoid
         ofs14:
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getlocal3
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getlocal 4
         setproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"width")
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         ifngt ofs15
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         coerce_a
         jump ofs16
         ofs15:
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         negate
         coerce_a
         ofs16:
         add
         setproperty QName(PackageNamespace(""),"width")
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         ifnlt ofs17
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullX")
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"x")
         add
         setproperty QName(PackageNamespace(""),"x")
         ofs17:
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getlex QName(PackageNamespace(""),"x")
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"height")
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         ifngt ofs18
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"y")
         coerce_a
         jump ofs19
         ofs18:
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"y")
         negate
         coerce_a
         ofs19:
         add
         setproperty QName(PackageNamespace(""),"height")
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         ifnlt ofs20
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getlocal0
         getproperty QName(PackageNamespace(""),"colHullY")
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"colVector")
         getproperty QName(PackageNamespace(""),"y")
         add
         setproperty QName(PackageNamespace(""),"y")
         ofs20:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function updateFlickering() : void
      {
         trait method QName(ProtectedNamespace("org.flixel:FlxObject"),"updateFlickering")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         callproperty QName(PackageNamespace(""),"flickering"), 0
         iffalse ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         pushbyte 0
         ifngt ofs1
         getlocal0
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"elapsed")
         subtract
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         pushbyte 0
         ifne ofs1
         getlocal0
         pushbyte -1
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         ofs1:
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         pushbyte 0
         ifnlt ofs2
         getlocal0
         pushbyte -1
         callpropvoid QName(PackageNamespace(""),"flicker"), 1
         jump ofs0
         ofs2:
         getlocal0
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flicker")
         not
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flicker")
         getlocal0
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flicker")
         not
         initproperty QName(PackageNamespace(""),"visible")
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function update() : void
      {
         trait method QName(PackageNamespace(""),"update")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(ProtectedNamespace("org.flixel:FlxObject"),"updateMotion"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("org.flixel:FlxObject"),"updateFlickering"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function render() : void
      {
         trait method QName(PackageNamespace(""),"render")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function overlaps(param1:FlxObject) : Boolean
      {
         trait method QName(PackageNamespace(""),"overlaps")
         dispid 0
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         callpropvoid QName(PackageNamespace(""),"getScreenXY"), 1
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal3
         getlocal1
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         callpropvoid QName(PackageNamespace(""),"getScreenXY"), 1
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"x")
         getlocal2
         getlocal1
         getproperty QName(PackageNamespace(""),"width")
         subtract
         lessequals
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"x")
         getlocal2
         getlex QName(PackageNamespace(""),"width")
         add
         greaterequals
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"y")
         getlocal3
         getlocal1
         getproperty QName(PackageNamespace(""),"height")
         subtract
         lessequals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"y")
         getlocal3
         getlex QName(PackageNamespace(""),"height")
         add
         greaterequals
         ofs2:
         iffalse ofs3
         pushfalse
         returnvalue
         ofs3:
         pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function overlapsPoint(param1:Number, param2:Number, param3:Boolean = false) : Boolean
      {
         trait method QName(PackageNamespace(""),"overlapsPoint")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional False()
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"scroll")
         getproperty QName(PackageNamespace(""),"x")
         callproperty QName(PackageNamespace(""),"floor"), 1
         add
         convert_d
         setlocal1
         getlocal2
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"scroll")
         getproperty QName(PackageNamespace(""),"y")
         callproperty QName(PackageNamespace(""),"floor"), 1
         add
         convert_d
         setlocal2
         getlocal0
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         callpropvoid QName(PackageNamespace(""),"getScreenXY"), 1
         getlocal1
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"x")
         lessequals
         dup
         iftrue ofs0
         pop
         getlocal1
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"width")
         add
         greaterequals
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"y")
         lessequals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"height")
         add
         greaterequals
         ofs2:
         iffalse ofs3
         pushfalse
         returnvalue
         ofs3:
         pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function collide(param1:FlxObject = null) : Boolean
      {
         trait method QName(PackageNamespace(""),"collide")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         optional Null()
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlocal0
         getlocal1
         pushnull
         ifne ofs0
         getlocal0
         coerce QName(PackageNamespace("org.flixel"),"FlxObject")
         jump ofs1
         ofs0:
         getlocal1
         coerce QName(PackageNamespace("org.flixel"),"FlxObject")
         ofs1:
         callproperty QName(PackageNamespace(""),"collide"), 2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function preCollide(param1:FlxObject) : void
      {
         trait method QName(PackageNamespace(""),"preCollide")
         dispid 0
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function hitLeft(param1:FlxObject, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"hitLeft")
         dispid 0
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"hitSide"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function hitRight(param1:FlxObject, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"hitRight")
         dispid 0
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         callpropvoid QName(PackageNamespace(""),"hitSide"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function hitSide(param1:FlxObject, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"hitSide")
         dispid 0
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"fixed")
         not
         dup
         iftrue ofs0
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"fixed")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         equals
         not
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         equals
         not
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getlocal2
         setproperty QName(PackageNamespace(""),"x")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function hitTop(param1:FlxObject, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"hitTop")
         dispid 0
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"fixed")
         not
         dup
         iftrue ofs0
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"fixed")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         equals
         not
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         equals
         not
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getlocal2
         setproperty QName(PackageNamespace(""),"y")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function hitBottom(param1:FlxObject, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"hitBottom")
         dispid 0
         method
         name null
         param QName(PackageNamespace("org.flixel"),"FlxObject")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"onFloor")
         getlocal0
         getproperty QName(PackageNamespace(""),"fixed")
         not
         dup
         iftrue ofs0
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"fixed")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"y")
         pushbyte 0
         equals
         not
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         equals
         not
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(PackageNamespace(""),"velocity")
         getlocal2
         setproperty QName(PackageNamespace(""),"y")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function hurt(param1:Number) : void
      {
         trait method QName(PackageNamespace(""),"hurt")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"health")
         getlocal1
         subtract
         initproperty QName(PackageNamespace(""),"health")
         getlocal0
         getproperty QName(PackageNamespace(""),"health")
         pushbyte 0
         ifnle ofs0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"kill"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function kill() : void
      {
         trait method QName(PackageNamespace(""),"kill")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         pushfalse
         initproperty QName(PackageNamespace(""),"exists")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"dead")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function flicker(param1:Number = 1) : void
      {
         trait method QName(PackageNamespace(""),"flicker")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         optional Integer(1)
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         pushbyte 0
         ifnlt ofs0
         getlocal0
         pushfalse
         initproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flicker")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"visible")
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function flickering() : Boolean
      {
         trait method QName(PackageNamespace(""),"flickering")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_flickerTimer")
         pushbyte 0
         greaterequals
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getScreenXY(param1:FlxPoint = null) : FlxPoint
      {
         trait method QName(PackageNamespace(""),"getScreenXY")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("org.flixel"),"FlxPoint")
         optional Null()
         returns QName(PackageNamespace("org.flixel"),"FlxPoint")
         
         body
         maxstack 5
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal1
         pushnull
         ifne ofs0
         findpropstrict QName(PackageNamespace("org.flixel"),"FlxPoint")
         constructprop QName(PackageNamespace("org.flixel"),"FlxPoint"), 0
         coerce QName(PackageNamespace("org.flixel"),"FlxPoint")
         setlocal1
         ofs0:
         getlocal1
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getproperty QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         callproperty QName(PackageNamespace(""),"floor"), 1
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"scroll")
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"scrollFactor")
         getproperty QName(PackageNamespace(""),"x")
         multiply
         callproperty QName(PackageNamespace(""),"floor"), 1
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal1
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlex QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getproperty QName(PackageInternalNs("org.flixel"),"roundingError")
         add
         callproperty QName(PackageNamespace(""),"floor"), 1
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"scroll")
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PackageNamespace(""),"scrollFactor")
         getproperty QName(PackageNamespace(""),"y")
         multiply
         callproperty QName(PackageNamespace(""),"floor"), 1
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function onScreen() : Boolean
      {
         trait method QName(PackageNamespace(""),"onScreen")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         callpropvoid QName(PackageNamespace(""),"getScreenXY"), 1
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"width")
         add
         pushbyte 0
         lessthan
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         greaterthan
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"height")
         add
         pushbyte 0
         lessthan
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("org.flixel:FlxObject"),"_point")
         getproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         greaterthan
         ofs2:
         iffalse ofs3
         pushfalse
         returnvalue
         ofs3:
         pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function reset(param1:Number, param2:Number) : void
      {
         trait method QName(PackageNamespace(""),"reset")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         findproperty QName(PackageNamespace(""),"x")
         getlocal1
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlocal2
         initproperty QName(PackageNamespace(""),"y")
         getlocal0
         pushtrue
         initproperty QName(PackageNamespace(""),"exists")
         getlocal0
         pushfalse
         initproperty QName(PackageNamespace(""),"dead")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getBoundingColor() : uint
      {
         trait method QName(PackageNamespace(""),"getBoundingColor")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"uint")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"solid")
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"fixed")
         iffalse ofs1
         pushint 2130768421
         returnvalue
         ofs1:
         pushint 2147418130
         returnvalue
         jump ofs0
         ofs0:
         pushint 2130743529
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
